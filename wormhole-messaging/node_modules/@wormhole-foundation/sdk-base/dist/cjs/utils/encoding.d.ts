export { bech32 } from "@scure/base";
/** Utility method to strip a given prefix, frequently used to remove '0x' from an address */
export declare const stripPrefix: (prefix: string, str: string) => string;
/** Base16/Hex encoding and decoding utilities */
export declare const hex: {
    /** check if a string is valid hex */
    valid: (input: string) => boolean;
    /** decode a hex string to Uint8Array */
    decode: (input: string) => Uint8Array;
    /** encode a string or Uint8Array to hex */
    encode: (input: string | Uint8Array, prefix?: boolean) => string;
};
/** Base64 encoding and decoding utilities */
export declare const b64: {
    /** check if a string is valid base64 */
    valid: (input: string) => boolean;
    /** decode a base64 string to Uint8Array */
    decode: (str: string) => Uint8Array;
    /** encode a string or Uint8Array to base64 */
    encode: (input: string | Uint8Array) => string;
};
/** Base58 encoding and decoding utilities */
export declare const b58: {
    /** decode a base58 string to Uint8Array */
    decode: (str: string) => Uint8Array;
    /** encode a string or Uint8Array to base58 */
    encode: (input: string | Uint8Array) => string;
};
/** BigInt encoding and decoding utilities */
export declare const bignum: {
    /** decode a hex string or bytes to a bigint */
    decode: (input: string | Uint8Array) => bigint;
    /** encode a bigint as a hex string */
    encode: (input: bigint, prefix?: boolean) => string;
    /** convert a bigint to a hexstring */
    toString: (input: bigint, prefix?: boolean) => string;
    /** convert a bigint or number to bytes,
     *   optionally specify length, left padded with 0s to length
     */
    toBytes: (input: bigint | number, length?: number) => Uint8Array;
    /** safe cast from bigint to number */
    toNumber: (input: bigint) => number;
    /** safe cast from number to bigint */
    toBigInt: (input: number) => bigint;
};
/** Uint8Array encoding and decoding utilities */
export declare const bytes: {
    /** encode a string to Uint8Array */
    encode: (value: string) => Uint8Array;
    /** decode a Uint8Array to string */
    decode: (value: Uint8Array) => string;
    /** compare two Uint8Arrays for equality */
    equals: (lhs: Uint8Array, rhs: Uint8Array) => boolean;
    /** pad a Uint8Array to a given length, optionally specifying padding direction */
    zpad: (arr: Uint8Array, length: number, padStart?: boolean) => Uint8Array;
    /** concatenate multiple Uint8Arrays into a single Uint8Array */
    concat: (...args: Uint8Array[]) => Uint8Array;
};
//# sourceMappingURL=encoding.d.ts.map