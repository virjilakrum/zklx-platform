import type { Layout, LayoutItem, BytesLayoutItem, SwitchLayoutItem, FixedConversion, CustomConversion, NumType, BytesType, PrimitiveType } from "./layout.js";
export declare const isNumType: (x: any) => x is NumType;
export declare const isBytesType: (x: any) => x is Uint8Array;
export declare const isPrimitiveType: (x: any) => x is PrimitiveType;
export declare const isLayoutItem: (x: any) => x is LayoutItem;
export declare const isLayout: (x: any) => x is Layout;
export declare const isFixedUintConversion: (custom: any) => custom is FixedConversion<number, any> | FixedConversion<bigint, any>;
export declare const isFixedBytesConversion: (custom: any) => custom is FixedConversion<Uint8Array, any>;
export declare const isFixedPrimitiveConversion: (custom: any) => custom is FixedConversion<Uint8Array, any> | FixedConversion<number, any> | FixedConversion<bigint, any>;
export type CustomizableBytes = undefined | Layout | Uint8Array | FixedConversion<Uint8Array, any> | CustomConversion<Uint8Array, any> | readonly [Layout, FixedConversion<any, any> | CustomConversion<any, any>];
type CombineObjects<T, U> = {
    [K in keyof T | keyof U]: K extends keyof T ? T[K] : K extends keyof U ? U[K] : never;
};
export type BytesBase = ({} | {
    readonly name: string;
}) & Omit<BytesLayoutItem, "binary" | "custom" | "layout">;
export type CustomizableBytesReturn<B extends BytesBase, P extends CustomizableBytes> = CombineObjects<B, P extends undefined ? {
    readonly binary: "bytes";
} : P extends Layout ? {
    readonly binary: "bytes";
    readonly layout: P;
} : P extends Uint8Array | FixedConversion<Uint8Array, any> | CustomConversion<Uint8Array, any> ? {
    readonly binary: "bytes";
    readonly custom: P;
} : P extends readonly [Layout, FixedConversion<any, any> | CustomConversion<any, any>] ? {
    readonly binary: "bytes";
    readonly layout: P[0];
    readonly custom: P[1];
} : never>;
export declare const customizableBytes: <const B extends BytesBase, const C extends CustomizableBytes>(base: B, spec?: C) => CustomizableBytesReturn<B, C>;
export declare const checkSize: (layoutSize: number, dataSize: number) => number;
export declare const checkItemSize: (item: any, dataSize: number) => number;
export declare const checkNumEquals: (custom: number | bigint, data: number | bigint) => void;
export declare const checkBytesTypeEqual: (custom: BytesType, data: BytesType, opts?: {
    customSlice?: number | readonly [number, number];
    dataSlize?: number | readonly [number, number];
}) => void;
export declare function findIdLayoutPair(item: SwitchLayoutItem, data: any): any;
export {};
//# sourceMappingURL=utils.d.ts.map