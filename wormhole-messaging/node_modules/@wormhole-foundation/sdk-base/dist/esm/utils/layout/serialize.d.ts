import type { Endianness, Layout, LayoutToType, NumType, BytesType, FixedConversion, LayoutObject, LayoutItemBase } from './layout.js';
type Cursor = {
    bytes: BytesType;
    offset: number;
};
export declare function serializeLayout<const L extends Layout, E extends BytesType | undefined = undefined>(layout: L, data: LayoutToType<L>, encoded?: E, offset?: number): E extends undefined ? Uint8Array : number;
export declare function serializeNum(val: NumType, size: number, cursor: Cursor, endianness?: Endianness, signed?: boolean): void;
export declare function getCachedSerializedFrom(item: LayoutItemBase<"bytes"> & {
    layout: Layout;
    custom: FixedConversion<LayoutObject, any>;
}): Uint8Array;
export {};
//# sourceMappingURL=serialize.d.ts.map