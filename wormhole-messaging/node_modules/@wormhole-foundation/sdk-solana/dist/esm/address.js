import { UniversalAddress, encoding, registerNative, } from '@wormhole-foundation/sdk-connect';
import { PublicKey } from '@solana/web3.js';
import { _platform } from './types.js';
export const SolanaZeroAddress = '11111111111111111111111111111111';
export class SolanaAddress {
    static byteSize = 32;
    static platform = _platform;
    type = 'Native';
    address;
    constructor(address) {
        if (SolanaAddress.instanceof(address)) {
            this.address = address.address;
        }
        else if (UniversalAddress.instanceof(address)) {
            this.address = new PublicKey(address.toUint8Array());
        }
        else if (typeof address === 'string' && encoding.hex.valid(address)) {
            this.address = new PublicKey(encoding.hex.decode(address));
        }
        else {
            this.address = new PublicKey(address);
        }
    }
    unwrap() {
        return this.address;
    }
    toString() {
        return this.address.toBase58();
    }
    toUint8Array() {
        return new Uint8Array(this.address.toBytes());
    }
    toNative() {
        return this;
    }
    toUniversalAddress() {
        return new UniversalAddress(this.toUint8Array());
    }
    static instanceof(address) {
        return address.constructor.platform === SolanaAddress.platform;
    }
    equals(other) {
        if (SolanaAddress.instanceof(other)) {
            return other.unwrap().equals(this.unwrap());
        }
        else {
            return this.toUniversalAddress().equals(other);
        }
    }
}
registerNative(_platform, SolanaAddress);
//# sourceMappingURL=address.js.map