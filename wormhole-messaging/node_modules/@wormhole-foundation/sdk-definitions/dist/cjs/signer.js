"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNativeSigner = exports.PlatformNativeSigner = exports.isSignAndSendSigner = exports.isSignOnlySigner = exports.isSigner = void 0;
function isSigner(thing) {
    return isSignOnlySigner(thing) || isSignAndSendSigner(thing);
}
exports.isSigner = isSigner;
function isSignOnlySigner(thing) {
    return (typeof thing === "object" &&
        "chain" in thing &&
        typeof thing.chain === "function" &&
        "address" in thing &&
        typeof thing.address === "function" &&
        "sign" in thing &&
        typeof thing.sign === "function");
}
exports.isSignOnlySigner = isSignOnlySigner;
function isSignAndSendSigner(thing) {
    return (typeof thing === "object" &&
        "chain" in thing &&
        typeof thing.chain === "function" &&
        "address" in thing &&
        typeof thing.address === "function" &&
        "signAndSend" in thing &&
        typeof thing.signAndSend === "function");
}
exports.isSignAndSendSigner = isSignAndSendSigner;
/**
 * A PlatformNativeSigner should allow wrapping and unwrapping of a platform specific Signer
 * so that the underlying native signer may be used by unwrapping it where needed
 *
 */
class PlatformNativeSigner {
    _chain;
    _address;
    _signer;
    constructor(_chain, _address, _signer) {
        this._chain = _chain;
        this._address = _address;
        this._signer = _signer;
    }
    unwrap() {
        return this._signer;
    }
}
exports.PlatformNativeSigner = PlatformNativeSigner;
function isNativeSigner(thing) {
    return isSigner(thing) && "unwrap" in thing && typeof thing.unwrap === "function";
}
exports.isNativeSigner = isNativeSigner;
//# sourceMappingURL=signer.js.map