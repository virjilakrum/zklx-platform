"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = exports.getProtocolInitializer = exports.protocolIsRegistered = exports.registerProtocol = exports.isVersionedProtocolInitializer = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
function isVersionedProtocolInitializer(ctr) {
    return "getVersion" in ctr;
}
exports.isVersionedProtocolInitializer = isVersionedProtocolInitializer;
// Runtime registry of protocol implementations from which we can initialize the
// protocol client
const protocolFactory = {};
/** registerProtocol sets the Platform specific implementation of a given Protocol interface  */
function registerProtocol(platform, protocol, ctr) {
    if (!(protocol in protocolFactory))
        protocolFactory[protocol] = {};
    const platforms = protocolFactory[protocol];
    if (platform in platforms)
        throw new Error(`Protocol ${platform} for protocol ${protocol} has already registered`);
    protocolFactory[protocol][platform] = ctr;
}
exports.registerProtocol = registerProtocol;
function protocolIsRegistered(chainOrPlatform, protocol) {
    const platform = (0, sdk_base_1.isChain)(chainOrPlatform)
        ? sdk_base_1.chainToPlatform.get(chainOrPlatform)
        : chainOrPlatform;
    if (!(protocol in protocolFactory))
        return false;
    return platform in protocolFactory[protocol];
}
exports.protocolIsRegistered = protocolIsRegistered;
function getProtocolInitializer(platform, protocol) {
    if (protocol in protocolFactory) {
        const platforms = protocolFactory[protocol];
        if (platforms && platform in platforms) {
            const pctr = platforms[platform];
            if (pctr)
                return pctr;
        }
    }
    throw new Error(`No protocols registered for ${platform}:${protocol}. ` +
        `This may be because the platform specific protocol implementation is not registered (by installing and importing it)` +
        ` or no implementation exists for this platform`);
}
exports.getProtocolInitializer = getProtocolInitializer;
const create = (platform, protocol, rpc, config) => {
    const pctr = getProtocolInitializer(platform, protocol);
    return pctr.fromRpc(rpc, config);
};
exports.create = create;
//# sourceMappingURL=protocol.js.map