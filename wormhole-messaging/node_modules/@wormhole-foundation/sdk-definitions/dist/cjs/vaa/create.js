"use strict";
//For whatever reason if we put this in the same file as the other functions, tsc runs out of
//  memory. For some extra lulz, try turning createVAA into an arrow function (spoiler: also
//  causes out of memory fireworks)
Object.defineProperty(exports, "__esModule", { value: true });
exports.createVAA = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const utils_js_1 = require("../utils.js");
const vaa_js_1 = require("./vaa.js");
const functions_js_1 = require("./functions.js");
function bodyLayout(payloadLiteral) {
    return [...vaa_js_1.envelopeLayout, (0, functions_js_1.payloadLiteralToPayloadItemLayout)(payloadLiteral)];
}
/**
 * Create a VAA from a payload literal and a set of dynamic properties.
 * @param payloadLiteral The payload literal to create a VAA for.
 * @param vaaData The dynamic properties to include in the VAA.
 * @returns A VAA with the given payload literal and dynamic properties.
 * @throws If the dynamic properties do not match the payload literal.
 */
function createVAA(payloadLiteral, vaaData) {
    const [protocolName, payloadName] = (0, vaa_js_1.decomposeLiteral)(payloadLiteral);
    const bodyWithFixed = (0, sdk_base_1.addFixedValues)(bodyLayout(payloadLiteral), vaaData);
    return {
        protocolName,
        payloadName,
        payloadLiteral,
        ...(0, sdk_base_1.addFixedValues)(vaa_js_1.headerLayout, vaaData),
        ...bodyWithFixed,
        hash: (0, utils_js_1.keccak256)((0, sdk_base_1.serializeLayout)(bodyLayout(payloadLiteral), bodyWithFixed)),
    };
}
exports.createVAA = createVAA;
//# sourceMappingURL=create.js.map