import type { Chain } from "@wormhole-foundation/sdk-base";
import type { PayloadLiteral, VAA } from "../../index.js";
import type { UniversalAddress } from "../../universalAddress.js";
interface Guardian {
    index: number;
    key: string;
}
export declare class MockGuardians {
    setIndex: number;
    signers: Guardian[];
    constructor(setIndex: number, keys: string[]);
    getPublicKeys(): Uint8Array[];
    addSignatures<P extends PayloadLiteral>(message: Uint8Array | VAA<P>, guardianIndices?: number[]): VAA<"Uint8Array"> | VAA<P>;
    setSignatures<P extends PayloadLiteral>(message: Uint8Array | VAA<P>): VAA<"Uint8Array"> | VAA<"Uint8Array" | P>;
}
export declare class MockEmitter {
    chain: Chain;
    address: UniversalAddress;
    sequence: bigint;
    constructor(emitterAddress: UniversalAddress, chain: Chain, startSequence?: bigint);
    publishMessage(nonce: number, payload: Uint8Array, consistencyLevel: number, timestamp?: number, uptickSequence?: boolean): Uint8Array;
}
export declare const devnetGuardianSet: () => MockGuardians;
export {};
//# sourceMappingURL=guardian.d.ts.map