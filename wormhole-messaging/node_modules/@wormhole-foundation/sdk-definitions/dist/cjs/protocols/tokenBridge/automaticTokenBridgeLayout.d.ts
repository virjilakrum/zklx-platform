import type { RegisterPayloadTypes } from "./../../vaa/index.js";
export declare const connectPayload: readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "targetRelayerFee";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "toNativeTokenAmount";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "targetRecipient";
}];
export declare const automaticTokenBridgeNamedPayloads: readonly [readonly ["TransferWithRelay", readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 3;
    readonly omit: true;
}, {
    readonly name: "token";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly custom: {
            to: (val: number) => "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Linea" | "Berachain" | "Seievm" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Provenance" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia";
            from: (val: "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Linea" | "Berachain" | "Seievm" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Provenance" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia") => number;
        };
        readonly binary: "uint";
        readonly size: 2;
        readonly name: "chain";
    }];
}, {
    readonly name: "to";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly custom: {
            to: (val: number) => "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Linea" | "Berachain" | "Seievm" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Provenance" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia";
            from: (val: "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Linea" | "Berachain" | "Seievm" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Provenance" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia") => number;
        };
        readonly binary: "uint";
        readonly size: 2;
        readonly name: "chain";
    }];
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "from";
}, import("@wormhole-foundation/sdk-base/dist/cjs").CustomizableBytesReturn<{
    readonly name: "payload";
}, readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "targetRelayerFee";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "toNativeTokenAmount";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "targetRecipient";
}]>]]];
import "../../registry.js";
declare module "../../registry.js" {
    namespace WormholeRegistry {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"AutomaticTokenBridge", typeof automaticTokenBridgeNamedPayloads> {
        }
    }
}
//# sourceMappingURL=automaticTokenBridgeLayout.d.ts.map