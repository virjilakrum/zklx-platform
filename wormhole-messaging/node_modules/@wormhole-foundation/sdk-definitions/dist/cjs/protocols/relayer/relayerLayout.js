"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deliveryInstructionLayout = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const index_js_1 = require("./../../layout-items/index.js");
const index_js_2 = require("./../../vaa/index.js");
const encodedExecutionInfoItem = {
    binary: "bytes",
    layout: [
        { name: "size", binary: "uint", size: 4, custom: 3 * 32, omit: true },
        { name: "waste", binary: "uint", size: 31, custom: 0n, omit: true },
        { name: "version", binary: "uint", size: 1, custom: 0, omit: true },
        { name: "gasLimit", ...index_js_1.amountItem },
        { name: "targetChainRefundPerGasUnused", ...index_js_1.amountItem },
    ],
};
const addressChainItem = {
    binary: "bytes",
    layout: [
        { name: "chain", ...(0, index_js_1.chainItem)() },
        { name: "address", ...index_js_1.universalAddressItem },
    ],
};
const vaaKeyLayout = [
    { name: "chain", ...(0, index_js_1.chainItem)() },
    { name: "emitterAddress", ...index_js_1.universalAddressItem },
    { name: "sequence", ...index_js_1.sequenceItem },
];
const cctpKeyLayout = [
    { name: "size", binary: "uint", size: 4, custom: 12, omit: true },
    { name: "domain", ...index_js_1.circleDomainItem },
    { name: "nonce", ...index_js_1.circleNonceItem },
];
const messageKeySwitchLayout = {
    binary: "switch",
    idSize: 1,
    idTag: "keyType",
    layouts: [
        [[1, "VAA"], vaaKeyLayout],
        [[2, "CCTP"], cctpKeyLayout],
    ],
};
const deliveryInstructionLayout = (customPayload) => [
    (0, index_js_1.payloadIdItem)(1),
    { name: "target", ...addressChainItem },
    (0, sdk_base_1.customizableBytes)({ name: "payload", lengthSize: 4 }, customPayload),
    { name: "requestedReceiverValue", ...index_js_1.amountItem },
    { name: "extraReceiverValue", ...index_js_1.amountItem },
    { name: "executionInfo", ...encodedExecutionInfoItem },
    { name: "refund", ...addressChainItem },
    { name: "refundDeliveryProvider", ...index_js_1.universalAddressItem },
    { name: "sourceDeliveryProvider", ...index_js_1.universalAddressItem },
    { name: "senderAddress", ...index_js_1.universalAddressItem },
    { name: "messageKeys", binary: "array", lengthSize: 1, layout: messageKeySwitchLayout },
];
exports.deliveryInstructionLayout = deliveryInstructionLayout;
const namedPayloads = [
    ["DeliveryInstruction", (0, exports.deliveryInstructionLayout)()],
    [
        "RedeliveryInstruction",
        [
            (0, index_js_1.payloadIdItem)(2),
            { name: "deliveryVaaKey", binary: "bytes", layout: messageKeySwitchLayout },
            { name: "targetChain", ...(0, index_js_1.chainItem)() },
            { name: "newRequestedReceiverValue", ...index_js_1.amountItem },
            { name: "newEncodedExecutionInfo", ...encodedExecutionInfoItem },
            { name: "newSourceDeliveryProvider", ...index_js_1.universalAddressItem },
            { name: "newSenderAddress", ...index_js_1.universalAddressItem },
        ],
    ],
];
// factory registration:
require("../../registry.js");
(0, index_js_2.registerPayloadTypes)("Relayer", namedPayloads);
//# sourceMappingURL=relayerLayout.js.map