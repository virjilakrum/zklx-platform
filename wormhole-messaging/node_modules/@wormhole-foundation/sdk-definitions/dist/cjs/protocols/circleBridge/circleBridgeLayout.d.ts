import "./automaticCircleBridgeLayout.js";
import type { RegisterPayloadTypes } from "./../../vaa/index.js";
export declare const circleMessageLayout: readonly [{
    readonly binary: "uint";
    readonly size: 4;
    readonly custom: 0;
    readonly omit: true;
    readonly name: "version";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "destinationDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "sender";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipient";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "destinationCaller";
}, {
    readonly name: "payload";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "uint";
        readonly size: 4;
        readonly custom: 0;
        readonly omit: true;
        readonly name: "messageBodyVersion";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "burnToken";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "mintRecipient";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "messageSender";
    }];
}];
export declare const circleBridgeNamedPayloads: readonly [readonly ["Message", readonly [{
    readonly binary: "uint";
    readonly size: 4;
    readonly custom: 0;
    readonly omit: true;
    readonly name: "version";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "destinationDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "sender";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipient";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "destinationCaller";
}, {
    readonly name: "payload";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "uint";
        readonly size: 4;
        readonly custom: 0;
        readonly omit: true;
        readonly name: "messageBodyVersion";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "burnToken";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "mintRecipient";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }, {
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "messageSender";
    }];
}]]];
import "../../registry.js";
declare module "../../registry.js" {
    namespace WormholeRegistry {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"CircleBridge", typeof circleBridgeNamedPayloads> {
        }
    }
}
//# sourceMappingURL=circleBridgeLayout.d.ts.map