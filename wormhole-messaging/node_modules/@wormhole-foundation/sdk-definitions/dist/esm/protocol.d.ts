import type { Chain, Network, Platform, PlatformToChains } from "@wormhole-foundation/sdk-base";
import type { Contracts } from "./contracts.js";
import type { WormholeRegistry } from "./registry.js";
import type { RpcConnection } from "./rpc.js";
import type { ChainsConfig } from "./types.js";
/**
 *  A string type representing the name of a protocol
 *  derived from the keys of the protocol registry map
 */
export type ProtocolName = keyof WormholeRegistry.ProtocolToInterfaceMapping;
/**
 * The interface corresponding to the protocol passed in generic parameters
 */
export type ProtocolInterface<PN extends ProtocolName, N extends Network, C extends Chain> = WormholeRegistry.ProtocolToInterfaceMapping<N, C>[PN];
export type EmptyPlatformMap<PN extends ProtocolName> = {
    [P in Platform]?: ProtocolInitializer<P, PN, Network, PlatformToChains<P>>;
};
/** The platform specific implementation from the registry
 *  returns the ProtocolInitializer for constructing an instance
 *  of the Platform implementation
 */
export type ProtocolImplementation<P extends Platform, PN extends ProtocolName> = PN extends ProtocolName ? P extends keyof WormholeRegistry.ProtocolToPlatformMapping[PN] ? NonNullable<WormholeRegistry.ProtocolToPlatformMapping[PN][P]> : never : never;
/** The ProtocolInitializer provides a constructor or a static `fromRpc` method
 * to create an instance of the ProtocolInterface for a given network and chain
 */
export interface ProtocolInitializer<P extends Platform, PN extends ProtocolName, N extends Network, C extends PlatformToChains<P> = PlatformToChains<P>> {
    new (network: N, chain: C, connection: RpcConnection<P>, contracts: Contracts, version?: string): ProtocolInterface<PN, N, C>;
    /** fromRpc will create a new instance of the Protocol client given the RPC and the config
     * @param rpc - the RPC connection to the chain, used to query the chain for its native chain id
     * @param config - the ChainsConfig to use to initialize the protocol client
     */
    fromRpc(rpc: RpcConnection<P>, config: ChainsConfig<Network, P>): Promise<ProtocolInterface<PN, N, C>>;
}
export interface VersionedProtocolInitializer<P extends Platform, PN extends ProtocolName, N extends Network> extends ProtocolInitializer<P, PN, N> {
    getVersion(rpc: RpcConnection<P>, Contracts: Contracts): Promise<string>;
}
export declare function isVersionedProtocolInitializer(ctr: ProtocolInitializer<Platform, ProtocolName, Network>): ctr is VersionedProtocolInitializer<Platform, ProtocolName, Network>;
export type ProtocolInstance<P extends Platform, PN extends ProtocolName, N extends Network, C extends PlatformToChains<P> = PlatformToChains<P>> = InstanceType<ProtocolInitializer<P, PN, N, C>>;
/** registerProtocol sets the Platform specific implementation of a given Protocol interface  */
export declare function registerProtocol<P extends Platform, PN extends ProtocolName, PI extends ProtocolInitializer<P, PN, Network, PlatformToChains<P>> = ProtocolInitializer<P, PN, Network, PlatformToChains<P>>>(platform: P, protocol: PN, ctr: PI): void;
export declare function protocolIsRegistered<T extends Platform | Chain, PN extends ProtocolName>(chainOrPlatform: T, protocol: PN): boolean;
export declare function getProtocolInitializer<P extends Platform, PN extends ProtocolName>(platform: P, protocol: PN): ProtocolInitializer<P, PN, Network, PlatformToChains<P>>;
export declare const create: <N extends "Mainnet" | "Testnet" | "Devnet", P extends "Solana" | "Algorand" | "Near" | "Sui" | "Aptos" | "Btc" | "Evm" | "Cosmwasm", PN extends keyof WormholeRegistry.ProtocolToInterfaceMapping<"Mainnet" | "Testnet" | "Devnet", "Solana" | "Ethereum" | "Terra" | "Bsc" | "Polygon" | "Avalanche" | "Oasis" | "Algorand" | "Aurora" | "Fantom" | "Karura" | "Acala" | "Klaytn" | "Celo" | "Near" | "Moonbeam" | "Neon" | "Terra2" | "Injective" | "Osmosis" | "Sui" | "Aptos" | "Arbitrum" | "Optimism" | "Gnosis" | "Pythnet" | "Xpla" | "Btc" | "Base" | "Sei" | "Rootstock" | "Scroll" | "Mantle" | "Blast" | "Xlayer" | "Linea" | "Berachain" | "Seievm" | "Wormchain" | "Cosmoshub" | "Evmos" | "Kujira" | "Neutron" | "Celestia" | "Stargaze" | "Seda" | "Dymension" | "Provenance" | "Sepolia" | "ArbitrumSepolia" | "BaseSepolia" | "OptimismSepolia" | "Holesky" | "PolygonSepolia">>(platform: P, protocol: PN, rpc: RpcConnection<P>, config: ChainsConfig<N, P>) => Promise<ProtocolInterface<PN, "Mainnet" | "Testnet" | "Devnet", PlatformToChains<P>>>;
//# sourceMappingURL=protocol.d.ts.map