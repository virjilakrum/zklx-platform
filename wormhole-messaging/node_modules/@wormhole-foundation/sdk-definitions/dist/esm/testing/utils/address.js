import { chainToPlatform, encoding, isPlatform, platformToChains, } from "@wormhole-foundation/sdk-base";
import { UniversalAddress, toNative } from "./../../index.js";
// return a random buffer of length n
function randomBytes(n) {
    const buff = new Uint8Array(n);
    for (let i = 0; i < n; i++)
        buff[i] = Math.floor(Math.random() * 256);
    return buff;
}
// get a random 20 byte address
function fake20ByteAddress() {
    const buff = randomBytes(20);
    return encoding.hex.encode(buff);
}
// get a random 32 byte address
function fake32ByteAddress() {
    const buff = randomBytes(32);
    return encoding.hex.encode(buff);
}
// make a random native address for a given chain
export function makeNativeAddressHexString(chain) {
    switch (chainToPlatform(chain)) {
        case "Evm":
            return fake20ByteAddress();
        case "Cosmwasm":
            return fake20ByteAddress();
        default:
            return fake32ByteAddress();
    }
}
// make a random ChainAddress for a given chain
export function makeChainAddress(chain) {
    const address = makeUniversalAddress(chain);
    return { chain, address: address.toNative(chain) };
}
// make a random ChainAddress for a given chain
export function makeUniversalChainAddress(chain) {
    const address = makeUniversalAddress(chain);
    return { chain, address };
}
export function makeUniversalAddress(chain) {
    const nativeAddress = makeNativeAddressHexString(chain);
    return new UniversalAddress("0x" + nativeAddress.padStart(64, "0"));
}
// make a random NativeAddress for a given chain
export function makeNativeAddress(chain) {
    let cn;
    if (isPlatform(chain)) {
        // just grab the first one
        cn = platformToChains(chain)[0];
    }
    else {
        cn = chain;
    }
    return toNative(cn, makeNativeAddressHexString(cn));
}
//# sourceMappingURL=address.js.map