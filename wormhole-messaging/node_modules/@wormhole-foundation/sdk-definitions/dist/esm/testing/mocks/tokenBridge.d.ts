import type { Network, Platform, PlatformToChains } from "@wormhole-foundation/sdk-base";
import type { ChainAddress, NativeAddress, RpcConnection, TokenAddress, TokenBridge, UniversalAddress, UnsignedTransaction } from "./../../index.js";
export declare class MockTokenBridge<N extends Network, P extends Platform, C extends PlatformToChains<P>> implements TokenBridge<N, C> {
    readonly rpc: RpcConnection<P>;
    constructor(rpc: RpcConnection<P>);
    isWrappedAsset(token: TokenAddress<C>): Promise<boolean>;
    getOriginalAsset(token: TokenAddress<C>): Promise<ChainAddress>;
    getTokenUniversalAddress(nativeAddress: TokenAddress<C>): Promise<UniversalAddress>;
    hasWrappedAsset(original: ChainAddress): Promise<boolean>;
    getWrappedAsset(original: ChainAddress): Promise<NativeAddress<C>>;
    isTransferCompleted(vaa: TokenBridge.TransferVAA): Promise<boolean>;
    createAttestation(address: TokenAddress<C>): AsyncGenerator<UnsignedTransaction<N, C>>;
    submitAttestation(vaa: TokenBridge.AttestVAA): AsyncGenerator<UnsignedTransaction<N, C>>;
    transfer(sender: TokenAddress<C>, recipient: ChainAddress, token: TokenAddress<C>, amount: bigint, payload?: Uint8Array | undefined): AsyncGenerator<UnsignedTransaction<N, C>>;
    redeem(sender: TokenAddress<C>, vaa: TokenBridge.TransferVAA, unwrapNative?: boolean | undefined): AsyncGenerator<UnsignedTransaction<N, C>>;
    getWrappedNative(): Promise<NativeAddress<C>>;
}
//# sourceMappingURL=tokenBridge.d.ts.map