import type { Network, Platform, PlatformToChains } from "@wormhole-foundation/sdk-base";
import type { ChainContext, ChainsConfig, PlatformUtils, ProtocolName, RpcConnection, TokenAddress, TokenId } from "./../../index.js";
import { PlatformContext } from "./../../index.js";
export declare function mockPlatformFactory<N extends Network, P extends Platform>(platform: P, config: ChainsConfig<N, P>): PlatformUtils<P>;
export declare class MockPlatform<N extends Network, P extends Platform> extends PlatformContext<N, P> {
    constructor(network: N, config: ChainsConfig<N, P>);
    static getProtocol<PN extends ProtocolName, T extends any>(protocol: PN): T;
    getChain<C extends PlatformToChains<P>>(chain: C): ChainContext<N, C>;
    getRpc<C extends PlatformToChains<P>>(chain: C): RpcConnection<P>;
    getWrappedAsset<C extends PlatformToChains<P>>(chain: C, rpc: RpcConnection<P>, token: TokenId<C>): Promise<TokenId<C> | null>;
    getTokenDecimals(rpc: RpcConnection<P>, token: TokenId<PlatformToChains<P>>): Promise<bigint>;
    getNativeBalance(rpc: RpcConnection<P>, walletAddr: string): Promise<bigint>;
    getDecimals<C extends PlatformToChains<P>>(chain: C, rpc: RpcConnection<P>, token: TokenAddress<C>): Promise<number>;
}
//# sourceMappingURL=platform.d.ts.map