import type { PlatformAddressFormat } from "@wormhole-foundation/sdk-base";
import type { Address, NativeAddress } from "./address.js";
import { toNative } from "./address.js";
/**
 * The UniversalAddress represents an address that has been parsed into its
 * byte representation and possibly modified to ensure it is exactly 32 bytes long
 */
export declare class UniversalAddress implements Address {
    static readonly byteSize = 32;
    static readonly type: string;
    readonly address: Uint8Array;
    constructor(address: string | Uint8Array, format?: PlatformAddressFormat);
    toNative<T extends Parameters<typeof toNative>[0]>(chainOrPlatform: T): NativeAddress<T>;
    unwrap(): Uint8Array;
    toString(): string;
    toUint8Array(): Uint8Array;
    toUniversalAddress(): this;
    equals(other: UniversalAddress): boolean;
    static isValidAddress(address: string, format?: PlatformAddressFormat): boolean;
    static instanceof(address: any): address is UniversalAddress;
    private static stringToUint8Array;
}
//# sourceMappingURL=universalAddress.d.ts.map