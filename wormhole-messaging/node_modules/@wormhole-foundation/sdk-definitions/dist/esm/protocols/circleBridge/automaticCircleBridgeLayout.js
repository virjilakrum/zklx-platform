import { layout } from "@wormhole-foundation/sdk-base";
import { payloadIdItem, universalAddressItem, amountItem, circleDomainItem, circleNonceItem, } from "./../../layout-items/index.js";
import { registerPayloadTypes } from "./../../vaa/index.js";
//from here: https://github.com/wormhole-foundation/wormhole-circle-integration/blob/105ad59bad687416527003e0241dee4020889341/evm/src/circle_integration/CircleIntegrationMessages.sol#L25
export const depositWithPayloadLayout = (customPayload) => [
    payloadIdItem(1),
    {
        name: "token",
        binary: "bytes",
        layout: [
            { name: "address", ...universalAddressItem },
            { name: "amount", ...amountItem },
        ],
    },
    { name: "sourceDomain", ...circleDomainItem },
    { name: "targetDomain", ...circleDomainItem },
    { name: "nonce", ...circleNonceItem },
    { name: "caller", ...universalAddressItem },
    { name: "mintRecipient", ...universalAddressItem },
    layout.customizableBytes({ name: "payload", lengthSize: 2 }, customPayload),
];
//from here:
//  https://github.com/wormhole-foundation/example-circle-relayer/blob/189becd8d3935decb17383bd2e61b4909cbddc89/evm/src/circle-relayer/CircleRelayerMessages.sol#L16
export const circleConnectPayload = [
    payloadIdItem(1),
    { name: "targetRelayerFee", ...amountItem },
    { name: "toNativeTokenAmount", ...amountItem },
    { name: "targetRecipient", ...universalAddressItem },
];
export const automaticCircleBridgeNamedPayloads = [
    ["DepositWithPayload", depositWithPayloadLayout()],
    ["TransferWithRelay", depositWithPayloadLayout(circleConnectPayload)],
];
// factory registration:
import "../../registry.js";
registerPayloadTypes("AutomaticCircleBridge", automaticCircleBridgeNamedPayloads);
//# sourceMappingURL=automaticCircleBridgeLayout.js.map