import { deserializeLayout, encoding, lazyInstantiate, serializeLayout, } from "@wormhole-foundation/sdk-base";
import "./automaticCircleBridgeLayout.js";
import { circleMessageLayout } from "./circleBridgeLayout.js";
import { keccak256 } from "../../utils.js";
import { payloadDiscriminator } from "./../../vaa/index.js";
import "../../registry.js";
export var CircleBridge;
(function (CircleBridge) {
    const _protocol = "CircleBridge";
    const _payloads = ["Message"];
    CircleBridge.isCircleAttestation = (thing) => {
        return thing.message !== undefined;
    };
    CircleBridge.deserialize = (data) => {
        const msg = deserializeLayout(circleMessageLayout, data);
        const messsageHash = encoding.hex.encode(keccak256(data), true);
        return [msg, messsageHash];
    };
    CircleBridge.serialize = (msg) => {
        return serializeLayout(circleMessageLayout, msg);
    };
})(CircleBridge || (CircleBridge = {}));
export var AutomaticCircleBridge;
(function (AutomaticCircleBridge) {
    const _protocol = "AutomaticCircleBridge";
    const _payloads = ["DepositWithPayload", "TransferWithRelay"];
    AutomaticCircleBridge.getTransferDiscriminator = lazyInstantiate(() => payloadDiscriminator([_protocol, _payloads]));
})(AutomaticCircleBridge || (AutomaticCircleBridge = {}));
export function isCircleTransferDetails(thing) {
    return (thing.amount !== undefined &&
        thing.from !== undefined &&
        thing.to !== undefined);
}
//# sourceMappingURL=circleBridge.js.map