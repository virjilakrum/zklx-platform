import type { CustomizableBytes } from "@wormhole-foundation/sdk-base";
import { layout } from "@wormhole-foundation/sdk-base";
import type { RegisterPayloadTypes } from "./../../vaa/index.js";
export declare const depositWithPayloadLayout: <const P extends CustomizableBytes = undefined>(customPayload?: P) => readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "token";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }];
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "targetDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "caller";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "mintRecipient";
}, layout.CustomizableBytesReturn<{
    readonly name: "payload";
    readonly lengthSize: 2;
}, P>];
export declare const circleConnectPayload: readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "targetRelayerFee";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "toNativeTokenAmount";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "targetRecipient";
}];
export declare const automaticCircleBridgeNamedPayloads: readonly [readonly ["DepositWithPayload", readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "token";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }];
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "targetDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "caller";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "mintRecipient";
}, layout.CustomizableBytesReturn<{
    readonly name: "payload";
    readonly lengthSize: 2;
}, undefined>]], readonly ["TransferWithRelay", readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly name: "token";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly binary: "bytes";
        readonly size: 32;
        readonly custom: {
            to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
            from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
        };
        readonly name: "address";
    }, {
        readonly binary: "uint";
        readonly size: 32;
        readonly name: "amount";
    }];
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "sourceDomain";
}, {
    readonly binary: "uint";
    readonly size: 4;
    readonly name: "targetDomain";
}, {
    readonly binary: "uint";
    readonly size: 8;
    readonly name: "nonce";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "caller";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "mintRecipient";
}, layout.CustomizableBytesReturn<{
    readonly name: "payload";
    readonly lengthSize: 2;
}, readonly [{
    readonly name: "payloadId";
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: 1;
    readonly omit: true;
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "targetRelayerFee";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "toNativeTokenAmount";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "targetRecipient";
}]>]]];
import "../../registry.js";
declare module "../../registry.js" {
    namespace WormholeRegistry {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"AutomaticCircleBridge", typeof automaticCircleBridgeNamedPayloads> {
        }
    }
}
//# sourceMappingURL=automaticCircleBridgeLayout.d.ts.map