import type { RegisterPayloadTypes } from "./../../vaa/index.js";
export declare const porticoFlagSetLayout: readonly [{
    readonly name: "recipientChain";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 2;
}, {
    readonly name: "bridgeNonce";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 4;
}, {
    readonly name: "feeTierStart";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 3;
}, {
    readonly name: "feeTierFinish";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 3;
}, {
    readonly name: "padding";
    readonly binary: "bytes";
    readonly size: 19;
}, {
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: {
        to: (encoded: number) => import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>;
        from: (obj: import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>) => number;
    };
    readonly name: "flags";
}];
export declare const porticoTransferLayout: readonly [{
    readonly name: "flagSet";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly name: "recipientChain";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 2;
    }, {
        readonly name: "bridgeNonce";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 4;
    }, {
        readonly name: "feeTierStart";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 3;
    }, {
        readonly name: "feeTierFinish";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 3;
    }, {
        readonly name: "padding";
        readonly binary: "bytes";
        readonly size: 19;
    }, {
        readonly binary: "uint";
        readonly size: 1;
        readonly custom: {
            to: (encoded: number) => import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>;
            from: (obj: import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>) => number;
        };
        readonly name: "flags";
    }];
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "startTokenAddress";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "cannonAssetAmount";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "finalTokenAddress";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipientAddress";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "destinationPorticoAddress";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "amountSpecified";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "minAmountStart";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "minAmountFinish";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "relayerFee";
}];
export declare const porticoPayloadLayout: readonly [{
    readonly name: "flagSet";
    readonly binary: "bytes";
    readonly layout: readonly [{
        readonly name: "recipientChain";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 2;
    }, {
        readonly name: "bridgeNonce";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 4;
    }, {
        readonly name: "feeTierStart";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 3;
    }, {
        readonly name: "feeTierFinish";
        readonly binary: "uint";
        readonly endianness: "little";
        readonly size: 3;
    }, {
        readonly name: "padding";
        readonly binary: "bytes";
        readonly size: 19;
    }, {
        readonly binary: "uint";
        readonly size: 1;
        readonly custom: {
            to: (encoded: number) => import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>;
            from: (obj: import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>) => number;
        };
        readonly name: "flags";
    }];
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "finalTokenAddress";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("../../universalAddress.js").UniversalAddress;
        from: (val: import("../../universalAddress.js").UniversalAddress) => Uint8Array;
    };
    readonly name: "recipientAddress";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "cannonAssetAmount";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "minAmountFinish";
}, {
    readonly binary: "uint";
    readonly size: 32;
    readonly name: "relayerFee";
}];
export declare const namedPayloads: readonly [readonly ["Transfer", readonly [{
    readonly name: "recipientChain";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 2;
}, {
    readonly name: "bridgeNonce";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 4;
}, {
    readonly name: "feeTierStart";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 3;
}, {
    readonly name: "feeTierFinish";
    readonly binary: "uint";
    readonly endianness: "little";
    readonly size: 3;
}, {
    readonly name: "padding";
    readonly binary: "bytes";
    readonly size: 19;
}, {
    readonly binary: "uint";
    readonly size: 1;
    readonly custom: {
        to: (encoded: number) => import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>;
        from: (obj: import("@wormhole-foundation/sdk-base").Bitset<readonly ["shouldWrapNative", "shouldUnwrapNative"]>) => number;
    };
    readonly name: "flags";
}]]];
import "../../registry.js";
declare module "../../registry.js" {
    namespace WormholeRegistry {
        interface PayloadLiteralToLayoutMapping extends RegisterPayloadTypes<"PorticoBridge", typeof namedPayloads> {
        }
    }
}
//# sourceMappingURL=porticoLayout.d.ts.map