import { serializeLayout, deserializeLayout } from "@wormhole-foundation/sdk-base";
import { signatureItem } from "./layout-items/index.js";
import { secp256k1 } from "./utils.js";
/** Signature represents the secp256k1 signature of a Guardian */
export class Signature {
    r;
    s;
    v;
    constructor(r, s, v) {
        this.r = r;
        this.s = s;
        this.v = v;
    }
    encode() {
        return serializeLayout(signatureItem, this);
    }
    static decode(data) {
        return deserializeLayout(signatureItem, data);
    }
}
export var SignatureUtils;
(function (SignatureUtils) {
    function toPubkey(privateKey) {
        return secp256k1.getPublicKey(privateKey);
    }
    SignatureUtils.toPubkey = toPubkey;
    function sign(privateKey, hash) {
        if (hash.length != 32)
            throw new Error("hash.length != 32");
        return secp256k1.sign(hash, privateKey);
    }
    SignatureUtils.sign = sign;
    function validate(signature, publicKey, hash) {
        const { r, s } = signature;
        return secp256k1.verify({ r, s }, hash, publicKey);
    }
    SignatureUtils.validate = validate;
    function recover(signature, hash) {
        const { r, s, v } = signature;
        const sig = new secp256k1.Signature(r, s);
        // @ts-ignore -- recovery field is marked readonly
        sig.recovery = v;
        const pubkey = sig.recoverPublicKey(hash);
        return pubkey.toRawBytes();
    }
    SignatureUtils.recover = recover;
})(SignatureUtils || (SignatureUtils = {}));
//# sourceMappingURL=signature.js.map