import { chainToPlatform, isChain } from "@wormhole-foundation/sdk-base";
export function isVersionedProtocolInitializer(ctr) {
    return "getVersion" in ctr;
}
// Runtime registry of protocol implementations from which we can initialize the
// protocol client
const protocolFactory = {};
/** registerProtocol sets the Platform specific implementation of a given Protocol interface  */
export function registerProtocol(platform, protocol, ctr) {
    if (!(protocol in protocolFactory))
        protocolFactory[protocol] = {};
    const platforms = protocolFactory[protocol];
    if (platform in platforms)
        throw new Error(`Protocol ${platform} for protocol ${protocol} has already registered`);
    protocolFactory[protocol][platform] = ctr;
}
export function protocolIsRegistered(chainOrPlatform, protocol) {
    const platform = isChain(chainOrPlatform)
        ? chainToPlatform.get(chainOrPlatform)
        : chainOrPlatform;
    if (!(protocol in protocolFactory))
        return false;
    return platform in protocolFactory[protocol];
}
export function getProtocolInitializer(platform, protocol) {
    if (protocol in protocolFactory) {
        const platforms = protocolFactory[protocol];
        if (platforms && platform in platforms) {
            const pctr = platforms[platform];
            if (pctr)
                return pctr;
        }
    }
    throw new Error(`No protocols registered for ${platform}:${protocol}. ` +
        `This may be because the platform specific protocol implementation is not registered (by installing and importing it)` +
        ` or no implementation exists for this platform`);
}
export const create = (platform, protocol, rpc, config) => {
    const pctr = getProtocolInitializer(platform, protocol);
    return pctr.fromRpc(rpc, config);
};
//# sourceMappingURL=protocol.js.map