//For whatever reason if we put this in the same file as the other functions, tsc runs out of
//  memory. For some extra lulz, try turning createVAA into an arrow function (spoiler: also
//  causes out of memory fireworks)
import { addFixedValues, serializeLayout } from "@wormhole-foundation/sdk-base";
import { keccak256 } from "../utils.js";
import { decomposeLiteral, headerLayout, envelopeLayout } from "./vaa.js";
import { payloadLiteralToPayloadItemLayout } from "./functions.js";
function bodyLayout(payloadLiteral) {
    return [...envelopeLayout, payloadLiteralToPayloadItemLayout(payloadLiteral)];
}
/**
 * Create a VAA from a payload literal and a set of dynamic properties.
 * @param payloadLiteral The payload literal to create a VAA for.
 * @param vaaData The dynamic properties to include in the VAA.
 * @returns A VAA with the given payload literal and dynamic properties.
 * @throws If the dynamic properties do not match the payload literal.
 */
export function createVAA(payloadLiteral, vaaData) {
    const [protocolName, payloadName] = decomposeLiteral(payloadLiteral);
    const bodyWithFixed = addFixedValues(bodyLayout(payloadLiteral), vaaData);
    return {
        protocolName,
        payloadName,
        payloadLiteral,
        ...addFixedValues(headerLayout, vaaData),
        ...bodyWithFixed,
        hash: keccak256(serializeLayout(bodyLayout(payloadLiteral), bodyWithFixed)),
    };
}
//# sourceMappingURL=create.js.map