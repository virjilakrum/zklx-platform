"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_NETWORK = exports.applyChainsConfigConfigOverrides = exports.applyWormholeConfigOverrides = exports.networkPlatformConfigs = exports.CONFIG = exports.DEFAULT_TASK_TIMEOUT = void 0;
const sdk_base_1 = require("@wormhole-foundation/sdk-base");
const sdk_definitions_1 = require("@wormhole-foundation/sdk-definitions");
exports.DEFAULT_TASK_TIMEOUT = 60 * 1000; // 1 minute in milliseconds
exports.CONFIG = {
    Mainnet: {
        api: "https://api.wormholescan.io",
        circleAPI: sdk_base_1.circle.circleAPI("Mainnet"),
        chains: (0, sdk_definitions_1.buildConfig)("Mainnet"),
    },
    Testnet: {
        api: "https://api.testnet.wormholescan.io",
        circleAPI: sdk_base_1.circle.circleAPI("Testnet"),
        chains: (0, sdk_definitions_1.buildConfig)("Testnet"),
    },
    Devnet: {
        api: "http://guardian:7071", // Tilt Guardian REST api
        circleAPI: "",
        chains: (0, sdk_definitions_1.buildConfig)("Devnet"),
    },
};
function networkPlatformConfigs(network, platform) {
    return Object.fromEntries(Object.entries(exports.CONFIG[network].chains).filter(([_, c]) => {
        return c.platform == platform;
    }));
}
exports.networkPlatformConfigs = networkPlatformConfigs;
// Apply any overrides to the base config
function applyWormholeConfigOverrides(network, overrides) {
    let base = exports.CONFIG[network];
    if (!overrides)
        return base;
    return override(base, overrides);
}
exports.applyWormholeConfigOverrides = applyWormholeConfigOverrides;
// Apply any overrides to the base config
function applyChainsConfigConfigOverrides(network, platform, overrides) {
    const base = networkPlatformConfigs(network, platform);
    if (!overrides)
        return base;
    return override(base, overrides);
}
exports.applyChainsConfigConfigOverrides = applyChainsConfigConfigOverrides;
// recurse through the overrides and apply them to the base config
function override(base, overrides) {
    if (!base)
        base = {};
    for (const [key, value] of Object.entries(overrides)) {
        if (typeof value === "object" && !Array.isArray(value)) {
            base[key] = override(base[key], value);
        }
        else {
            base[key] = value;
        }
    }
    return base;
}
const inNode = typeof process !== "undefined";
exports.DEFAULT_NETWORK = (inNode && process.env["NETWORK"]) || "Testnet";
//# sourceMappingURL=config.js.map