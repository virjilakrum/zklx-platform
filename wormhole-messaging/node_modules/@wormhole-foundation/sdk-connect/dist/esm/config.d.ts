import type { Chain, Network, Platform } from "@wormhole-foundation/sdk-base";
import type { ChainConfig, ChainsConfig } from "@wormhole-foundation/sdk-definitions";
export declare const DEFAULT_TASK_TIMEOUT: number;
export type WormholeConfig<N extends Network = Network, P extends Platform = Platform> = {
    api: string;
    circleAPI: string;
    chains: ChainsConfig<N, P>;
};
export declare const CONFIG: {
    readonly Mainnet: {
        readonly api: "https://api.wormholescan.io";
        readonly circleAPI: "https://iris-api.circle.com/v1/attestations";
        readonly chains: ChainsConfig<"Mainnet", "Evm" | "Solana" | "Cosmwasm" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near">;
    };
    readonly Testnet: {
        readonly api: "https://api.testnet.wormholescan.io";
        readonly circleAPI: "https://iris-api-sandbox.circle.com/v1/attestations";
        readonly chains: ChainsConfig<"Testnet", "Evm" | "Solana" | "Cosmwasm" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near">;
    };
    readonly Devnet: {
        readonly api: "http://guardian:7071";
        readonly circleAPI: "";
        readonly chains: ChainsConfig<"Devnet", "Evm" | "Solana" | "Cosmwasm" | "Btc" | "Algorand" | "Sui" | "Aptos" | "Near">;
    };
};
export declare function networkPlatformConfigs<N extends Network, P extends Platform>(network: N, platform: P): ChainsConfig<N, P>;
type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends object | undefined ? RecursivePartial<T[P]> : T[P];
};
export type WormholeConfigOverrides<N extends Network> = RecursivePartial<WormholeConfig<N>>;
export type ChainsConfigOverrides<N extends Network, P extends Platform> = RecursivePartial<ChainsConfig<N, P>>;
export type ChainConfigOverrides<N extends Network, C extends Chain> = RecursivePartial<ChainConfig<N, C>>;
export declare function applyWormholeConfigOverrides<N extends Network>(network: N, overrides?: WormholeConfigOverrides<N>): WormholeConfig;
export declare function applyChainsConfigConfigOverrides<N extends Network, P extends Platform>(network: N, platform: P, overrides?: ChainsConfigOverrides<N, P>): ChainsConfig<N, P>;
export declare const DEFAULT_NETWORK: Network;
export {};
//# sourceMappingURL=config.d.ts.map