import type { LayoutToType } from '@wormhole-foundation/sdk-connect';
/** Binary layout for postMessage account */
export declare const postMessageLayout: readonly [{
    readonly name: "discriminator";
    readonly binary: "bytes";
    readonly size: 4;
}, {
    readonly name: "consistencyLevel";
    readonly binary: "uint";
    readonly size: 1;
    readonly endianness: "little";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("@wormhole-foundation/sdk-connect").UniversalAddress;
        from: (val: import("@wormhole-foundation/sdk-connect").UniversalAddress) => Uint8Array;
    };
    readonly name: "emitterAuthority";
}, {
    readonly name: "messageStatus";
    readonly binary: "uint";
    readonly size: 1;
    readonly endianness: "little";
}, {
    readonly name: "gap";
    readonly binary: "uint";
    readonly size: 3;
}, {
    readonly name: "timestamp";
    readonly binary: "uint";
    readonly size: 4;
    readonly endianness: "little";
}, {
    readonly name: "nonce";
    readonly binary: "uint";
    readonly size: 4;
    readonly endianness: "little";
}, {
    readonly name: "sequence";
    readonly binary: "uint";
    readonly size: 8;
    readonly endianness: "little";
}, {
    readonly name: "emitterChain";
    readonly binary: "uint";
    readonly size: 2;
    readonly endianness: "little";
}, {
    readonly binary: "bytes";
    readonly size: 32;
    readonly custom: {
        to: (val: Uint8Array) => import("@wormhole-foundation/sdk-connect").UniversalAddress;
        from: (val: import("@wormhole-foundation/sdk-connect").UniversalAddress) => Uint8Array;
    };
    readonly name: "emitterAddress";
}, {
    readonly name: "payloadLength";
    readonly binary: "uint";
    readonly size: 4;
    readonly endianness: "little";
}, {
    readonly name: "payload";
    readonly binary: "bytes";
}];
export declare function deserializePostMessage(data: Uint8Array): LayoutToType<typeof postMessageLayout>;
//# sourceMappingURL=postMessageLayout.d.ts.map