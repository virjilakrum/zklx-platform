import type { Program } from '@coral-xyz/anchor';
import type { Connection, PublicKey, TransactionResponse, VersionedTransactionResponse } from '@solana/web3.js';
import type { ChainId, ChainsConfig, Contracts, Network, Platform, UniversalAddress, VAA, WormholeCore, WormholeMessageId } from '@wormhole-foundation/sdk-connect';
import type { AnySolanaAddress, SolanaChains } from '@wormhole-foundation/sdk-solana';
import { SolanaUnsignedTransaction } from '@wormhole-foundation/sdk-solana';
import type { Wormhole as WormholeCoreContract } from './types.js';
import type { BridgeData } from './utils/index.js';
export declare class SolanaWormholeCore<N extends Network, C extends SolanaChains> implements WormholeCore<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly connection: Connection;
    readonly contracts: Contracts;
    readonly chainId: ChainId;
    readonly coreBridge: Program<WormholeCoreContract>;
    readonly address: string;
    protected bridgeData?: BridgeData;
    constructor(network: N, chain: C, connection: Connection, contracts: Contracts);
    getGuardianSet(index: number): Promise<WormholeCore.GuardianSet>;
    static fromRpc<N extends Network>(connection: Connection, config: ChainsConfig<N, Platform>): Promise<SolanaWormholeCore<N, "Solana" | "Pythnet">>;
    private ensureBridgeConfig;
    getMessageFee(): Promise<bigint>;
    getGuardianSetIndex(): Promise<number>;
    publishMessage(sender: AnySolanaAddress, message: Uint8Array, nonce: number, consistencyLevel: number): AsyncGenerator<SolanaUnsignedTransaction<N, C>, void, unknown>;
    verifyMessage(sender: AnySolanaAddress, vaa: VAA): AsyncGenerator<SolanaUnsignedTransaction<N, C>, void, unknown>;
    postVaa(sender: AnySolanaAddress, vaa: VAA): AsyncGenerator<SolanaUnsignedTransaction<N, C>, void, unknown>;
    static parseSequenceFromLog(coreBridgeAddress: string, transaction: VersionedTransactionResponse | TransactionResponse): [UniversalAddress, bigint][];
    private getMessageAccountKeys;
    private findInstructions;
    parsePostMessageAccount(messageAccount: PublicKey): Promise<VAA<"Uint8Array">>;
    parseTransaction(txid: string): Promise<WormholeMessageId[]>;
    parseMessages(txid: string): Promise<VAA<"Uint8Array">[]>;
    private createUnsignedTx;
}
//# sourceMappingURL=core.d.ts.map