import type { AccountAddress, AutomaticCircleBridge, Chain, ChainAddress, ChainsConfig, Contracts, Network, Platform } from '@wormhole-foundation/sdk-connect';
import type { Provider } from 'ethers';
import type { CircleRelayer } from './ethers-contracts/index.js';
import type { EvmChains } from '@wormhole-foundation/sdk-evm';
import { EvmUnsignedTransaction } from '@wormhole-foundation/sdk-evm';
import '@wormhole-foundation/sdk-evm-core';
import '@wormhole-foundation/sdk-evm-tokenbridge';
export declare class EvmAutomaticCircleBridge<N extends Network, C extends EvmChains> implements AutomaticCircleBridge<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly provider: Provider;
    readonly contracts: Contracts;
    readonly circleRelayer: CircleRelayer;
    readonly chainId: bigint;
    readonly tokenAddr: string;
    constructor(network: N, chain: C, provider: Provider, contracts: Contracts);
    static fromRpc<N extends Network>(provider: Provider, config: ChainsConfig<N, Platform>): Promise<EvmAutomaticCircleBridge<N, EvmChains>>;
    getRelayerFee(destination: Chain): Promise<bigint>;
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, amount: bigint, nativeGas?: bigint): AsyncGenerator<EvmUnsignedTransaction<N, C>>;
    private createUnsignedTx;
}
//# sourceMappingURL=automaticCircleBridge.d.ts.map