import { type ContractRunner } from 'ethers';
import type { ICircleIntegration, ICircleIntegrationInterface } from '../ICircleIntegration.js';
export declare class ICircleIntegration__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "chainId";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "circleBridge";
        readonly outputs: readonly [{
            readonly internalType: "contract ICircleBridge";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "circleTransmitter";
        readonly outputs: readonly [{
            readonly internalType: "contract IMessageTransmitter";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encoded";
            readonly type: "bytes";
        }];
        readonly name: "decodeDepositWithPayload";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "token";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "sourceDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "targetDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "fromAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "mintRecipient";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICircleIntegration.DepositWithPayload";
            readonly name: "message";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "token";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "sourceDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "targetDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "fromAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "mintRecipient";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICircleIntegration.DepositWithPayload";
            readonly name: "message";
            readonly type: "tuple";
        }];
        readonly name: "encodeDepositWithPayload";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "evmChain";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "sourceDomain";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "sourceToken";
            readonly type: "bytes32";
        }];
        readonly name: "fetchLocalTokenAddress";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "domain";
            readonly type: "uint32";
        }];
        readonly name: "getChainIdFromDomain";
        readonly outputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "";
            readonly type: "uint16";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "chainId_";
            readonly type: "uint16";
        }];
        readonly name: "getDomainFromChainId";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "emitterChainId";
            readonly type: "uint16";
        }];
        readonly name: "getRegisteredEmitter";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "isAcceptedToken";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "impl";
            readonly type: "address";
        }];
        readonly name: "isInitialized";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "hash";
            readonly type: "bytes32";
        }];
        readonly name: "isMessageConsumed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "localDomain";
        readonly outputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "encodedWormholeMessage";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "circleBridgeMessage";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes";
                readonly name: "circleAttestation";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICircleIntegration.RedeemParameters";
            readonly name: "params";
            readonly type: "tuple";
        }];
        readonly name: "redeemTokensWithPayload";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes32";
                readonly name: "token";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint32";
                readonly name: "sourceDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint32";
                readonly name: "targetDomain";
                readonly type: "uint32";
            }, {
                readonly internalType: "uint64";
                readonly name: "nonce";
                readonly type: "uint64";
            }, {
                readonly internalType: "bytes32";
                readonly name: "fromAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes32";
                readonly name: "mintRecipient";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }];
            readonly internalType: "struct ICircleIntegration.DepositWithPayload";
            readonly name: "depositWithPayload";
            readonly type: "tuple";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedMessage";
            readonly type: "bytes";
        }];
        readonly name: "registerAcceptedToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedMessage";
            readonly type: "bytes";
        }];
        readonly name: "registerEmitterAndDomain";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedMessage";
            readonly type: "bytes";
        }];
        readonly name: "registerTargetChainToken";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sourceToken";
            readonly type: "address";
        }, {
            readonly internalType: "uint16";
            readonly name: "chainId_";
            readonly type: "uint16";
        }];
        readonly name: "targetAcceptedToken";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint16";
                readonly name: "targetChain";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes32";
                readonly name: "mintRecipient";
                readonly type: "bytes32";
            }];
            readonly internalType: "struct ICircleIntegration.TransferParameters";
            readonly name: "transferParams";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint32";
            readonly name: "batchId";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }];
        readonly name: "transferTokensWithPayload";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "messageSequence";
            readonly type: "uint64";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedMessage";
            readonly type: "bytes";
        }];
        readonly name: "updateWormholeFinality";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedMessage";
            readonly type: "bytes";
        }];
        readonly name: "upgradeContract";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedMessage";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint8";
            readonly name: "action";
            readonly type: "uint8";
        }];
        readonly name: "verifyGovernanceMessage";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "wormhole";
        readonly outputs: readonly [{
            readonly internalType: "contract IWormhole";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "wormholeFinality";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ICircleIntegrationInterface;
    static connect(address: string, runner?: ContractRunner | null): ICircleIntegration;
}
//# sourceMappingURL=ICircleIntegration__factory.d.ts.map