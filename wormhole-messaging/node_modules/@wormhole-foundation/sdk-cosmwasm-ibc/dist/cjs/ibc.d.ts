import type { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import type { ChainAddress, ChainsConfig, Contracts, GatewayTransferMsg, GatewayTransferWithPayloadMsg, IbcBridge, IbcMessageId, IbcTransferInfo, Network, TxHash, WormholeMessageId } from "@wormhole-foundation/sdk-connect";
import type { AnyCosmwasmAddress, CosmwasmChains, CosmwasmPlatformType } from "@wormhole-foundation/sdk-cosmwasm";
import { CosmwasmUnsignedTransaction } from "@wormhole-foundation/sdk-cosmwasm";
export declare class CosmwasmIbcBridge<N extends Network, C extends CosmwasmChains> implements IbcBridge<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly rpc: CosmWasmClient;
    readonly contracts: Contracts;
    private gatewayAddress;
    private channelToChain;
    private chainToChannel;
    constructor(network: N, chain: C, rpc: CosmWasmClient, contracts: Contracts);
    static fromRpc<N extends Network>(rpc: CosmWasmClient, config: ChainsConfig<N, CosmwasmPlatformType>): Promise<CosmwasmIbcBridge<N, CosmwasmChains>>;
    getTransferChannel<C extends CosmwasmChains>(chain: C): string | null;
    transfer(sender: AnyCosmwasmAddress, recipient: ChainAddress, token: AnyCosmwasmAddress, amount: bigint): AsyncGenerator<CosmwasmUnsignedTransaction<N, C>>;
    lookupTransferFromTx(txid: TxHash): Promise<IbcTransferInfo[]>;
    lookupMessageFromIbcMsgId(msg: IbcMessageId): Promise<WormholeMessageId | null>;
    private lookupTxFromIbcMsgId;
    lookupTransferFromIbcMsgId(msg: IbcMessageId): Promise<IbcTransferInfo[]>;
    lookupTransferFromMsg(msg: GatewayTransferMsg | GatewayTransferWithPayloadMsg): Promise<IbcTransferInfo[]>;
    private fetchTransferInfo;
    private parseIbcTransferInfo;
    fetchTransferChannel(chain: CosmwasmChains): Promise<string>;
    private createUnsignedTx;
}
//# sourceMappingURL=ibc.d.ts.map