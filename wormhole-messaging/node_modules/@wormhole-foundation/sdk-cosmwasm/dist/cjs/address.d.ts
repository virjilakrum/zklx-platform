import type { Address } from "@wormhole-foundation/sdk-connect";
import { UniversalAddress } from "@wormhole-foundation/sdk-connect";
import type { AnyCosmwasmAddress, CosmwasmChains } from "./types.js";
export declare class CosmwasmAddress implements Address {
    static readonly contractAddressByteSize = 32;
    static readonly accountAddressByteSize = 20;
    static readonly platform: "Cosmwasm";
    readonly address: Uint8Array;
    readonly domain?: string;
    readonly denom?: string;
    readonly denomType?: string;
    constructor(address: AnyCosmwasmAddress);
    unwrap(): string;
    toString(): string;
    toNative(): this;
    toUint8Array(): Uint8Array;
    toUniversalAddress(): UniversalAddress;
    setChain(chain: CosmwasmChains): void;
    static isValidAddress(address: string): boolean;
    static encode(prefix: string, address: Uint8Array): string;
    private static validAddressLength;
    static instanceof(address: any): address is CosmwasmAddress;
    equals(other: CosmwasmAddress | UniversalAddress): boolean;
}
declare module "@wormhole-foundation/sdk-connect" {
    namespace WormholeRegistry {
        interface PlatformToNativeAddressMapping {
            Cosmwasm: CosmwasmAddress;
        }
    }
}
//# sourceMappingURL=address.d.ts.map