import type { CosmwasmChains } from "./types.js";
export declare const DEFAULT_FEE = 1000000;
export declare const MSG_EXECUTE_CONTRACT_TYPE_URL = "/cosmwasm.wasm.v1.MsgExecuteContract";
export declare const IBC_MSG_TYPE = "/ibc.applications.transfer.v1.MsgTransfer";
export declare const IBC_TRANSFER_PORT = "transfer";
export declare const IBC_PACKET_SEND = "send_packet";
export declare const IBC_PACKET_RECEIVE = "recv_packet";
export declare const IBC_PACKET_DST = "packet_dst_channel";
export declare const IBC_PACKET_SRC = "packet_src_channel";
export declare const IBC_PACKET_SRC_PORT = "packet_src_port";
export declare const IBC_PACKET_DST_PORT = "packet_dst_port";
export declare const IBC_PACKET_SEQ = "packet_sequence";
export declare const IBC_PACKET_DATA = "packet_data";
export declare const IBC_PACKET_CONN = "packet_connection";
export declare const IBC_TIMEOUT_MILLIS: number;
export declare const chainToAddressPrefix: (<const K1 extends "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia" | "Seda" | "Provenance">(args_0: K1) => {
    readonly Cosmoshub: "cosmos";
    readonly Evmos: "evmos";
    readonly Injective: "inj";
    readonly Kujira: "kuji";
    readonly Osmosis: "osmo";
    readonly Sei: "sei";
    readonly Terra: "terra";
    readonly Terra2: "terra";
    readonly Wormchain: "wormhole";
    readonly Xpla: "xpla";
    readonly Celestia: "celestia";
    readonly Stargaze: "stars";
    readonly Dymension: "dym";
    readonly Neutron: "neutron";
    readonly Seda: "seda";
    readonly Provenance: "pb";
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1]) & {
    readonly has: (args_0: string) => boolean;
    readonly get: (args_0: string) => "cosmos" | "evmos" | "inj" | "kuji" | "osmo" | "sei" | "terra" | "wormhole" | "xpla" | "celestia" | "stars" | "dym" | "neutron" | "seda" | "pb" | undefined;
};
export declare const addressPrefixToChain: (<const K1 extends "cosmos" | "evmos" | "inj" | "kuji" | "osmo" | "sei" | "terra" | "wormhole" | "xpla" | "celestia" | "stars" | "dym" | "neutron" | "seda" | "pb">(args_0: K1) => {
    cosmos: ["Cosmoshub"];
    evmos: ["Evmos"];
    inj: ["Injective"];
    kuji: ["Kujira"];
    osmo: ["Osmosis"];
    sei: ["Sei"];
    terra: ["Terra", "Terra2"];
    wormhole: ["Wormchain"];
    xpla: ["Xpla"];
    celestia: ["Celestia"];
    stars: ["Stargaze"];
    dym: ["Dymension"];
    neutron: ["Neutron"];
    seda: ["Seda"];
    pb: ["Provenance"];
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1]) & {
    readonly has: (args_0: string) => boolean;
    readonly get: (args_0: string) => ["Cosmoshub"] | ["Evmos"] | ["Injective"] | ["Kujira"] | ["Osmosis"] | ["Sei"] | ["Terra", "Terra2"] | ["Wormchain"] | ["Xpla"] | ["Celestia"] | ["Stargaze"] | ["Dymension"] | ["Neutron"] | ["Seda"] | ["Provenance"] | undefined;
};
export declare const chainToNativeDenoms: (<const K1 extends "Mainnet" | "Testnet" | "Devnet", const K2 extends keyof {
    readonly Mainnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "aevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Celestia: "utia";
        readonly Dymension: "adym";
        readonly Stargaze: "ustars";
        readonly Neutron: "untrn";
        readonly Provenance: "nhash";
    };
    readonly Testnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Seda: "aseda";
    };
    readonly Devnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T ? T extends keyof {
    readonly Mainnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "aevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Celestia: "utia";
        readonly Dymension: "adym";
        readonly Stargaze: "ustars";
        readonly Neutron: "untrn";
        readonly Provenance: "nhash";
    };
    readonly Testnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Seda: "aseda";
    };
    readonly Devnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T extends `bigint(${infer V extends bigint})` ? V : T extends `boolean(${infer V_1 extends boolean})` ? V_1 : T : never : never>(args_0: K1, args_1: K2) => {
    readonly Mainnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "aevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Celestia: "utia";
        readonly Dymension: "adym";
        readonly Stargaze: "ustars";
        readonly Neutron: "untrn";
        readonly Provenance: "nhash";
    };
    readonly Testnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Seda: "aseda";
    };
    readonly Devnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T_1 ? T_1 extends {
    readonly Mainnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "aevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Celestia: "utia";
        readonly Dymension: "adym";
        readonly Stargaze: "ustars";
        readonly Neutron: "untrn";
        readonly Provenance: "nhash";
    };
    readonly Testnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
        readonly Seda: "aseda";
    };
    readonly Devnet: {
        readonly Cosmoshub: "uatom";
        readonly Evmos: "atevmos";
        readonly Injective: "inj";
        readonly Kujira: "kuji";
        readonly Osmosis: "uosmo";
        readonly Sei: "usei";
        readonly Terra: "luna";
        readonly Terra2: "uluna";
        readonly Wormchain: "uworm";
        readonly Xpla: "uxpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T_1 extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? T_1[K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2] : never : never : never) & {
    readonly has: (args_0: string, args_1: string) => boolean;
    readonly get: (args_0: string, args_1: string) => "inj" | "kuji" | "uatom" | "aevmos" | "uosmo" | "usei" | "luna" | "uluna" | "uworm" | "uxpla" | "utia" | "adym" | "ustars" | "untrn" | "nhash" | "atevmos" | "aseda" | undefined;
} & {
    readonly subMap: <const K extends "Mainnet" | "Testnet" | "Devnet">(key: K) => (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) extends infer T_2 ? T_2 extends (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) ? T_2 extends "Mainnet" | "Testnet" | "Devnet" ? {
        readonly Mainnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "aevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Celestia: "utia";
            readonly Dymension: "adym";
            readonly Stargaze: "ustars";
            readonly Neutron: "untrn";
            readonly Provenance: "nhash";
        };
        readonly Testnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Seda: "aseda";
        };
        readonly Devnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
        };
    }[T_2] extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? (<const K1_1 extends keyof {
        readonly Mainnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "aevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Celestia: "utia";
            readonly Dymension: "adym";
            readonly Stargaze: "ustars";
            readonly Neutron: "untrn";
            readonly Provenance: "nhash";
        };
        readonly Testnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Seda: "aseda";
        };
        readonly Devnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
        };
    }[T_2] extends infer T_3 ? T_3 extends keyof {
        readonly Mainnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "aevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Celestia: "utia";
            readonly Dymension: "adym";
            readonly Stargaze: "ustars";
            readonly Neutron: "untrn";
            readonly Provenance: "nhash";
        };
        readonly Testnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Seda: "aseda";
        };
        readonly Devnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
        };
    }[T_2] ? T_3 extends `bigint(${infer V extends bigint})` ? V : T_3 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_3 : never : never>(args_0: K1_1) => {
        readonly Mainnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "aevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Celestia: "utia";
            readonly Dymension: "adym";
            readonly Stargaze: "ustars";
            readonly Neutron: "untrn";
            readonly Provenance: "nhash";
        };
        readonly Testnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Seda: "aseda";
        };
        readonly Devnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
        };
    }[T_2] extends infer T_4 ? T_4 extends {
        readonly Mainnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "aevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Celestia: "utia";
            readonly Dymension: "adym";
            readonly Stargaze: "ustars";
            readonly Neutron: "untrn";
            readonly Provenance: "nhash";
        };
        readonly Testnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
            readonly Seda: "aseda";
        };
        readonly Devnet: {
            readonly Cosmoshub: "uatom";
            readonly Evmos: "atevmos";
            readonly Injective: "inj";
            readonly Kujira: "kuji";
            readonly Osmosis: "uosmo";
            readonly Sei: "usei";
            readonly Terra: "luna";
            readonly Terra2: "uluna";
            readonly Wormchain: "uworm";
            readonly Xpla: "uxpla";
        };
    }[T_2] ? T_4 extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? T_4[K1_1 extends bigint ? `bigint(${K1_1})` : K1_1 extends boolean ? `boolean(${K1_1})` : K1_1] : never : never : never) & {
        readonly has: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => boolean;
        readonly get: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => ({
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] extends infer T_7 ? T_7 extends {
            readonly Mainnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "aevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Celestia: "utia";
                readonly Dymension: "adym";
                readonly Stargaze: "ustars";
                readonly Neutron: "untrn";
                readonly Provenance: "nhash";
            };
            readonly Testnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
                readonly Seda: "aseda";
            };
            readonly Devnet: {
                readonly Cosmoshub: "uatom";
                readonly Evmos: "atevmos";
                readonly Injective: "inj";
                readonly Kujira: "kuji";
                readonly Osmosis: "uosmo";
                readonly Sei: "usei";
                readonly Terra: "luna";
                readonly Terra2: "uluna";
                readonly Wormchain: "uworm";
                readonly Xpla: "uxpla";
            };
        }[T_2] ? T_7 extends Object ? T_7[keyof T_7] : never : never : never) | undefined;
    } : never : never : never : never;
};
export declare const nativeDenomToChain: (<const K1 extends "Mainnet" | "Testnet" | "Devnet", const K2 extends keyof {
    Mainnet: {
        uatom: "Cosmoshub";
        aevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        utia: "Celestia";
        adym: "Dymension";
        ustars: "Stargaze";
        untrn: "Neutron";
        nhash: "Provenance";
    };
    Testnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        aseda: "Seda";
    };
    Devnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T ? T extends keyof {
    Mainnet: {
        uatom: "Cosmoshub";
        aevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        utia: "Celestia";
        adym: "Dymension";
        ustars: "Stargaze";
        untrn: "Neutron";
        nhash: "Provenance";
    };
    Testnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        aseda: "Seda";
    };
    Devnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T extends `bigint(${infer V extends bigint})` ? V : T extends `boolean(${infer V_1 extends boolean})` ? V_1 : T : never : never>(args_0: K1, args_1: K2) => {
    Mainnet: {
        uatom: "Cosmoshub";
        aevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        utia: "Celestia";
        adym: "Dymension";
        ustars: "Stargaze";
        untrn: "Neutron";
        nhash: "Provenance";
    };
    Testnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        aseda: "Seda";
    };
    Devnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T_1 ? T_1 extends {
    Mainnet: {
        uatom: "Cosmoshub";
        aevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        utia: "Celestia";
        adym: "Dymension";
        ustars: "Stargaze";
        untrn: "Neutron";
        nhash: "Provenance";
    };
    Testnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
        aseda: "Seda";
    };
    Devnet: {
        uatom: "Cosmoshub";
        atevmos: "Evmos";
        inj: "Injective";
        kuji: "Kujira";
        uosmo: "Osmosis";
        usei: "Sei";
        luna: "Terra";
        uluna: "Terra2";
        uworm: "Wormchain";
        uxpla: "Xpla";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T_1 extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? T_1[K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2] : never : never : never) & {
    readonly has: (args_0: string, args_1: string) => boolean;
    readonly get: (args_0: string, args_1: string) => "Cosmoshub" | "Evmos" | "Injective" | "Kujira" | "Osmosis" | "Sei" | "Terra" | "Terra2" | "Wormchain" | "Xpla" | "Dymension" | "Neutron" | "Stargaze" | "Celestia" | "Seda" | "Provenance" | undefined;
} & {
    readonly subMap: <const K extends "Mainnet" | "Testnet" | "Devnet">(key: K) => (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) extends infer T_2 ? T_2 extends (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) ? T_2 extends "Mainnet" | "Testnet" | "Devnet" ? {
        Mainnet: {
            uatom: "Cosmoshub";
            aevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            utia: "Celestia";
            adym: "Dymension";
            ustars: "Stargaze";
            untrn: "Neutron";
            nhash: "Provenance";
        };
        Testnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            aseda: "Seda";
        };
        Devnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
        };
    }[T_2] extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? (<const K1_1 extends keyof {
        Mainnet: {
            uatom: "Cosmoshub";
            aevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            utia: "Celestia";
            adym: "Dymension";
            ustars: "Stargaze";
            untrn: "Neutron";
            nhash: "Provenance";
        };
        Testnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            aseda: "Seda";
        };
        Devnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
        };
    }[T_2] extends infer T_3 ? T_3 extends keyof {
        Mainnet: {
            uatom: "Cosmoshub";
            aevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            utia: "Celestia";
            adym: "Dymension";
            ustars: "Stargaze";
            untrn: "Neutron";
            nhash: "Provenance";
        };
        Testnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            aseda: "Seda";
        };
        Devnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
        };
    }[T_2] ? T_3 extends `bigint(${infer V extends bigint})` ? V : T_3 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_3 : never : never>(args_0: K1_1) => {
        Mainnet: {
            uatom: "Cosmoshub";
            aevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            utia: "Celestia";
            adym: "Dymension";
            ustars: "Stargaze";
            untrn: "Neutron";
            nhash: "Provenance";
        };
        Testnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            aseda: "Seda";
        };
        Devnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
        };
    }[T_2] extends infer T_4 ? T_4 extends {
        Mainnet: {
            uatom: "Cosmoshub";
            aevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            utia: "Celestia";
            adym: "Dymension";
            ustars: "Stargaze";
            untrn: "Neutron";
            nhash: "Provenance";
        };
        Testnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
            aseda: "Seda";
        };
        Devnet: {
            uatom: "Cosmoshub";
            atevmos: "Evmos";
            inj: "Injective";
            kuji: "Kujira";
            uosmo: "Osmosis";
            usei: "Sei";
            luna: "Terra";
            uluna: "Terra2";
            uworm: "Wormchain";
            uxpla: "Xpla";
        };
    }[T_2] ? T_4 extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? T_4[K1_1 extends bigint ? `bigint(${K1_1})` : K1_1 extends boolean ? `boolean(${K1_1})` : K1_1] : never : never : never) & {
        readonly has: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => boolean;
        readonly get: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => ({
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] extends infer T_7 ? T_7 extends {
            Mainnet: {
                uatom: "Cosmoshub";
                aevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                utia: "Celestia";
                adym: "Dymension";
                ustars: "Stargaze";
                untrn: "Neutron";
                nhash: "Provenance";
            };
            Testnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
                aseda: "Seda";
            };
            Devnet: {
                uatom: "Cosmoshub";
                atevmos: "Evmos";
                inj: "Injective";
                kuji: "Kujira";
                uosmo: "Osmosis";
                usei: "Sei";
                luna: "Terra";
                uluna: "Terra2";
                uworm: "Wormchain";
                uxpla: "Xpla";
            };
        }[T_2] ? T_7 extends Object ? T_7[keyof T_7] : never : never : never) | undefined;
    } : never : never : never : never;
};
export type IbcChannels = Partial<Record<CosmwasmChains, string>>;
export declare const networkChainToChannels: (<const K1 extends "Mainnet" | "Testnet" | "Devnet", const K2 extends keyof {
    readonly Mainnet: {
        readonly Wormchain: {
            readonly Osmosis: "channel-3";
            readonly Evmos: "channel-5";
            readonly Kujira: "channel-9";
            readonly Stargaze: "channel-12";
            readonly Injective: "channel-13";
            readonly Dymension: "channel-15";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-2186";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-94";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-113";
        };
        readonly Injective: {
            readonly Wormchain: "channel-183";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-36";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-278";
        };
    };
    readonly Testnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-5";
            readonly Injective: "channel-15";
            readonly Kujira: "channel-16";
            readonly Stargaze: "channel-17";
            readonly Osmosis: "channel-19";
            readonly Dymension: "channel-18";
            readonly Evmos: "channel-20";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-3086";
        };
        readonly Injective: {
            readonly Wormchain: "channel-76973";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-114";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-7904";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-949";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-240";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-23";
        };
    };
    readonly Devnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-1";
            readonly Osmosis: "channel-2";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-1";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-1";
        };
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T ? T extends keyof {
    readonly Mainnet: {
        readonly Wormchain: {
            readonly Osmosis: "channel-3";
            readonly Evmos: "channel-5";
            readonly Kujira: "channel-9";
            readonly Stargaze: "channel-12";
            readonly Injective: "channel-13";
            readonly Dymension: "channel-15";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-2186";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-94";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-113";
        };
        readonly Injective: {
            readonly Wormchain: "channel-183";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-36";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-278";
        };
    };
    readonly Testnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-5";
            readonly Injective: "channel-15";
            readonly Kujira: "channel-16";
            readonly Stargaze: "channel-17";
            readonly Osmosis: "channel-19";
            readonly Dymension: "channel-18";
            readonly Evmos: "channel-20";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-3086";
        };
        readonly Injective: {
            readonly Wormchain: "channel-76973";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-114";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-7904";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-949";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-240";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-23";
        };
    };
    readonly Devnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-1";
            readonly Osmosis: "channel-2";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-1";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-1";
        };
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T extends `bigint(${infer V extends bigint})` ? V : T extends `boolean(${infer V_1 extends boolean})` ? V_1 : T : never : never>(args_0: K1, args_1: K2) => {
    readonly Mainnet: {
        readonly Wormchain: {
            readonly Osmosis: "channel-3";
            readonly Evmos: "channel-5";
            readonly Kujira: "channel-9";
            readonly Stargaze: "channel-12";
            readonly Injective: "channel-13";
            readonly Dymension: "channel-15";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-2186";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-94";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-113";
        };
        readonly Injective: {
            readonly Wormchain: "channel-183";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-36";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-278";
        };
    };
    readonly Testnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-5";
            readonly Injective: "channel-15";
            readonly Kujira: "channel-16";
            readonly Stargaze: "channel-17";
            readonly Osmosis: "channel-19";
            readonly Dymension: "channel-18";
            readonly Evmos: "channel-20";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-3086";
        };
        readonly Injective: {
            readonly Wormchain: "channel-76973";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-114";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-7904";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-949";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-240";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-23";
        };
    };
    readonly Devnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-1";
            readonly Osmosis: "channel-2";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-1";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-1";
        };
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T_1 ? T_1 extends {
    readonly Mainnet: {
        readonly Wormchain: {
            readonly Osmosis: "channel-3";
            readonly Evmos: "channel-5";
            readonly Kujira: "channel-9";
            readonly Stargaze: "channel-12";
            readonly Injective: "channel-13";
            readonly Dymension: "channel-15";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-2186";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-94";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-113";
        };
        readonly Injective: {
            readonly Wormchain: "channel-183";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-36";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-278";
        };
    };
    readonly Testnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-5";
            readonly Injective: "channel-15";
            readonly Kujira: "channel-16";
            readonly Stargaze: "channel-17";
            readonly Osmosis: "channel-19";
            readonly Dymension: "channel-18";
            readonly Evmos: "channel-20";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-3086";
        };
        readonly Injective: {
            readonly Wormchain: "channel-76973";
        };
        readonly Kujira: {
            readonly Wormchain: "channel-114";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-7904";
        };
        readonly Stargaze: {
            readonly Wormchain: "channel-949";
        };
        readonly Evmos: {
            readonly Wormchain: "channel-240";
        };
        readonly Dymension: {
            readonly Wormchain: "channel-23";
        };
    };
    readonly Devnet: {
        readonly Wormchain: {
            readonly Cosmoshub: "channel-1";
            readonly Osmosis: "channel-2";
        };
        readonly Cosmoshub: {
            readonly Wormchain: "channel-1";
        };
        readonly Osmosis: {
            readonly Wormchain: "channel-1";
        };
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T_1 extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? T_1[K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2] : never : never : never) & {
    readonly has: (args_0: string, args_1: string) => boolean;
    readonly get: (args_0: string, args_1: string) => {
        readonly Osmosis: "channel-3";
        readonly Evmos: "channel-5";
        readonly Kujira: "channel-9";
        readonly Stargaze: "channel-12";
        readonly Injective: "channel-13";
        readonly Dymension: "channel-15";
    } | {
        readonly Wormchain: "channel-2186";
    } | {
        readonly Wormchain: "channel-94";
    } | {
        readonly Wormchain: "channel-113";
    } | {
        readonly Wormchain: "channel-183";
    } | {
        readonly Wormchain: "channel-36";
    } | {
        readonly Wormchain: "channel-278";
    } | {
        readonly Cosmoshub: "channel-5";
        readonly Injective: "channel-15";
        readonly Kujira: "channel-16";
        readonly Stargaze: "channel-17";
        readonly Osmosis: "channel-19";
        readonly Dymension: "channel-18";
        readonly Evmos: "channel-20";
    } | {
        readonly Wormchain: "channel-3086";
    } | {
        readonly Wormchain: "channel-76973";
    } | {
        readonly Wormchain: "channel-114";
    } | {
        readonly Wormchain: "channel-7904";
    } | {
        readonly Wormchain: "channel-949";
    } | {
        readonly Wormchain: "channel-240";
    } | {
        readonly Wormchain: "channel-23";
    } | {
        readonly Cosmoshub: "channel-1";
        readonly Osmosis: "channel-2";
    } | {
        readonly Wormchain: "channel-1";
    } | {
        readonly Wormchain: "channel-1";
    } | undefined;
} & {
    readonly subMap: <const K extends "Mainnet" | "Testnet" | "Devnet">(key: K) => (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) extends infer T_2 ? T_2 extends (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) ? T_2 extends "Mainnet" | "Testnet" | "Devnet" ? {
        readonly Mainnet: {
            readonly Wormchain: {
                readonly Osmosis: "channel-3";
                readonly Evmos: "channel-5";
                readonly Kujira: "channel-9";
                readonly Stargaze: "channel-12";
                readonly Injective: "channel-13";
                readonly Dymension: "channel-15";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-2186";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-94";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-113";
            };
            readonly Injective: {
                readonly Wormchain: "channel-183";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-36";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-278";
            };
        };
        readonly Testnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-5";
                readonly Injective: "channel-15";
                readonly Kujira: "channel-16";
                readonly Stargaze: "channel-17";
                readonly Osmosis: "channel-19";
                readonly Dymension: "channel-18";
                readonly Evmos: "channel-20";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-3086";
            };
            readonly Injective: {
                readonly Wormchain: "channel-76973";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-114";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-7904";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-949";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-240";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-23";
            };
        };
        readonly Devnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-1";
                readonly Osmosis: "channel-2";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-1";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-1";
            };
        };
    }[T_2] extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? (<const K1_1 extends keyof {
        readonly Mainnet: {
            readonly Wormchain: {
                readonly Osmosis: "channel-3";
                readonly Evmos: "channel-5";
                readonly Kujira: "channel-9";
                readonly Stargaze: "channel-12";
                readonly Injective: "channel-13";
                readonly Dymension: "channel-15";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-2186";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-94";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-113";
            };
            readonly Injective: {
                readonly Wormchain: "channel-183";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-36";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-278";
            };
        };
        readonly Testnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-5";
                readonly Injective: "channel-15";
                readonly Kujira: "channel-16";
                readonly Stargaze: "channel-17";
                readonly Osmosis: "channel-19";
                readonly Dymension: "channel-18";
                readonly Evmos: "channel-20";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-3086";
            };
            readonly Injective: {
                readonly Wormchain: "channel-76973";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-114";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-7904";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-949";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-240";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-23";
            };
        };
        readonly Devnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-1";
                readonly Osmosis: "channel-2";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-1";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-1";
            };
        };
    }[T_2] extends infer T_3 ? T_3 extends keyof {
        readonly Mainnet: {
            readonly Wormchain: {
                readonly Osmosis: "channel-3";
                readonly Evmos: "channel-5";
                readonly Kujira: "channel-9";
                readonly Stargaze: "channel-12";
                readonly Injective: "channel-13";
                readonly Dymension: "channel-15";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-2186";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-94";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-113";
            };
            readonly Injective: {
                readonly Wormchain: "channel-183";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-36";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-278";
            };
        };
        readonly Testnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-5";
                readonly Injective: "channel-15";
                readonly Kujira: "channel-16";
                readonly Stargaze: "channel-17";
                readonly Osmosis: "channel-19";
                readonly Dymension: "channel-18";
                readonly Evmos: "channel-20";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-3086";
            };
            readonly Injective: {
                readonly Wormchain: "channel-76973";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-114";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-7904";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-949";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-240";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-23";
            };
        };
        readonly Devnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-1";
                readonly Osmosis: "channel-2";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-1";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-1";
            };
        };
    }[T_2] ? T_3 extends `bigint(${infer V extends bigint})` ? V : T_3 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_3 : never : never>(args_0: K1_1) => {
        readonly Mainnet: {
            readonly Wormchain: {
                readonly Osmosis: "channel-3";
                readonly Evmos: "channel-5";
                readonly Kujira: "channel-9";
                readonly Stargaze: "channel-12";
                readonly Injective: "channel-13";
                readonly Dymension: "channel-15";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-2186";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-94";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-113";
            };
            readonly Injective: {
                readonly Wormchain: "channel-183";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-36";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-278";
            };
        };
        readonly Testnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-5";
                readonly Injective: "channel-15";
                readonly Kujira: "channel-16";
                readonly Stargaze: "channel-17";
                readonly Osmosis: "channel-19";
                readonly Dymension: "channel-18";
                readonly Evmos: "channel-20";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-3086";
            };
            readonly Injective: {
                readonly Wormchain: "channel-76973";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-114";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-7904";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-949";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-240";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-23";
            };
        };
        readonly Devnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-1";
                readonly Osmosis: "channel-2";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-1";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-1";
            };
        };
    }[T_2] extends infer T_4 ? T_4 extends {
        readonly Mainnet: {
            readonly Wormchain: {
                readonly Osmosis: "channel-3";
                readonly Evmos: "channel-5";
                readonly Kujira: "channel-9";
                readonly Stargaze: "channel-12";
                readonly Injective: "channel-13";
                readonly Dymension: "channel-15";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-2186";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-94";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-113";
            };
            readonly Injective: {
                readonly Wormchain: "channel-183";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-36";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-278";
            };
        };
        readonly Testnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-5";
                readonly Injective: "channel-15";
                readonly Kujira: "channel-16";
                readonly Stargaze: "channel-17";
                readonly Osmosis: "channel-19";
                readonly Dymension: "channel-18";
                readonly Evmos: "channel-20";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-3086";
            };
            readonly Injective: {
                readonly Wormchain: "channel-76973";
            };
            readonly Kujira: {
                readonly Wormchain: "channel-114";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-7904";
            };
            readonly Stargaze: {
                readonly Wormchain: "channel-949";
            };
            readonly Evmos: {
                readonly Wormchain: "channel-240";
            };
            readonly Dymension: {
                readonly Wormchain: "channel-23";
            };
        };
        readonly Devnet: {
            readonly Wormchain: {
                readonly Cosmoshub: "channel-1";
                readonly Osmosis: "channel-2";
            };
            readonly Cosmoshub: {
                readonly Wormchain: "channel-1";
            };
            readonly Osmosis: {
                readonly Wormchain: "channel-1";
            };
        };
    }[T_2] ? T_4 extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? T_4[K1_1 extends bigint ? `bigint(${K1_1})` : K1_1 extends boolean ? `boolean(${K1_1})` : K1_1] : never : never : never) & {
        readonly has: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => boolean;
        readonly get: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => ({
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] extends infer T_7 ? T_7 extends {
            readonly Mainnet: {
                readonly Wormchain: {
                    readonly Osmosis: "channel-3";
                    readonly Evmos: "channel-5";
                    readonly Kujira: "channel-9";
                    readonly Stargaze: "channel-12";
                    readonly Injective: "channel-13";
                    readonly Dymension: "channel-15";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-2186";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-94";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-113";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-183";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-36";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-278";
                };
            };
            readonly Testnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-5";
                    readonly Injective: "channel-15";
                    readonly Kujira: "channel-16";
                    readonly Stargaze: "channel-17";
                    readonly Osmosis: "channel-19";
                    readonly Dymension: "channel-18";
                    readonly Evmos: "channel-20";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-3086";
                };
                readonly Injective: {
                    readonly Wormchain: "channel-76973";
                };
                readonly Kujira: {
                    readonly Wormchain: "channel-114";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-7904";
                };
                readonly Stargaze: {
                    readonly Wormchain: "channel-949";
                };
                readonly Evmos: {
                    readonly Wormchain: "channel-240";
                };
                readonly Dymension: {
                    readonly Wormchain: "channel-23";
                };
            };
            readonly Devnet: {
                readonly Wormchain: {
                    readonly Cosmoshub: "channel-1";
                    readonly Osmosis: "channel-2";
                };
                readonly Cosmoshub: {
                    readonly Wormchain: "channel-1";
                };
                readonly Osmosis: {
                    readonly Wormchain: "channel-1";
                };
            };
        }[T_2] ? T_7 extends Object ? T_7[keyof T_7] : never : never : never) | undefined;
    } : never : never : never : never;
};
export declare const evmLikeChains: readonly ["Evmos", "Injective"];
export type CosmwasmEvmChain = (typeof evmLikeChains)[number];
export declare const cosmwasmNetworkChainToRestUrls: (<const K1 extends "Mainnet" | "Testnet" | "Devnet", const K2 extends keyof {
    readonly Mainnet: {
        readonly Injective: "https://lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.org:1317";
    };
    readonly Testnet: {
        readonly Injective: "https://k8s.testnet.lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.dev:1317";
    };
    readonly Devnet: {
        readonly Injective: "https://localhost:1234";
        readonly Evmos: "https://localhost:1233";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T ? T extends keyof {
    readonly Mainnet: {
        readonly Injective: "https://lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.org:1317";
    };
    readonly Testnet: {
        readonly Injective: "https://k8s.testnet.lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.dev:1317";
    };
    readonly Devnet: {
        readonly Injective: "https://localhost:1234";
        readonly Evmos: "https://localhost:1233";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T extends `bigint(${infer V extends bigint})` ? V : T extends `boolean(${infer V_1 extends boolean})` ? V_1 : T : never : never>(args_0: K1, args_1: K2) => {
    readonly Mainnet: {
        readonly Injective: "https://lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.org:1317";
    };
    readonly Testnet: {
        readonly Injective: "https://k8s.testnet.lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.dev:1317";
    };
    readonly Devnet: {
        readonly Injective: "https://localhost:1234";
        readonly Evmos: "https://localhost:1233";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T_1 ? T_1 extends {
    readonly Mainnet: {
        readonly Injective: "https://lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.org:1317";
    };
    readonly Testnet: {
        readonly Injective: "https://k8s.testnet.lcd.injective.network";
        readonly Evmos: "https://rest.bd.evmos.dev:1317";
    };
    readonly Devnet: {
        readonly Injective: "https://localhost:1234";
        readonly Evmos: "https://localhost:1233";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T_1 extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? T_1[K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2] : never : never : never) & {
    readonly has: (args_0: string, args_1: string) => boolean;
    readonly get: (args_0: string, args_1: string) => "https://lcd.injective.network" | "https://rest.bd.evmos.org:1317" | "https://k8s.testnet.lcd.injective.network" | "https://rest.bd.evmos.dev:1317" | "https://localhost:1234" | "https://localhost:1233" | undefined;
} & {
    readonly subMap: <const K extends "Mainnet" | "Testnet" | "Devnet">(key: K) => (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) extends infer T_2 ? T_2 extends (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) ? T_2 extends "Mainnet" | "Testnet" | "Devnet" ? {
        readonly Mainnet: {
            readonly Injective: "https://lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.org:1317";
        };
        readonly Testnet: {
            readonly Injective: "https://k8s.testnet.lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.dev:1317";
        };
        readonly Devnet: {
            readonly Injective: "https://localhost:1234";
            readonly Evmos: "https://localhost:1233";
        };
    }[T_2] extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? (<const K1_1 extends keyof {
        readonly Mainnet: {
            readonly Injective: "https://lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.org:1317";
        };
        readonly Testnet: {
            readonly Injective: "https://k8s.testnet.lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.dev:1317";
        };
        readonly Devnet: {
            readonly Injective: "https://localhost:1234";
            readonly Evmos: "https://localhost:1233";
        };
    }[T_2] extends infer T_3 ? T_3 extends keyof {
        readonly Mainnet: {
            readonly Injective: "https://lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.org:1317";
        };
        readonly Testnet: {
            readonly Injective: "https://k8s.testnet.lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.dev:1317";
        };
        readonly Devnet: {
            readonly Injective: "https://localhost:1234";
            readonly Evmos: "https://localhost:1233";
        };
    }[T_2] ? T_3 extends `bigint(${infer V extends bigint})` ? V : T_3 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_3 : never : never>(args_0: K1_1) => {
        readonly Mainnet: {
            readonly Injective: "https://lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.org:1317";
        };
        readonly Testnet: {
            readonly Injective: "https://k8s.testnet.lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.dev:1317";
        };
        readonly Devnet: {
            readonly Injective: "https://localhost:1234";
            readonly Evmos: "https://localhost:1233";
        };
    }[T_2] extends infer T_4 ? T_4 extends {
        readonly Mainnet: {
            readonly Injective: "https://lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.org:1317";
        };
        readonly Testnet: {
            readonly Injective: "https://k8s.testnet.lcd.injective.network";
            readonly Evmos: "https://rest.bd.evmos.dev:1317";
        };
        readonly Devnet: {
            readonly Injective: "https://localhost:1234";
            readonly Evmos: "https://localhost:1233";
        };
    }[T_2] ? T_4 extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? T_4[K1_1 extends bigint ? `bigint(${K1_1})` : K1_1 extends boolean ? `boolean(${K1_1})` : K1_1] : never : never : never) & {
        readonly has: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => boolean;
        readonly get: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => ({
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] extends infer T_7 ? T_7 extends {
            readonly Mainnet: {
                readonly Injective: "https://lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.org:1317";
            };
            readonly Testnet: {
                readonly Injective: "https://k8s.testnet.lcd.injective.network";
                readonly Evmos: "https://rest.bd.evmos.dev:1317";
            };
            readonly Devnet: {
                readonly Injective: "https://localhost:1234";
                readonly Evmos: "https://localhost:1233";
            };
        }[T_2] ? T_7 extends Object ? T_7[keyof T_7] : never : never : never) | undefined;
    } : never : never : never : never;
};
export declare const averageGasPrices: (<const K1 extends "Mainnet", const K2 extends keyof {
    readonly Mainnet: {
        readonly Terra: "28.325";
        readonly Terra2: "0.015";
        readonly Osmosis: "0.025";
        readonly Sei: "0.02";
        readonly Cosmoshub: "0.025";
        readonly Kujira: "0.0051";
        readonly Neutron: "0.075";
        readonly Celestia: "0.02";
        readonly Stargaze: "1.1";
        readonly Injective: "700000000";
        readonly Xpla: "1147500000000";
        readonly Evmos: "25000000000";
        readonly Dymension: "5000000000";
        readonly Provenance: "2100";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T ? T extends keyof {
    readonly Mainnet: {
        readonly Terra: "28.325";
        readonly Terra2: "0.015";
        readonly Osmosis: "0.025";
        readonly Sei: "0.02";
        readonly Cosmoshub: "0.025";
        readonly Kujira: "0.0051";
        readonly Neutron: "0.075";
        readonly Celestia: "0.02";
        readonly Stargaze: "1.1";
        readonly Injective: "700000000";
        readonly Xpla: "1147500000000";
        readonly Evmos: "25000000000";
        readonly Dymension: "5000000000";
        readonly Provenance: "2100";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T extends `bigint(${infer V extends bigint})` ? V : T extends `boolean(${infer V_1 extends boolean})` ? V_1 : T : never : never>(args_0: K1, args_1: K2) => {
    readonly Mainnet: {
        readonly Terra: "28.325";
        readonly Terra2: "0.015";
        readonly Osmosis: "0.025";
        readonly Sei: "0.02";
        readonly Cosmoshub: "0.025";
        readonly Kujira: "0.0051";
        readonly Neutron: "0.075";
        readonly Celestia: "0.02";
        readonly Stargaze: "1.1";
        readonly Injective: "700000000";
        readonly Xpla: "1147500000000";
        readonly Evmos: "25000000000";
        readonly Dymension: "5000000000";
        readonly Provenance: "2100";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] extends infer T_1 ? T_1 extends {
    readonly Mainnet: {
        readonly Terra: "28.325";
        readonly Terra2: "0.015";
        readonly Osmosis: "0.025";
        readonly Sei: "0.02";
        readonly Cosmoshub: "0.025";
        readonly Kujira: "0.0051";
        readonly Neutron: "0.075";
        readonly Celestia: "0.02";
        readonly Stargaze: "1.1";
        readonly Injective: "700000000";
        readonly Xpla: "1147500000000";
        readonly Evmos: "25000000000";
        readonly Dymension: "5000000000";
        readonly Provenance: "2100";
    };
}[K1 extends bigint ? `bigint(${K1})` : K1 extends boolean ? `boolean(${K1})` : K1] ? T_1 extends {
    [key: string]: unknown;
    [key: number]: unknown;
    [key: symbol]: unknown;
} ? T_1[K2 extends bigint ? `bigint(${K2})` : K2 extends boolean ? `boolean(${K2})` : K2] : never : never : never) & {
    readonly has: (args_0: string, args_1: string) => boolean;
    readonly get: (args_0: string, args_1: string) => "28.325" | "0.015" | "0.025" | "0.02" | "0.0051" | "0.075" | "1.1" | "700000000" | "1147500000000" | "25000000000" | "5000000000" | "2100" | undefined;
} & {
    readonly subMap: <const K extends "Mainnet">(key: K) => (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) extends infer T_2 ? T_2 extends (K extends bigint ? `bigint(${K})` : K extends boolean ? `boolean(${K})` : K) ? T_2 extends "Mainnet" ? {
        readonly Mainnet: {
            readonly Terra: "28.325";
            readonly Terra2: "0.015";
            readonly Osmosis: "0.025";
            readonly Sei: "0.02";
            readonly Cosmoshub: "0.025";
            readonly Kujira: "0.0051";
            readonly Neutron: "0.075";
            readonly Celestia: "0.02";
            readonly Stargaze: "1.1";
            readonly Injective: "700000000";
            readonly Xpla: "1147500000000";
            readonly Evmos: "25000000000";
            readonly Dymension: "5000000000";
            readonly Provenance: "2100";
        };
    }[T_2] extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? (<const K1_1 extends keyof {
        readonly Mainnet: {
            readonly Terra: "28.325";
            readonly Terra2: "0.015";
            readonly Osmosis: "0.025";
            readonly Sei: "0.02";
            readonly Cosmoshub: "0.025";
            readonly Kujira: "0.0051";
            readonly Neutron: "0.075";
            readonly Celestia: "0.02";
            readonly Stargaze: "1.1";
            readonly Injective: "700000000";
            readonly Xpla: "1147500000000";
            readonly Evmos: "25000000000";
            readonly Dymension: "5000000000";
            readonly Provenance: "2100";
        };
    }[T_2] extends infer T_3 ? T_3 extends keyof {
        readonly Mainnet: {
            readonly Terra: "28.325";
            readonly Terra2: "0.015";
            readonly Osmosis: "0.025";
            readonly Sei: "0.02";
            readonly Cosmoshub: "0.025";
            readonly Kujira: "0.0051";
            readonly Neutron: "0.075";
            readonly Celestia: "0.02";
            readonly Stargaze: "1.1";
            readonly Injective: "700000000";
            readonly Xpla: "1147500000000";
            readonly Evmos: "25000000000";
            readonly Dymension: "5000000000";
            readonly Provenance: "2100";
        };
    }[T_2] ? T_3 extends `bigint(${infer V extends bigint})` ? V : T_3 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_3 : never : never>(args_0: K1_1) => {
        readonly Mainnet: {
            readonly Terra: "28.325";
            readonly Terra2: "0.015";
            readonly Osmosis: "0.025";
            readonly Sei: "0.02";
            readonly Cosmoshub: "0.025";
            readonly Kujira: "0.0051";
            readonly Neutron: "0.075";
            readonly Celestia: "0.02";
            readonly Stargaze: "1.1";
            readonly Injective: "700000000";
            readonly Xpla: "1147500000000";
            readonly Evmos: "25000000000";
            readonly Dymension: "5000000000";
            readonly Provenance: "2100";
        };
    }[T_2] extends infer T_4 ? T_4 extends {
        readonly Mainnet: {
            readonly Terra: "28.325";
            readonly Terra2: "0.015";
            readonly Osmosis: "0.025";
            readonly Sei: "0.02";
            readonly Cosmoshub: "0.025";
            readonly Kujira: "0.0051";
            readonly Neutron: "0.075";
            readonly Celestia: "0.02";
            readonly Stargaze: "1.1";
            readonly Injective: "700000000";
            readonly Xpla: "1147500000000";
            readonly Evmos: "25000000000";
            readonly Dymension: "5000000000";
            readonly Provenance: "2100";
        };
    }[T_2] ? T_4 extends {
        [key: string]: unknown;
        [key: number]: unknown;
        [key: symbol]: unknown;
    } ? T_4[K1_1 extends bigint ? `bigint(${K1_1})` : K1_1 extends boolean ? `boolean(${K1_1})` : K1_1] : never : never : never) & {
        readonly has: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => boolean;
        readonly get: (args_0: import("@wormhole-foundation/sdk-connect").Widen<({
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) extends infer T_6 ? T_6 extends ({
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] extends infer T_5 ? T_5 extends {
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] ? T_5 extends Object ? keyof T_5 : never : never : never) ? T_6 extends `bigint(${infer V extends bigint})` ? V : T_6 extends `boolean(${infer V_1 extends boolean})` ? V_1 : T_6 : never : never>) => ({
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] extends infer T_7 ? T_7 extends {
            readonly Mainnet: {
                readonly Terra: "28.325";
                readonly Terra2: "0.015";
                readonly Osmosis: "0.025";
                readonly Sei: "0.02";
                readonly Cosmoshub: "0.025";
                readonly Kujira: "0.0051";
                readonly Neutron: "0.075";
                readonly Celestia: "0.02";
                readonly Stargaze: "1.1";
                readonly Injective: "700000000";
                readonly Xpla: "1147500000000";
                readonly Evmos: "25000000000";
                readonly Dymension: "5000000000";
                readonly Provenance: "2100";
            };
        }[T_2] ? T_7 extends Object ? T_7[keyof T_7] : never : never : never) | undefined;
    } : never : never : never : never;
};
//# sourceMappingURL=constants.d.ts.map