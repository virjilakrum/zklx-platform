import type { Coin, EncodeObject } from "@cosmjs/proto-signing";
import type { StdFee } from "@cosmjs/stargate";
import type { Network, UnsignedTransaction } from "@wormhole-foundation/sdk-connect";
import type { CosmwasmChains } from "./types.js";
export interface CosmwasmTransaction {
    fee: StdFee;
    msgs: EncodeObject[];
    memo: string;
}
export declare function computeFee<N extends Network, C extends CosmwasmChains>(network: N, chain: C): StdFee;
export declare function buildExecuteMsg(sender: string, contract: string, msg: Record<string, any>, funds?: Coin[]): EncodeObject;
export declare class CosmwasmUnsignedTransaction<N extends Network, C extends CosmwasmChains> implements UnsignedTransaction<N, C> {
    readonly transaction: CosmwasmTransaction;
    readonly network: N;
    readonly chain: C;
    readonly description: string;
    readonly parallelizable: boolean;
    constructor(transaction: CosmwasmTransaction, network: N, chain: C, description: string, parallelizable?: boolean);
}
//# sourceMappingURL=unsignedTransaction.d.ts.map