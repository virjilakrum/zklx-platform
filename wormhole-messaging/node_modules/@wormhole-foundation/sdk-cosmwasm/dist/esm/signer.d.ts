import type { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import type { Network, SignOnlySigner, SignedTx, Signer, UnsignedTransaction } from "@wormhole-foundation/sdk-connect";
import type { CosmwasmEvmChain } from "./constants.js";
import type { CosmwasmChains } from "./types.js";
export declare function getCosmwasmSigner(rpc: CosmWasmClient, mnemonic: string): Promise<Signer>;
export declare class CosmwasmSigner<N extends Network, C extends CosmwasmChains> implements SignOnlySigner<N, C> {
    private _chain;
    private _signer;
    private _account;
    private _debug?;
    constructor(_chain: C, _signer: SigningCosmWasmClient, _account: string, _debug?: string | undefined);
    chain(): C;
    address(): string;
    sign(tx: UnsignedTransaction[]): Promise<SignedTx[]>;
}
export declare class CosmwasmEvmSigner<N extends Network, C extends CosmwasmEvmChain> implements SignOnlySigner<N, C> {
    private _chain;
    private _chainId;
    private key;
    private prefix;
    private _rpc;
    constructor(_chain: C, _network: Network, _mnemonic: string);
    chain(): C;
    address(): string;
    sign(txns: UnsignedTransaction[]): Promise<SignedTx[]>;
    getSignerData(): Promise<{
        address: string;
        sequence: number;
        accountNumber: number;
    }>;
}
//# sourceMappingURL=signer.d.ts.map