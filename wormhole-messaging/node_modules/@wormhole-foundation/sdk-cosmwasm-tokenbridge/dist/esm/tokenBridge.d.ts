import type { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import type { ChainAddress, ChainsConfig, Contracts, NativeAddress, Network, TokenBridge, TokenId, TxHash } from "@wormhole-foundation/sdk-connect";
import { UniversalAddress } from "@wormhole-foundation/sdk-connect";
import type { AnyCosmwasmAddress, CosmwasmChains, CosmwasmPlatformType } from "@wormhole-foundation/sdk-cosmwasm";
import { CosmwasmUnsignedTransaction } from "@wormhole-foundation/sdk-cosmwasm";
import "@wormhole-foundation/sdk-cosmwasm-core";
export declare class CosmwasmTokenBridge<N extends Network, C extends CosmwasmChains> implements TokenBridge<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly rpc: CosmWasmClient;
    readonly contracts: Contracts;
    private tokenBridge;
    private translator?;
    constructor(network: N, chain: C, rpc: CosmWasmClient, contracts: Contracts);
    static fromRpc<N extends Network>(rpc: CosmWasmClient, config: ChainsConfig<N, CosmwasmPlatformType>): Promise<CosmwasmTokenBridge<N, CosmwasmChains>>;
    isWrappedAsset(token: AnyCosmwasmAddress): Promise<boolean>;
    hasWrappedAsset(token: TokenId): Promise<boolean>;
    getWrappedAsset(token: TokenId): Promise<NativeAddress<C>>;
    getOriginalAsset(token: AnyCosmwasmAddress): Promise<TokenId>;
    getTokenUniversalAddress(token: AnyCosmwasmAddress): Promise<UniversalAddress>;
    isTransferCompleted(vaa: TokenBridge.TransferVAA): Promise<boolean>;
    createAttestation(token: AnyCosmwasmAddress, payer?: AnyCosmwasmAddress): AsyncGenerator<CosmwasmUnsignedTransaction<N, C>>;
    submitAttestation(vaa: TokenBridge.AttestVAA, payer?: AnyCosmwasmAddress): AsyncGenerator<CosmwasmUnsignedTransaction<N, C>>;
    transfer(sender: AnyCosmwasmAddress, recipient: ChainAddress, token: AnyCosmwasmAddress, amount: bigint, payload?: Uint8Array): AsyncGenerator<CosmwasmUnsignedTransaction<N, C>>;
    redeem(sender: AnyCosmwasmAddress, vaa: TokenBridge.TransferVAA, unwrapNative?: boolean): AsyncGenerator<CosmwasmUnsignedTransaction<N, C>>;
    parseTransactionDetails(txid: TxHash): Promise<void>;
    getWrappedNative(): Promise<NativeAddress<C>>;
    private createUnsignedTx;
}
//# sourceMappingURL=tokenBridge.d.ts.map