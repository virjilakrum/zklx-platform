import type { Address, Platform } from "@wormhole-foundation/sdk-connect";
import { UniversalAddress } from "@wormhole-foundation/sdk-connect";
import type { AnyAlgorandAddress } from "./types.js";
export declare const AlgorandZeroAddress = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ";
export declare class AlgorandAddress implements Address {
    static readonly byteSize = 32;
    static readonly platform: Platform;
    readonly type: string;
    readonly address: Uint8Array;
    constructor(address: AnyAlgorandAddress);
    unwrap(): string;
    toString(): string;
    toNative(): this;
    toUint8Array(): Uint8Array;
    toUniversalAddress(): UniversalAddress;
    toBigInt(): bigint;
    toInt(): number;
    equals(other: AlgorandAddress | UniversalAddress): boolean;
    static instanceof(address: any): address is AlgorandAddress;
}
declare module "@wormhole-foundation/sdk-connect" {
    namespace WormholeRegistry {
        interface PlatformToNativeAddressMapping {
            Algorand: AlgorandAddress;
        }
    }
}
//# sourceMappingURL=address.d.ts.map