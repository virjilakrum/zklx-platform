import type { PlatformToChains, UniversalOrNative } from "@wormhole-foundation/sdk-connect";
import type { Transaction } from "algosdk";
/**
 * Runtime value for the Algorand Platform
 */
export declare const _platform: "Algorand";
/**
 * Compile time Type for the Algorand Platform
 */
export type AlgorandPlatformType = typeof _platform;
export type AlgorandChains = PlatformToChains<AlgorandPlatformType>;
export type UniversalOrAlgorand = UniversalOrNative<AlgorandChains>;
export type AnyAlgorandAddress = UniversalOrAlgorand | string | Uint8Array | bigint;
export type LsigSigner = {
    address: string;
    signTxn(txn: Transaction): Promise<Uint8Array>;
};
export type TransactionSignerPair = {
    tx: Transaction;
    signer?: LsigSigner;
};
export type TransactionSet = {
    accounts: string[];
    txs: TransactionSignerPair[];
};
export declare function safeBigIntToNumber(b: bigint): number;
//# sourceMappingURL=types.d.ts.map