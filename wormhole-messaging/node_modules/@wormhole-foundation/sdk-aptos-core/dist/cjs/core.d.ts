import type { ChainId, ChainsConfig, Contracts, Network, UnsignedTransaction, VAA, WormholeCore, WormholeMessageId } from "@wormhole-foundation/sdk-connect";
import type { AnyAptosAddress, AptosChains, AptosPlatformType } from "@wormhole-foundation/sdk-aptos";
import type { AptosClient } from "aptos";
export declare class AptosWormholeCore<N extends Network, C extends AptosChains> implements WormholeCore<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly connection: AptosClient;
    readonly contracts: Contracts;
    readonly chainId: ChainId;
    readonly coreBridge: string;
    constructor(network: N, chain: C, connection: AptosClient, contracts: Contracts);
    getGuardianSet(index: number): Promise<WormholeCore.GuardianSet>;
    getGuardianSetIndex(): Promise<number>;
    getMessageFee(): Promise<bigint>;
    static fromRpc<N extends Network>(connection: AptosClient, config: ChainsConfig<N, AptosPlatformType>): Promise<AptosWormholeCore<N, AptosChains>>;
    publishMessage(sender: AnyAptosAddress, message: string | Uint8Array): AsyncGenerator<UnsignedTransaction<N, C>>;
    verifyMessage(sender: AnyAptosAddress, vaa: VAA): AsyncGenerator<never, void, unknown>;
    parseTransaction(txid: string): Promise<WormholeMessageId[]>;
    parseMessages(txid: string): Promise<VAA<"Uint8Array">[]>;
}
//# sourceMappingURL=core.d.ts.map