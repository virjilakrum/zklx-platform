import type { SuiClient } from "@mysten/sui.js/client";
import type { AccountAddress, ChainId, ChainsConfig, Contracts, Network, PayloadLiteral, VAA, WormholeCore, WormholeMessageId } from "@wormhole-foundation/sdk-connect";
import type { AnySuiAddress, SuiChains, SuiPlatformType, SuiUnsignedTransaction } from "@wormhole-foundation/sdk-sui";
export declare class SuiWormholeCore<N extends Network, C extends SuiChains> implements WormholeCore<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly provider: SuiClient;
    readonly contracts: Contracts;
    readonly chainId: ChainId;
    readonly coreBridgePackageId: string;
    constructor(network: N, chain: C, provider: SuiClient, contracts: Contracts);
    getGuardianSet(index: number): Promise<WormholeCore.GuardianSet>;
    getMessageFee(): Promise<bigint>;
    static fromRpc<N extends Network>(connection: SuiClient, config: ChainsConfig<N, SuiPlatformType>): Promise<SuiWormholeCore<N, "Sui">>;
    verifyMessage(sender: AccountAddress<C>, vaa: VAA<PayloadLiteral>): AsyncGenerator<SuiUnsignedTransaction<N, C>>;
    publishMessage(sender: AnySuiAddress, message: string | Uint8Array): AsyncGenerator<SuiUnsignedTransaction<N, C>>;
    parseTransaction(txid: string): Promise<WormholeMessageId[]>;
    getGuardianSetIndex(): Promise<number>;
    parseMessages(txid: string): Promise<VAA<"Uint8Array">[]>;
}
//# sourceMappingURL=core.d.ts.map