/// <reference types="node" resolution-mode="require"/>
import type { Commitment, Connection, PublicKeyInitData } from '@solana/web3.js';
import { PublicKey } from '@solana/web3.js';
import type { ChainId } from '@wormhole-foundation/sdk-connect';
export declare function deriveWrappedMintKey(tokenBridgeProgramId: PublicKeyInitData, tokenChain: number | ChainId, tokenAddress: Buffer | Uint8Array): PublicKey;
export declare function deriveWrappedMetaKey(tokenBridgeProgramId: PublicKeyInitData, mint: PublicKeyInitData): PublicKey;
export declare function getWrappedMeta(connection: Connection, tokenBridgeProgramId: PublicKeyInitData, mint: PublicKeyInitData, commitment?: Commitment): Promise<WrappedMeta>;
export declare class WrappedMeta {
    chain: number;
    tokenAddress: Buffer;
    originalDecimals: number;
    lastUpdatedSequence?: bigint;
    constructor(chain: number, tokenAddress: Buffer, originalDecimals: number, lastUpdatedSequence?: bigint);
    static deserialize(data: Buffer): WrappedMeta;
}
//# sourceMappingURL=wrapped.d.ts.map