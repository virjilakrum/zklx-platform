import type { AccountAddress, AutomaticTokenBridge, Chain, ChainAddress, ChainId, ChainsConfig, Contracts, Network, Platform, TokenAddress } from '@wormhole-foundation/sdk-connect';
import type { SolanaChains } from '@wormhole-foundation/sdk-solana';
import { SolanaUnsignedTransaction } from '@wormhole-foundation/sdk-solana';
import type { Program } from '@coral-xyz/anchor';
import type { Connection } from '@solana/web3.js';
import { PublicKey } from '@solana/web3.js';
import type { TokenBridgeRelayer as TokenBridgeRelayerContract } from './automaticTokenBridgeType.js';
import '@wormhole-foundation/sdk-solana-core';
export declare class SolanaAutomaticTokenBridge<N extends Network, C extends SolanaChains> implements AutomaticTokenBridge<N, C> {
    readonly network: N;
    readonly chain: C;
    readonly connection: Connection;
    readonly contracts: Contracts;
    readonly chainId: ChainId;
    readonly coreBridgeProgramId: PublicKey;
    readonly tokenBridgeProgramId: PublicKey;
    readonly tokenBridgeRelayer: Program<TokenBridgeRelayerContract>;
    constructor(network: N, chain: C, connection: Connection, contracts: Contracts);
    static fromRpc<N extends Network>(connection: Connection, config: ChainsConfig<N, Platform>): Promise<SolanaAutomaticTokenBridge<N, SolanaChains>>;
    transfer(sender: AccountAddress<C>, recipient: ChainAddress, token: TokenAddress<C>, amount: bigint, nativeGas?: bigint | undefined): AsyncGenerator<SolanaUnsignedTransaction<N, C>, void, unknown>;
    redeem(sender: AccountAddress<C>, vaa: AutomaticTokenBridge.VAA): AsyncGenerator<SolanaUnsignedTransaction<N, C>, void, unknown>;
    getRelayerFee(destination: Chain, token: TokenAddress<C>): Promise<bigint>;
    maxSwapAmount(token: TokenAddress<C>): Promise<bigint>;
    nativeTokenAmount(token: TokenAddress<C>, amount: bigint): Promise<bigint>;
    isRegisteredToken(token: TokenAddress<C>): Promise<boolean>;
    private mintAddress;
    getRegisteredTokens(): Promise<(import("@wormhole-foundation/sdk-connect").ChainToPlatform<C> extends infer T ? T extends import("@wormhole-foundation/sdk-connect").ChainToPlatform<C> ? T extends "Solana" ? import("@wormhole-foundation/sdk-connect").WormholeRegistry.PlatformToNativeAddressMapping[T] : never : never : never)[]>;
    private calculateNativeSwapRate;
    private getForeignContract;
    private getRegisteredToken;
    private getRedeemerConfig;
    private createUnsignedTx;
}
//# sourceMappingURL=automaticTokenBridge.d.ts.map