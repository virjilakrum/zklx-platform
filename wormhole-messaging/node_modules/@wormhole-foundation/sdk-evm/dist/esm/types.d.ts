import type { PlatformToChains, UniversalOrNative } from '@wormhole-foundation/sdk-connect';
import type { TransactionRequest } from 'ethers';
export declare const unusedNonce = 0;
export declare const unusedArbiterFee = 0n;
/**
 * Runtime value for the EVM Platform
 * */
export declare const _platform: 'Evm';
/**
 * Type for the EVM Platform
 */
export type EvmPlatformType = typeof _platform;
/**
 * Type representing a union of the EVM Chains
 */
export type EvmChains = PlatformToChains<EvmPlatformType>;
export type UniversalOrEvm = UniversalOrNative<EvmChains>;
export type AnyEvmAddress = UniversalOrEvm | string | Uint8Array;
export declare const addFrom: (txReq: TransactionRequest, from: string) => {
    from: string;
    type?: number | null | undefined;
    to?: import("ethers").AddressLike | null | undefined;
    nonce?: number | null | undefined;
    gasLimit?: import("ethers").BigNumberish | null | undefined;
    gasPrice?: import("ethers").BigNumberish | null | undefined;
    maxPriorityFeePerGas?: import("ethers").BigNumberish | null | undefined;
    maxFeePerGas?: import("ethers").BigNumberish | null | undefined;
    data?: string | null | undefined;
    value?: import("ethers").BigNumberish | null | undefined;
    chainId?: import("ethers").BigNumberish | null | undefined;
    accessList?: import("ethers").AccessListish | null | undefined;
    customData?: any;
    blockTag?: import("ethers").BlockTag | undefined;
    enableCcipRead?: boolean | undefined;
    blobVersionedHashes?: string[] | null | undefined;
    maxFeePerBlobGas?: import("ethers").BigNumberish | null | undefined;
    blobs?: import("ethers").BlobLike[] | null | undefined;
    kzg?: import("ethers").KzgLibrary | null | undefined;
};
export declare const addChainId: (txReq: TransactionRequest, chainId: bigint) => {
    chainId: bigint;
    type?: number | null | undefined;
    to?: import("ethers").AddressLike | null | undefined;
    from?: import("ethers").AddressLike | null | undefined;
    nonce?: number | null | undefined;
    gasLimit?: import("ethers").BigNumberish | null | undefined;
    gasPrice?: import("ethers").BigNumberish | null | undefined;
    maxPriorityFeePerGas?: import("ethers").BigNumberish | null | undefined;
    maxFeePerGas?: import("ethers").BigNumberish | null | undefined;
    data?: string | null | undefined;
    value?: import("ethers").BigNumberish | null | undefined;
    accessList?: import("ethers").AccessListish | null | undefined;
    customData?: any;
    blockTag?: import("ethers").BlockTag | undefined;
    enableCcipRead?: boolean | undefined;
    blobVersionedHashes?: string[] | null | undefined;
    maxFeePerBlobGas?: import("ethers").BigNumberish | null | undefined;
    blobs?: import("ethers").BlobLike[] | null | undefined;
    kzg?: import("ethers").KzgLibrary | null | undefined;
};
export declare const addValue: (txReq: TransactionRequest, value: bigint) => {
    value: bigint;
    type?: number | null | undefined;
    to?: import("ethers").AddressLike | null | undefined;
    from?: import("ethers").AddressLike | null | undefined;
    nonce?: number | null | undefined;
    gasLimit?: import("ethers").BigNumberish | null | undefined;
    gasPrice?: import("ethers").BigNumberish | null | undefined;
    maxPriorityFeePerGas?: import("ethers").BigNumberish | null | undefined;
    maxFeePerGas?: import("ethers").BigNumberish | null | undefined;
    data?: string | null | undefined;
    chainId?: import("ethers").BigNumberish | null | undefined;
    accessList?: import("ethers").AccessListish | null | undefined;
    customData?: any;
    blockTag?: import("ethers").BlockTag | undefined;
    enableCcipRead?: boolean | undefined;
    blobVersionedHashes?: string[] | null | undefined;
    maxFeePerBlobGas?: import("ethers").BigNumberish | null | undefined;
    blobs?: import("ethers").BlobLike[] | null | undefined;
    kzg?: import("ethers").KzgLibrary | null | undefined;
};
//# sourceMappingURL=types.d.ts.map