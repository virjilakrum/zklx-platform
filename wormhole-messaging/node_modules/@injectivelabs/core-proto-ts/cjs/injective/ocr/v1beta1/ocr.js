"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventConfigSet = exports.EventNewTransmission = exports.EventTransmitted = exports.EventNewRound = exports.EventAnswerUpdated = exports.EventOraclePaid = exports.ReportToSign = exports.Report = exports.EpochAndRound = exports.Transmission = exports.Payee = exports.GasReimbursements = exports.OracleObservationsCounts = exports.SetBatchConfigProposal = exports.FeedProperties = exports.SetConfigProposal = exports.ContractConfig = exports.ModuleParams = exports.FeedConfigInfo = exports.FeedConfig = exports.Params = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const timestamp_1 = require("../../../google/protobuf/timestamp");
function createBaseParams() {
    return { linkDenom: "", payoutBlockInterval: "0", moduleAdmin: "" };
}
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.linkDenom !== "") {
            writer.uint32(10).string(message.linkDenom);
        }
        if (message.payoutBlockInterval !== "0") {
            writer.uint32(16).uint64(message.payoutBlockInterval);
        }
        if (message.moduleAdmin !== "") {
            writer.uint32(26).string(message.moduleAdmin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.linkDenom = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.payoutBlockInterval = longToString(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.moduleAdmin = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            linkDenom: isSet(object.linkDenom) ? globalThis.String(object.linkDenom) : "",
            payoutBlockInterval: isSet(object.payoutBlockInterval) ? globalThis.String(object.payoutBlockInterval) : "0",
            moduleAdmin: isSet(object.moduleAdmin) ? globalThis.String(object.moduleAdmin) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.linkDenom !== "") {
            obj.linkDenom = message.linkDenom;
        }
        if (message.payoutBlockInterval !== "0") {
            obj.payoutBlockInterval = message.payoutBlockInterval;
        }
        if (message.moduleAdmin !== "") {
            obj.moduleAdmin = message.moduleAdmin;
        }
        return obj;
    },
    create(base) {
        return exports.Params.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseParams();
        message.linkDenom = (_a = object.linkDenom) !== null && _a !== void 0 ? _a : "";
        message.payoutBlockInterval = (_b = object.payoutBlockInterval) !== null && _b !== void 0 ? _b : "0";
        message.moduleAdmin = (_c = object.moduleAdmin) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseFeedConfig() {
    return {
        signers: [],
        transmitters: [],
        f: 0,
        onchainConfig: new Uint8Array(0),
        offchainConfigVersion: "0",
        offchainConfig: new Uint8Array(0),
        moduleParams: undefined,
    };
}
exports.FeedConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.signers) {
            writer.uint32(10).string(v);
        }
        for (const v of message.transmitters) {
            writer.uint32(18).string(v);
        }
        if (message.f !== 0) {
            writer.uint32(24).uint32(message.f);
        }
        if (message.onchainConfig.length !== 0) {
            writer.uint32(34).bytes(message.onchainConfig);
        }
        if (message.offchainConfigVersion !== "0") {
            writer.uint32(40).uint64(message.offchainConfigVersion);
        }
        if (message.offchainConfig.length !== 0) {
            writer.uint32(50).bytes(message.offchainConfig);
        }
        if (message.moduleParams !== undefined) {
            exports.ModuleParams.encode(message.moduleParams, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeedConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.signers.push(reader.string());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.transmitters.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.f = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.onchainConfig = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.offchainConfigVersion = longToString(reader.uint64());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.offchainConfig = reader.bytes();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.moduleParams = exports.ModuleParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            signers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.signers) ? object.signers.map((e) => globalThis.String(e)) : [],
            transmitters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.transmitters)
                ? object.transmitters.map((e) => globalThis.String(e))
                : [],
            f: isSet(object.f) ? globalThis.Number(object.f) : 0,
            onchainConfig: isSet(object.onchainConfig) ? bytesFromBase64(object.onchainConfig) : new Uint8Array(0),
            offchainConfigVersion: isSet(object.offchainConfigVersion)
                ? globalThis.String(object.offchainConfigVersion)
                : "0",
            offchainConfig: isSet(object.offchainConfig) ? bytesFromBase64(object.offchainConfig) : new Uint8Array(0),
            moduleParams: isSet(object.moduleParams) ? exports.ModuleParams.fromJSON(object.moduleParams) : undefined,
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if ((_a = message.signers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.signers = message.signers;
        }
        if ((_b = message.transmitters) === null || _b === void 0 ? void 0 : _b.length) {
            obj.transmitters = message.transmitters;
        }
        if (message.f !== 0) {
            obj.f = Math.round(message.f);
        }
        if (message.onchainConfig.length !== 0) {
            obj.onchainConfig = base64FromBytes(message.onchainConfig);
        }
        if (message.offchainConfigVersion !== "0") {
            obj.offchainConfigVersion = message.offchainConfigVersion;
        }
        if (message.offchainConfig.length !== 0) {
            obj.offchainConfig = base64FromBytes(message.offchainConfig);
        }
        if (message.moduleParams !== undefined) {
            obj.moduleParams = exports.ModuleParams.toJSON(message.moduleParams);
        }
        return obj;
    },
    create(base) {
        return exports.FeedConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseFeedConfig();
        message.signers = ((_a = object.signers) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.transmitters = ((_b = object.transmitters) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.f = (_c = object.f) !== null && _c !== void 0 ? _c : 0;
        message.onchainConfig = (_d = object.onchainConfig) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.offchainConfigVersion = (_e = object.offchainConfigVersion) !== null && _e !== void 0 ? _e : "0";
        message.offchainConfig = (_f = object.offchainConfig) !== null && _f !== void 0 ? _f : new Uint8Array(0);
        message.moduleParams = (object.moduleParams !== undefined && object.moduleParams !== null)
            ? exports.ModuleParams.fromPartial(object.moduleParams)
            : undefined;
        return message;
    },
};
function createBaseFeedConfigInfo() {
    return { latestConfigDigest: new Uint8Array(0), f: 0, n: 0, configCount: "0", latestConfigBlockNumber: "0" };
}
exports.FeedConfigInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.latestConfigDigest.length !== 0) {
            writer.uint32(10).bytes(message.latestConfigDigest);
        }
        if (message.f !== 0) {
            writer.uint32(16).uint32(message.f);
        }
        if (message.n !== 0) {
            writer.uint32(24).uint32(message.n);
        }
        if (message.configCount !== "0") {
            writer.uint32(32).uint64(message.configCount);
        }
        if (message.latestConfigBlockNumber !== "0") {
            writer.uint32(40).int64(message.latestConfigBlockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeedConfigInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.latestConfigDigest = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.f = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.n = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.configCount = longToString(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.latestConfigBlockNumber = longToString(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            latestConfigDigest: isSet(object.latestConfigDigest)
                ? bytesFromBase64(object.latestConfigDigest)
                : new Uint8Array(0),
            f: isSet(object.f) ? globalThis.Number(object.f) : 0,
            n: isSet(object.n) ? globalThis.Number(object.n) : 0,
            configCount: isSet(object.configCount) ? globalThis.String(object.configCount) : "0",
            latestConfigBlockNumber: isSet(object.latestConfigBlockNumber)
                ? globalThis.String(object.latestConfigBlockNumber)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.latestConfigDigest.length !== 0) {
            obj.latestConfigDigest = base64FromBytes(message.latestConfigDigest);
        }
        if (message.f !== 0) {
            obj.f = Math.round(message.f);
        }
        if (message.n !== 0) {
            obj.n = Math.round(message.n);
        }
        if (message.configCount !== "0") {
            obj.configCount = message.configCount;
        }
        if (message.latestConfigBlockNumber !== "0") {
            obj.latestConfigBlockNumber = message.latestConfigBlockNumber;
        }
        return obj;
    },
    create(base) {
        return exports.FeedConfigInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseFeedConfigInfo();
        message.latestConfigDigest = (_a = object.latestConfigDigest) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.f = (_b = object.f) !== null && _b !== void 0 ? _b : 0;
        message.n = (_c = object.n) !== null && _c !== void 0 ? _c : 0;
        message.configCount = (_d = object.configCount) !== null && _d !== void 0 ? _d : "0";
        message.latestConfigBlockNumber = (_e = object.latestConfigBlockNumber) !== null && _e !== void 0 ? _e : "0";
        return message;
    },
};
function createBaseModuleParams() {
    return {
        feedId: "",
        minAnswer: "",
        maxAnswer: "",
        linkPerObservation: "",
        linkPerTransmission: "",
        linkDenom: "",
        uniqueReports: false,
        description: "",
        feedAdmin: "",
        billingAdmin: "",
    };
}
exports.ModuleParams = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.feedId !== "") {
            writer.uint32(10).string(message.feedId);
        }
        if (message.minAnswer !== "") {
            writer.uint32(18).string(message.minAnswer);
        }
        if (message.maxAnswer !== "") {
            writer.uint32(26).string(message.maxAnswer);
        }
        if (message.linkPerObservation !== "") {
            writer.uint32(34).string(message.linkPerObservation);
        }
        if (message.linkPerTransmission !== "") {
            writer.uint32(42).string(message.linkPerTransmission);
        }
        if (message.linkDenom !== "") {
            writer.uint32(50).string(message.linkDenom);
        }
        if (message.uniqueReports === true) {
            writer.uint32(56).bool(message.uniqueReports);
        }
        if (message.description !== "") {
            writer.uint32(66).string(message.description);
        }
        if (message.feedAdmin !== "") {
            writer.uint32(74).string(message.feedAdmin);
        }
        if (message.billingAdmin !== "") {
            writer.uint32(82).string(message.billingAdmin);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseModuleParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.feedId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.minAnswer = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.maxAnswer = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.linkPerObservation = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.linkPerTransmission = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.linkDenom = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.uniqueReports = reader.bool();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.feedAdmin = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.billingAdmin = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            feedId: isSet(object.feedId) ? globalThis.String(object.feedId) : "",
            minAnswer: isSet(object.minAnswer) ? globalThis.String(object.minAnswer) : "",
            maxAnswer: isSet(object.maxAnswer) ? globalThis.String(object.maxAnswer) : "",
            linkPerObservation: isSet(object.linkPerObservation) ? globalThis.String(object.linkPerObservation) : "",
            linkPerTransmission: isSet(object.linkPerTransmission) ? globalThis.String(object.linkPerTransmission) : "",
            linkDenom: isSet(object.linkDenom) ? globalThis.String(object.linkDenom) : "",
            uniqueReports: isSet(object.uniqueReports) ? globalThis.Boolean(object.uniqueReports) : false,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            feedAdmin: isSet(object.feedAdmin) ? globalThis.String(object.feedAdmin) : "",
            billingAdmin: isSet(object.billingAdmin) ? globalThis.String(object.billingAdmin) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.feedId !== "") {
            obj.feedId = message.feedId;
        }
        if (message.minAnswer !== "") {
            obj.minAnswer = message.minAnswer;
        }
        if (message.maxAnswer !== "") {
            obj.maxAnswer = message.maxAnswer;
        }
        if (message.linkPerObservation !== "") {
            obj.linkPerObservation = message.linkPerObservation;
        }
        if (message.linkPerTransmission !== "") {
            obj.linkPerTransmission = message.linkPerTransmission;
        }
        if (message.linkDenom !== "") {
            obj.linkDenom = message.linkDenom;
        }
        if (message.uniqueReports === true) {
            obj.uniqueReports = message.uniqueReports;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.feedAdmin !== "") {
            obj.feedAdmin = message.feedAdmin;
        }
        if (message.billingAdmin !== "") {
            obj.billingAdmin = message.billingAdmin;
        }
        return obj;
    },
    create(base) {
        return exports.ModuleParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseModuleParams();
        message.feedId = (_a = object.feedId) !== null && _a !== void 0 ? _a : "";
        message.minAnswer = (_b = object.minAnswer) !== null && _b !== void 0 ? _b : "";
        message.maxAnswer = (_c = object.maxAnswer) !== null && _c !== void 0 ? _c : "";
        message.linkPerObservation = (_d = object.linkPerObservation) !== null && _d !== void 0 ? _d : "";
        message.linkPerTransmission = (_e = object.linkPerTransmission) !== null && _e !== void 0 ? _e : "";
        message.linkDenom = (_f = object.linkDenom) !== null && _f !== void 0 ? _f : "";
        message.uniqueReports = (_g = object.uniqueReports) !== null && _g !== void 0 ? _g : false;
        message.description = (_h = object.description) !== null && _h !== void 0 ? _h : "";
        message.feedAdmin = (_j = object.feedAdmin) !== null && _j !== void 0 ? _j : "";
        message.billingAdmin = (_k = object.billingAdmin) !== null && _k !== void 0 ? _k : "";
        return message;
    },
};
function createBaseContractConfig() {
    return {
        configCount: "0",
        signers: [],
        transmitters: [],
        f: 0,
        onchainConfig: new Uint8Array(0),
        offchainConfigVersion: "0",
        offchainConfig: new Uint8Array(0),
    };
}
exports.ContractConfig = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.configCount !== "0") {
            writer.uint32(8).uint64(message.configCount);
        }
        for (const v of message.signers) {
            writer.uint32(18).string(v);
        }
        for (const v of message.transmitters) {
            writer.uint32(26).string(v);
        }
        if (message.f !== 0) {
            writer.uint32(32).uint32(message.f);
        }
        if (message.onchainConfig.length !== 0) {
            writer.uint32(42).bytes(message.onchainConfig);
        }
        if (message.offchainConfigVersion !== "0") {
            writer.uint32(48).uint64(message.offchainConfigVersion);
        }
        if (message.offchainConfig.length !== 0) {
            writer.uint32(58).bytes(message.offchainConfig);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContractConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.configCount = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.signers.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.transmitters.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.f = reader.uint32();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.onchainConfig = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.offchainConfigVersion = longToString(reader.uint64());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.offchainConfig = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            configCount: isSet(object.configCount) ? globalThis.String(object.configCount) : "0",
            signers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.signers) ? object.signers.map((e) => globalThis.String(e)) : [],
            transmitters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.transmitters)
                ? object.transmitters.map((e) => globalThis.String(e))
                : [],
            f: isSet(object.f) ? globalThis.Number(object.f) : 0,
            onchainConfig: isSet(object.onchainConfig) ? bytesFromBase64(object.onchainConfig) : new Uint8Array(0),
            offchainConfigVersion: isSet(object.offchainConfigVersion)
                ? globalThis.String(object.offchainConfigVersion)
                : "0",
            offchainConfig: isSet(object.offchainConfig) ? bytesFromBase64(object.offchainConfig) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.configCount !== "0") {
            obj.configCount = message.configCount;
        }
        if ((_a = message.signers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.signers = message.signers;
        }
        if ((_b = message.transmitters) === null || _b === void 0 ? void 0 : _b.length) {
            obj.transmitters = message.transmitters;
        }
        if (message.f !== 0) {
            obj.f = Math.round(message.f);
        }
        if (message.onchainConfig.length !== 0) {
            obj.onchainConfig = base64FromBytes(message.onchainConfig);
        }
        if (message.offchainConfigVersion !== "0") {
            obj.offchainConfigVersion = message.offchainConfigVersion;
        }
        if (message.offchainConfig.length !== 0) {
            obj.offchainConfig = base64FromBytes(message.offchainConfig);
        }
        return obj;
    },
    create(base) {
        return exports.ContractConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseContractConfig();
        message.configCount = (_a = object.configCount) !== null && _a !== void 0 ? _a : "0";
        message.signers = ((_b = object.signers) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        message.transmitters = ((_c = object.transmitters) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.f = (_d = object.f) !== null && _d !== void 0 ? _d : 0;
        message.onchainConfig = (_e = object.onchainConfig) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.offchainConfigVersion = (_f = object.offchainConfigVersion) !== null && _f !== void 0 ? _f : "0";
        message.offchainConfig = (_g = object.offchainConfig) !== null && _g !== void 0 ? _g : new Uint8Array(0);
        return message;
    },
};
function createBaseSetConfigProposal() {
    return { title: "", description: "", config: undefined };
}
exports.SetConfigProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.config !== undefined) {
            exports.FeedConfig.encode(message.config, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetConfigProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.config = exports.FeedConfig.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            config: isSet(object.config) ? exports.FeedConfig.fromJSON(object.config) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.config !== undefined) {
            obj.config = exports.FeedConfig.toJSON(message.config);
        }
        return obj;
    },
    create(base) {
        return exports.SetConfigProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseSetConfigProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.config = (object.config !== undefined && object.config !== null)
            ? exports.FeedConfig.fromPartial(object.config)
            : undefined;
        return message;
    },
};
function createBaseFeedProperties() {
    return {
        feedId: "",
        f: 0,
        onchainConfig: new Uint8Array(0),
        offchainConfigVersion: "0",
        offchainConfig: new Uint8Array(0),
        minAnswer: "",
        maxAnswer: "",
        linkPerObservation: "",
        linkPerTransmission: "",
        uniqueReports: false,
        description: "",
    };
}
exports.FeedProperties = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.feedId !== "") {
            writer.uint32(10).string(message.feedId);
        }
        if (message.f !== 0) {
            writer.uint32(16).uint32(message.f);
        }
        if (message.onchainConfig.length !== 0) {
            writer.uint32(26).bytes(message.onchainConfig);
        }
        if (message.offchainConfigVersion !== "0") {
            writer.uint32(32).uint64(message.offchainConfigVersion);
        }
        if (message.offchainConfig.length !== 0) {
            writer.uint32(42).bytes(message.offchainConfig);
        }
        if (message.minAnswer !== "") {
            writer.uint32(50).string(message.minAnswer);
        }
        if (message.maxAnswer !== "") {
            writer.uint32(58).string(message.maxAnswer);
        }
        if (message.linkPerObservation !== "") {
            writer.uint32(66).string(message.linkPerObservation);
        }
        if (message.linkPerTransmission !== "") {
            writer.uint32(74).string(message.linkPerTransmission);
        }
        if (message.uniqueReports === true) {
            writer.uint32(80).bool(message.uniqueReports);
        }
        if (message.description !== "") {
            writer.uint32(90).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeedProperties();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.feedId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.f = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.onchainConfig = reader.bytes();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.offchainConfigVersion = longToString(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.offchainConfig = reader.bytes();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.minAnswer = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.maxAnswer = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.linkPerObservation = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.linkPerTransmission = reader.string();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.uniqueReports = reader.bool();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            feedId: isSet(object.feedId) ? globalThis.String(object.feedId) : "",
            f: isSet(object.f) ? globalThis.Number(object.f) : 0,
            onchainConfig: isSet(object.onchainConfig) ? bytesFromBase64(object.onchainConfig) : new Uint8Array(0),
            offchainConfigVersion: isSet(object.offchainConfigVersion)
                ? globalThis.String(object.offchainConfigVersion)
                : "0",
            offchainConfig: isSet(object.offchainConfig) ? bytesFromBase64(object.offchainConfig) : new Uint8Array(0),
            minAnswer: isSet(object.minAnswer) ? globalThis.String(object.minAnswer) : "",
            maxAnswer: isSet(object.maxAnswer) ? globalThis.String(object.maxAnswer) : "",
            linkPerObservation: isSet(object.linkPerObservation) ? globalThis.String(object.linkPerObservation) : "",
            linkPerTransmission: isSet(object.linkPerTransmission) ? globalThis.String(object.linkPerTransmission) : "",
            uniqueReports: isSet(object.uniqueReports) ? globalThis.Boolean(object.uniqueReports) : false,
            description: isSet(object.description) ? globalThis.String(object.description) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.feedId !== "") {
            obj.feedId = message.feedId;
        }
        if (message.f !== 0) {
            obj.f = Math.round(message.f);
        }
        if (message.onchainConfig.length !== 0) {
            obj.onchainConfig = base64FromBytes(message.onchainConfig);
        }
        if (message.offchainConfigVersion !== "0") {
            obj.offchainConfigVersion = message.offchainConfigVersion;
        }
        if (message.offchainConfig.length !== 0) {
            obj.offchainConfig = base64FromBytes(message.offchainConfig);
        }
        if (message.minAnswer !== "") {
            obj.minAnswer = message.minAnswer;
        }
        if (message.maxAnswer !== "") {
            obj.maxAnswer = message.maxAnswer;
        }
        if (message.linkPerObservation !== "") {
            obj.linkPerObservation = message.linkPerObservation;
        }
        if (message.linkPerTransmission !== "") {
            obj.linkPerTransmission = message.linkPerTransmission;
        }
        if (message.uniqueReports === true) {
            obj.uniqueReports = message.uniqueReports;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        return obj;
    },
    create(base) {
        return exports.FeedProperties.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const message = createBaseFeedProperties();
        message.feedId = (_a = object.feedId) !== null && _a !== void 0 ? _a : "";
        message.f = (_b = object.f) !== null && _b !== void 0 ? _b : 0;
        message.onchainConfig = (_c = object.onchainConfig) !== null && _c !== void 0 ? _c : new Uint8Array(0);
        message.offchainConfigVersion = (_d = object.offchainConfigVersion) !== null && _d !== void 0 ? _d : "0";
        message.offchainConfig = (_e = object.offchainConfig) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        message.minAnswer = (_f = object.minAnswer) !== null && _f !== void 0 ? _f : "";
        message.maxAnswer = (_g = object.maxAnswer) !== null && _g !== void 0 ? _g : "";
        message.linkPerObservation = (_h = object.linkPerObservation) !== null && _h !== void 0 ? _h : "";
        message.linkPerTransmission = (_j = object.linkPerTransmission) !== null && _j !== void 0 ? _j : "";
        message.uniqueReports = (_k = object.uniqueReports) !== null && _k !== void 0 ? _k : false;
        message.description = (_l = object.description) !== null && _l !== void 0 ? _l : "";
        return message;
    },
};
function createBaseSetBatchConfigProposal() {
    return { title: "", description: "", signers: [], transmitters: [], linkDenom: "", feedProperties: [] };
}
exports.SetBatchConfigProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.signers) {
            writer.uint32(26).string(v);
        }
        for (const v of message.transmitters) {
            writer.uint32(34).string(v);
        }
        if (message.linkDenom !== "") {
            writer.uint32(42).string(message.linkDenom);
        }
        for (const v of message.feedProperties) {
            exports.FeedProperties.encode(v, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSetBatchConfigProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.signers.push(reader.string());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.transmitters.push(reader.string());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.linkDenom = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.feedProperties.push(exports.FeedProperties.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            signers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.signers) ? object.signers.map((e) => globalThis.String(e)) : [],
            transmitters: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.transmitters)
                ? object.transmitters.map((e) => globalThis.String(e))
                : [],
            linkDenom: isSet(object.linkDenom) ? globalThis.String(object.linkDenom) : "",
            feedProperties: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.feedProperties)
                ? object.feedProperties.map((e) => exports.FeedProperties.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.signers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.signers = message.signers;
        }
        if ((_b = message.transmitters) === null || _b === void 0 ? void 0 : _b.length) {
            obj.transmitters = message.transmitters;
        }
        if (message.linkDenom !== "") {
            obj.linkDenom = message.linkDenom;
        }
        if ((_c = message.feedProperties) === null || _c === void 0 ? void 0 : _c.length) {
            obj.feedProperties = message.feedProperties.map((e) => exports.FeedProperties.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.SetBatchConfigProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBaseSetBatchConfigProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.signers = ((_c = object.signers) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        message.transmitters = ((_d = object.transmitters) === null || _d === void 0 ? void 0 : _d.map((e) => e)) || [];
        message.linkDenom = (_e = object.linkDenom) !== null && _e !== void 0 ? _e : "";
        message.feedProperties = ((_f = object.feedProperties) === null || _f === void 0 ? void 0 : _f.map((e) => exports.FeedProperties.fromPartial(e))) || [];
        return message;
    },
};
function createBaseOracleObservationsCounts() {
    return { counts: [] };
}
exports.OracleObservationsCounts = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.counts) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOracleObservationsCounts();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.counts.push(reader.uint32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.counts.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            counts: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.counts) ? object.counts.map((e) => globalThis.Number(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.counts) === null || _a === void 0 ? void 0 : _a.length) {
            obj.counts = message.counts.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.OracleObservationsCounts.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseOracleObservationsCounts();
        message.counts = ((_a = object.counts) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseGasReimbursements() {
    return { reimbursements: [] };
}
exports.GasReimbursements = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.reimbursements) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGasReimbursements();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reimbursements.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            reimbursements: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.reimbursements)
                ? object.reimbursements.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.reimbursements) === null || _a === void 0 ? void 0 : _a.length) {
            obj.reimbursements = message.reimbursements.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.GasReimbursements.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGasReimbursements();
        message.reimbursements = ((_a = object.reimbursements) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBasePayee() {
    return { transmitterAddr: "", paymentAddr: "" };
}
exports.Payee = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.transmitterAddr !== "") {
            writer.uint32(10).string(message.transmitterAddr);
        }
        if (message.paymentAddr !== "") {
            writer.uint32(18).string(message.paymentAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePayee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.transmitterAddr = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.paymentAddr = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transmitterAddr: isSet(object.transmitterAddr) ? globalThis.String(object.transmitterAddr) : "",
            paymentAddr: isSet(object.paymentAddr) ? globalThis.String(object.paymentAddr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.transmitterAddr !== "") {
            obj.transmitterAddr = message.transmitterAddr;
        }
        if (message.paymentAddr !== "") {
            obj.paymentAddr = message.paymentAddr;
        }
        return obj;
    },
    create(base) {
        return exports.Payee.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBasePayee();
        message.transmitterAddr = (_a = object.transmitterAddr) !== null && _a !== void 0 ? _a : "";
        message.paymentAddr = (_b = object.paymentAddr) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTransmission() {
    return { answer: "", observationsTimestamp: "0", transmissionTimestamp: "0" };
}
exports.Transmission = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.answer !== "") {
            writer.uint32(10).string(message.answer);
        }
        if (message.observationsTimestamp !== "0") {
            writer.uint32(16).int64(message.observationsTimestamp);
        }
        if (message.transmissionTimestamp !== "0") {
            writer.uint32(24).int64(message.transmissionTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTransmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.answer = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.observationsTimestamp = longToString(reader.int64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.transmissionTimestamp = longToString(reader.int64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            answer: isSet(object.answer) ? globalThis.String(object.answer) : "",
            observationsTimestamp: isSet(object.observationsTimestamp)
                ? globalThis.String(object.observationsTimestamp)
                : "0",
            transmissionTimestamp: isSet(object.transmissionTimestamp)
                ? globalThis.String(object.transmissionTimestamp)
                : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.answer !== "") {
            obj.answer = message.answer;
        }
        if (message.observationsTimestamp !== "0") {
            obj.observationsTimestamp = message.observationsTimestamp;
        }
        if (message.transmissionTimestamp !== "0") {
            obj.transmissionTimestamp = message.transmissionTimestamp;
        }
        return obj;
    },
    create(base) {
        return exports.Transmission.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTransmission();
        message.answer = (_a = object.answer) !== null && _a !== void 0 ? _a : "";
        message.observationsTimestamp = (_b = object.observationsTimestamp) !== null && _b !== void 0 ? _b : "0";
        message.transmissionTimestamp = (_c = object.transmissionTimestamp) !== null && _c !== void 0 ? _c : "0";
        return message;
    },
};
function createBaseEpochAndRound() {
    return { epoch: "0", round: "0" };
}
exports.EpochAndRound = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.epoch !== "0") {
            writer.uint32(8).uint64(message.epoch);
        }
        if (message.round !== "0") {
            writer.uint32(16).uint64(message.round);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEpochAndRound();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.epoch = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.round = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            epoch: isSet(object.epoch) ? globalThis.String(object.epoch) : "0",
            round: isSet(object.round) ? globalThis.String(object.round) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.epoch !== "0") {
            obj.epoch = message.epoch;
        }
        if (message.round !== "0") {
            obj.round = message.round;
        }
        return obj;
    },
    create(base) {
        return exports.EpochAndRound.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEpochAndRound();
        message.epoch = (_a = object.epoch) !== null && _a !== void 0 ? _a : "0";
        message.round = (_b = object.round) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseReport() {
    return { observationsTimestamp: "0", observers: new Uint8Array(0), observations: [] };
}
exports.Report = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.observationsTimestamp !== "0") {
            writer.uint32(8).int64(message.observationsTimestamp);
        }
        if (message.observers.length !== 0) {
            writer.uint32(18).bytes(message.observers);
        }
        for (const v of message.observations) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReport();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.observationsTimestamp = longToString(reader.int64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.observers = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.observations.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            observationsTimestamp: isSet(object.observationsTimestamp)
                ? globalThis.String(object.observationsTimestamp)
                : "0",
            observers: isSet(object.observers) ? bytesFromBase64(object.observers) : new Uint8Array(0),
            observations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.observations)
                ? object.observations.map((e) => globalThis.String(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.observationsTimestamp !== "0") {
            obj.observationsTimestamp = message.observationsTimestamp;
        }
        if (message.observers.length !== 0) {
            obj.observers = base64FromBytes(message.observers);
        }
        if ((_a = message.observations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.observations = message.observations;
        }
        return obj;
    },
    create(base) {
        return exports.Report.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseReport();
        message.observationsTimestamp = (_a = object.observationsTimestamp) !== null && _a !== void 0 ? _a : "0";
        message.observers = (_b = object.observers) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.observations = ((_c = object.observations) === null || _c === void 0 ? void 0 : _c.map((e) => e)) || [];
        return message;
    },
};
function createBaseReportToSign() {
    return {
        configDigest: new Uint8Array(0),
        epoch: "0",
        round: "0",
        extraHash: new Uint8Array(0),
        report: new Uint8Array(0),
    };
}
exports.ReportToSign = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.configDigest.length !== 0) {
            writer.uint32(10).bytes(message.configDigest);
        }
        if (message.epoch !== "0") {
            writer.uint32(16).uint64(message.epoch);
        }
        if (message.round !== "0") {
            writer.uint32(24).uint64(message.round);
        }
        if (message.extraHash.length !== 0) {
            writer.uint32(34).bytes(message.extraHash);
        }
        if (message.report.length !== 0) {
            writer.uint32(42).bytes(message.report);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReportToSign();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.configDigest = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.epoch = longToString(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.round = longToString(reader.uint64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.extraHash = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.report = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            configDigest: isSet(object.configDigest) ? bytesFromBase64(object.configDigest) : new Uint8Array(0),
            epoch: isSet(object.epoch) ? globalThis.String(object.epoch) : "0",
            round: isSet(object.round) ? globalThis.String(object.round) : "0",
            extraHash: isSet(object.extraHash) ? bytesFromBase64(object.extraHash) : new Uint8Array(0),
            report: isSet(object.report) ? bytesFromBase64(object.report) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.configDigest.length !== 0) {
            obj.configDigest = base64FromBytes(message.configDigest);
        }
        if (message.epoch !== "0") {
            obj.epoch = message.epoch;
        }
        if (message.round !== "0") {
            obj.round = message.round;
        }
        if (message.extraHash.length !== 0) {
            obj.extraHash = base64FromBytes(message.extraHash);
        }
        if (message.report.length !== 0) {
            obj.report = base64FromBytes(message.report);
        }
        return obj;
    },
    create(base) {
        return exports.ReportToSign.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseReportToSign();
        message.configDigest = (_a = object.configDigest) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.epoch = (_b = object.epoch) !== null && _b !== void 0 ? _b : "0";
        message.round = (_c = object.round) !== null && _c !== void 0 ? _c : "0";
        message.extraHash = (_d = object.extraHash) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.report = (_e = object.report) !== null && _e !== void 0 ? _e : new Uint8Array(0);
        return message;
    },
};
function createBaseEventOraclePaid() {
    return { transmitterAddr: "", payeeAddr: "", amount: undefined };
}
exports.EventOraclePaid = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.transmitterAddr !== "") {
            writer.uint32(10).string(message.transmitterAddr);
        }
        if (message.payeeAddr !== "") {
            writer.uint32(18).string(message.payeeAddr);
        }
        if (message.amount !== undefined) {
            coin_1.Coin.encode(message.amount, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventOraclePaid();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.transmitterAddr = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.payeeAddr = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.amount = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            transmitterAddr: isSet(object.transmitterAddr) ? globalThis.String(object.transmitterAddr) : "",
            payeeAddr: isSet(object.payeeAddr) ? globalThis.String(object.payeeAddr) : "",
            amount: isSet(object.amount) ? coin_1.Coin.fromJSON(object.amount) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.transmitterAddr !== "") {
            obj.transmitterAddr = message.transmitterAddr;
        }
        if (message.payeeAddr !== "") {
            obj.payeeAddr = message.payeeAddr;
        }
        if (message.amount !== undefined) {
            obj.amount = coin_1.Coin.toJSON(message.amount);
        }
        return obj;
    },
    create(base) {
        return exports.EventOraclePaid.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventOraclePaid();
        message.transmitterAddr = (_a = object.transmitterAddr) !== null && _a !== void 0 ? _a : "";
        message.payeeAddr = (_b = object.payeeAddr) !== null && _b !== void 0 ? _b : "";
        message.amount = (object.amount !== undefined && object.amount !== null)
            ? coin_1.Coin.fromPartial(object.amount)
            : undefined;
        return message;
    },
};
function createBaseEventAnswerUpdated() {
    return { current: "", roundId: "", updatedAt: undefined };
}
exports.EventAnswerUpdated = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.current !== "") {
            writer.uint32(10).string(message.current);
        }
        if (message.roundId !== "") {
            writer.uint32(18).string(message.roundId);
        }
        if (message.updatedAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAnswerUpdated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.current = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.roundId = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.updatedAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            current: isSet(object.current) ? globalThis.String(object.current) : "",
            roundId: isSet(object.roundId) ? globalThis.String(object.roundId) : "",
            updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.current !== "") {
            obj.current = message.current;
        }
        if (message.roundId !== "") {
            obj.roundId = message.roundId;
        }
        if (message.updatedAt !== undefined) {
            obj.updatedAt = message.updatedAt.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.EventAnswerUpdated.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventAnswerUpdated();
        message.current = (_a = object.current) !== null && _a !== void 0 ? _a : "";
        message.roundId = (_b = object.roundId) !== null && _b !== void 0 ? _b : "";
        message.updatedAt = (_c = object.updatedAt) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseEventNewRound() {
    return { roundId: "", startedBy: "", startedAt: undefined };
}
exports.EventNewRound = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.roundId !== "") {
            writer.uint32(10).string(message.roundId);
        }
        if (message.startedBy !== "") {
            writer.uint32(18).string(message.startedBy);
        }
        if (message.startedAt !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startedAt), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventNewRound();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.roundId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.startedBy = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.startedAt = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roundId: isSet(object.roundId) ? globalThis.String(object.roundId) : "",
            startedBy: isSet(object.startedBy) ? globalThis.String(object.startedBy) : "",
            startedAt: isSet(object.startedAt) ? fromJsonTimestamp(object.startedAt) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.roundId !== "") {
            obj.roundId = message.roundId;
        }
        if (message.startedBy !== "") {
            obj.startedBy = message.startedBy;
        }
        if (message.startedAt !== undefined) {
            obj.startedAt = message.startedAt.toISOString();
        }
        return obj;
    },
    create(base) {
        return exports.EventNewRound.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventNewRound();
        message.roundId = (_a = object.roundId) !== null && _a !== void 0 ? _a : "";
        message.startedBy = (_b = object.startedBy) !== null && _b !== void 0 ? _b : "";
        message.startedAt = (_c = object.startedAt) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseEventTransmitted() {
    return { configDigest: new Uint8Array(0), epoch: "0" };
}
exports.EventTransmitted = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.configDigest.length !== 0) {
            writer.uint32(10).bytes(message.configDigest);
        }
        if (message.epoch !== "0") {
            writer.uint32(16).uint64(message.epoch);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventTransmitted();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.configDigest = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.epoch = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            configDigest: isSet(object.configDigest) ? bytesFromBase64(object.configDigest) : new Uint8Array(0),
            epoch: isSet(object.epoch) ? globalThis.String(object.epoch) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.configDigest.length !== 0) {
            obj.configDigest = base64FromBytes(message.configDigest);
        }
        if (message.epoch !== "0") {
            obj.epoch = message.epoch;
        }
        return obj;
    },
    create(base) {
        return exports.EventTransmitted.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventTransmitted();
        message.configDigest = (_a = object.configDigest) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.epoch = (_b = object.epoch) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function createBaseEventNewTransmission() {
    return {
        feedId: "",
        aggregatorRoundId: 0,
        answer: "",
        transmitter: "",
        observationsTimestamp: "0",
        observations: [],
        observers: new Uint8Array(0),
        configDigest: new Uint8Array(0),
        epochAndRound: undefined,
    };
}
exports.EventNewTransmission = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.feedId !== "") {
            writer.uint32(10).string(message.feedId);
        }
        if (message.aggregatorRoundId !== 0) {
            writer.uint32(16).uint32(message.aggregatorRoundId);
        }
        if (message.answer !== "") {
            writer.uint32(26).string(message.answer);
        }
        if (message.transmitter !== "") {
            writer.uint32(34).string(message.transmitter);
        }
        if (message.observationsTimestamp !== "0") {
            writer.uint32(40).int64(message.observationsTimestamp);
        }
        for (const v of message.observations) {
            writer.uint32(50).string(v);
        }
        if (message.observers.length !== 0) {
            writer.uint32(58).bytes(message.observers);
        }
        if (message.configDigest.length !== 0) {
            writer.uint32(66).bytes(message.configDigest);
        }
        if (message.epochAndRound !== undefined) {
            exports.EpochAndRound.encode(message.epochAndRound, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventNewTransmission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.feedId = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.aggregatorRoundId = reader.uint32();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.answer = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.transmitter = reader.string();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.observationsTimestamp = longToString(reader.int64());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.observations.push(reader.string());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.observers = reader.bytes();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.configDigest = reader.bytes();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.epochAndRound = exports.EpochAndRound.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            feedId: isSet(object.feedId) ? globalThis.String(object.feedId) : "",
            aggregatorRoundId: isSet(object.aggregatorRoundId) ? globalThis.Number(object.aggregatorRoundId) : 0,
            answer: isSet(object.answer) ? globalThis.String(object.answer) : "",
            transmitter: isSet(object.transmitter) ? globalThis.String(object.transmitter) : "",
            observationsTimestamp: isSet(object.observationsTimestamp)
                ? globalThis.String(object.observationsTimestamp)
                : "0",
            observations: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.observations)
                ? object.observations.map((e) => globalThis.String(e))
                : [],
            observers: isSet(object.observers) ? bytesFromBase64(object.observers) : new Uint8Array(0),
            configDigest: isSet(object.configDigest) ? bytesFromBase64(object.configDigest) : new Uint8Array(0),
            epochAndRound: isSet(object.epochAndRound) ? exports.EpochAndRound.fromJSON(object.epochAndRound) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.feedId !== "") {
            obj.feedId = message.feedId;
        }
        if (message.aggregatorRoundId !== 0) {
            obj.aggregatorRoundId = Math.round(message.aggregatorRoundId);
        }
        if (message.answer !== "") {
            obj.answer = message.answer;
        }
        if (message.transmitter !== "") {
            obj.transmitter = message.transmitter;
        }
        if (message.observationsTimestamp !== "0") {
            obj.observationsTimestamp = message.observationsTimestamp;
        }
        if ((_a = message.observations) === null || _a === void 0 ? void 0 : _a.length) {
            obj.observations = message.observations;
        }
        if (message.observers.length !== 0) {
            obj.observers = base64FromBytes(message.observers);
        }
        if (message.configDigest.length !== 0) {
            obj.configDigest = base64FromBytes(message.configDigest);
        }
        if (message.epochAndRound !== undefined) {
            obj.epochAndRound = exports.EpochAndRound.toJSON(message.epochAndRound);
        }
        return obj;
    },
    create(base) {
        return exports.EventNewTransmission.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseEventNewTransmission();
        message.feedId = (_a = object.feedId) !== null && _a !== void 0 ? _a : "";
        message.aggregatorRoundId = (_b = object.aggregatorRoundId) !== null && _b !== void 0 ? _b : 0;
        message.answer = (_c = object.answer) !== null && _c !== void 0 ? _c : "";
        message.transmitter = (_d = object.transmitter) !== null && _d !== void 0 ? _d : "";
        message.observationsTimestamp = (_e = object.observationsTimestamp) !== null && _e !== void 0 ? _e : "0";
        message.observations = ((_f = object.observations) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.observers = (_g = object.observers) !== null && _g !== void 0 ? _g : new Uint8Array(0);
        message.configDigest = (_h = object.configDigest) !== null && _h !== void 0 ? _h : new Uint8Array(0);
        message.epochAndRound = (object.epochAndRound !== undefined && object.epochAndRound !== null)
            ? exports.EpochAndRound.fromPartial(object.epochAndRound)
            : undefined;
        return message;
    },
};
function createBaseEventConfigSet() {
    return { configDigest: new Uint8Array(0), previousConfigBlockNumber: "0", config: undefined, configInfo: undefined };
}
exports.EventConfigSet = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.configDigest.length !== 0) {
            writer.uint32(10).bytes(message.configDigest);
        }
        if (message.previousConfigBlockNumber !== "0") {
            writer.uint32(16).int64(message.previousConfigBlockNumber);
        }
        if (message.config !== undefined) {
            exports.FeedConfig.encode(message.config, writer.uint32(26).fork()).ldelim();
        }
        if (message.configInfo !== undefined) {
            exports.FeedConfigInfo.encode(message.configInfo, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventConfigSet();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.configDigest = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.previousConfigBlockNumber = longToString(reader.int64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.config = exports.FeedConfig.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.configInfo = exports.FeedConfigInfo.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            configDigest: isSet(object.configDigest) ? bytesFromBase64(object.configDigest) : new Uint8Array(0),
            previousConfigBlockNumber: isSet(object.previousConfigBlockNumber)
                ? globalThis.String(object.previousConfigBlockNumber)
                : "0",
            config: isSet(object.config) ? exports.FeedConfig.fromJSON(object.config) : undefined,
            configInfo: isSet(object.configInfo) ? exports.FeedConfigInfo.fromJSON(object.configInfo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.configDigest.length !== 0) {
            obj.configDigest = base64FromBytes(message.configDigest);
        }
        if (message.previousConfigBlockNumber !== "0") {
            obj.previousConfigBlockNumber = message.previousConfigBlockNumber;
        }
        if (message.config !== undefined) {
            obj.config = exports.FeedConfig.toJSON(message.config);
        }
        if (message.configInfo !== undefined) {
            obj.configInfo = exports.FeedConfigInfo.toJSON(message.configInfo);
        }
        return obj;
    },
    create(base) {
        return exports.EventConfigSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventConfigSet();
        message.configDigest = (_a = object.configDigest) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.previousConfigBlockNumber = (_b = object.previousConfigBlockNumber) !== null && _b !== void 0 ? _b : "0";
        message.config = (object.config !== undefined && object.config !== null)
            ? exports.FeedConfig.fromPartial(object.config)
            : undefined;
        message.configInfo = (object.configInfo !== undefined && object.configInfo !== null)
            ? exports.FeedConfigInfo.fromPartial(object.configInfo)
            : undefined;
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToString(long) {
    return long.toString();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
