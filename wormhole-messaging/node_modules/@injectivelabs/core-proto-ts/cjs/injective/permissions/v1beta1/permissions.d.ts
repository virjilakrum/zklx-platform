import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
/** each Action enum value should be a power of two */
export declare enum Action {
    UNSPECIFIED = 0,
    MINT = 1,
    RECEIVE = 2,
    BURN = 4,
    UNRECOGNIZED = -1
}
export declare function actionFromJSON(object: any): Action;
export declare function actionToJSON(object: Action): string;
/** Namespace defines a permissions namespace */
export interface Namespace {
    /** tokenfactory denom to which this namespace applies to */
    denom: string;
    /** address of smart contract to apply code-based restrictions */
    wasmHook: string;
    mintsPaused: boolean;
    sendsPaused: boolean;
    burnsPaused: boolean;
    /** permissions for each role */
    rolePermissions: {
        [key: string]: number;
    };
    addressRoles: {
        [key: string]: Roles;
    };
}
export interface Namespace_RolePermissionsEntry {
    key: string;
    value: number;
}
export interface Namespace_AddressRolesEntry {
    key: string;
    value: Roles | undefined;
}
/** Role is only used for storage */
export interface Role {
    name: string;
    permissions: number;
}
export interface Roles {
    roles: string[];
}
/** used in storage */
export interface RoleIDs {
    roleIds: number[];
}
export interface Voucher {
    coins: Coin[];
}
export declare const Namespace: {
    encode(message: Namespace, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Namespace;
    fromJSON(object: any): Namespace;
    toJSON(message: Namespace): unknown;
    create(base?: DeepPartial<Namespace>): Namespace;
    fromPartial(object: DeepPartial<Namespace>): Namespace;
};
export declare const Namespace_RolePermissionsEntry: {
    encode(message: Namespace_RolePermissionsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Namespace_RolePermissionsEntry;
    fromJSON(object: any): Namespace_RolePermissionsEntry;
    toJSON(message: Namespace_RolePermissionsEntry): unknown;
    create(base?: DeepPartial<Namespace_RolePermissionsEntry>): Namespace_RolePermissionsEntry;
    fromPartial(object: DeepPartial<Namespace_RolePermissionsEntry>): Namespace_RolePermissionsEntry;
};
export declare const Namespace_AddressRolesEntry: {
    encode(message: Namespace_AddressRolesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Namespace_AddressRolesEntry;
    fromJSON(object: any): Namespace_AddressRolesEntry;
    toJSON(message: Namespace_AddressRolesEntry): unknown;
    create(base?: DeepPartial<Namespace_AddressRolesEntry>): Namespace_AddressRolesEntry;
    fromPartial(object: DeepPartial<Namespace_AddressRolesEntry>): Namespace_AddressRolesEntry;
};
export declare const Role: {
    encode(message: Role, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Role;
    fromJSON(object: any): Role;
    toJSON(message: Role): unknown;
    create(base?: DeepPartial<Role>): Role;
    fromPartial(object: DeepPartial<Role>): Role;
};
export declare const Roles: {
    encode(message: Roles, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Roles;
    fromJSON(object: any): Roles;
    toJSON(message: Roles): unknown;
    create(base?: DeepPartial<Roles>): Roles;
    fromPartial(object: DeepPartial<Roles>): Roles;
};
export declare const RoleIDs: {
    encode(message: RoleIDs, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RoleIDs;
    fromJSON(object: any): RoleIDs;
    toJSON(message: RoleIDs): unknown;
    create(base?: DeepPartial<RoleIDs>): RoleIDs;
    fromPartial(object: DeepPartial<RoleIDs>): RoleIDs;
};
export declare const Voucher: {
    encode(message: Voucher, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Voucher;
    fromJSON(object: any): Voucher;
    toJSON(message: Voucher): unknown;
    create(base?: DeepPartial<Voucher>): Voucher;
    fromPartial(object: DeepPartial<Voucher>): Voucher;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
