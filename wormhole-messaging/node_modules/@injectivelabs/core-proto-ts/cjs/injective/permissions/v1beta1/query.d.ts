import { grpc } from "@injectivelabs/grpc-web";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { Namespace, Voucher } from "./permissions";
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params: Params | undefined;
}
/**
 * QueryAllNamespacesRequest is the request type for the Query/AllNamespaces RPC
 * method.
 */
export interface QueryAllNamespacesRequest {
}
/**
 * QueryAllNamespacesResponse is the response type for the Query/AllNamespaces
 * RPC method.
 */
export interface QueryAllNamespacesResponse {
    namespaces: Namespace[];
}
/**
 * QueryNamespaceByDenomRequest is the request type for the
 * Query/NamespaceByDenom RPC method.
 */
export interface QueryNamespaceByDenomRequest {
    denom: string;
    includeRoles: boolean;
}
/**
 * QueryNamespaceByDenomResponse is the response type for the
 * Query/NamespaceByDenom RPC method.
 */
export interface QueryNamespaceByDenomResponse {
    namespace: Namespace | undefined;
}
/**
 * QueryAddressesByRoleRequest is the request type for the Query/AddressesByRole
 * RPC method.
 */
export interface QueryAddressesByRoleRequest {
    denom: string;
    role: string;
}
/**
 * QueryAddressesByRoleResponse is the response type for the
 * Query/AddressesByRole RPC method.
 */
export interface QueryAddressesByRoleResponse {
    addresses: string[];
}
export interface QueryAddressRolesRequest {
    denom: string;
    address: string;
}
export interface QueryAddressRolesResponse {
    roles: string[];
}
export interface QueryVouchersForAddressRequest {
    address: string;
}
export interface QueryVouchersForAddressResponse {
    vouchers: {
        [key: string]: Voucher;
    };
}
export interface QueryVouchersForAddressResponse_VouchersEntry {
    key: string;
    value: Voucher | undefined;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    create(base?: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    create(base?: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
export declare const QueryAllNamespacesRequest: {
    encode(_: QueryAllNamespacesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllNamespacesRequest;
    fromJSON(_: any): QueryAllNamespacesRequest;
    toJSON(_: QueryAllNamespacesRequest): unknown;
    create(base?: DeepPartial<QueryAllNamespacesRequest>): QueryAllNamespacesRequest;
    fromPartial(_: DeepPartial<QueryAllNamespacesRequest>): QueryAllNamespacesRequest;
};
export declare const QueryAllNamespacesResponse: {
    encode(message: QueryAllNamespacesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllNamespacesResponse;
    fromJSON(object: any): QueryAllNamespacesResponse;
    toJSON(message: QueryAllNamespacesResponse): unknown;
    create(base?: DeepPartial<QueryAllNamespacesResponse>): QueryAllNamespacesResponse;
    fromPartial(object: DeepPartial<QueryAllNamespacesResponse>): QueryAllNamespacesResponse;
};
export declare const QueryNamespaceByDenomRequest: {
    encode(message: QueryNamespaceByDenomRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryNamespaceByDenomRequest;
    fromJSON(object: any): QueryNamespaceByDenomRequest;
    toJSON(message: QueryNamespaceByDenomRequest): unknown;
    create(base?: DeepPartial<QueryNamespaceByDenomRequest>): QueryNamespaceByDenomRequest;
    fromPartial(object: DeepPartial<QueryNamespaceByDenomRequest>): QueryNamespaceByDenomRequest;
};
export declare const QueryNamespaceByDenomResponse: {
    encode(message: QueryNamespaceByDenomResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryNamespaceByDenomResponse;
    fromJSON(object: any): QueryNamespaceByDenomResponse;
    toJSON(message: QueryNamespaceByDenomResponse): unknown;
    create(base?: DeepPartial<QueryNamespaceByDenomResponse>): QueryNamespaceByDenomResponse;
    fromPartial(object: DeepPartial<QueryNamespaceByDenomResponse>): QueryNamespaceByDenomResponse;
};
export declare const QueryAddressesByRoleRequest: {
    encode(message: QueryAddressesByRoleRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAddressesByRoleRequest;
    fromJSON(object: any): QueryAddressesByRoleRequest;
    toJSON(message: QueryAddressesByRoleRequest): unknown;
    create(base?: DeepPartial<QueryAddressesByRoleRequest>): QueryAddressesByRoleRequest;
    fromPartial(object: DeepPartial<QueryAddressesByRoleRequest>): QueryAddressesByRoleRequest;
};
export declare const QueryAddressesByRoleResponse: {
    encode(message: QueryAddressesByRoleResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAddressesByRoleResponse;
    fromJSON(object: any): QueryAddressesByRoleResponse;
    toJSON(message: QueryAddressesByRoleResponse): unknown;
    create(base?: DeepPartial<QueryAddressesByRoleResponse>): QueryAddressesByRoleResponse;
    fromPartial(object: DeepPartial<QueryAddressesByRoleResponse>): QueryAddressesByRoleResponse;
};
export declare const QueryAddressRolesRequest: {
    encode(message: QueryAddressRolesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAddressRolesRequest;
    fromJSON(object: any): QueryAddressRolesRequest;
    toJSON(message: QueryAddressRolesRequest): unknown;
    create(base?: DeepPartial<QueryAddressRolesRequest>): QueryAddressRolesRequest;
    fromPartial(object: DeepPartial<QueryAddressRolesRequest>): QueryAddressRolesRequest;
};
export declare const QueryAddressRolesResponse: {
    encode(message: QueryAddressRolesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAddressRolesResponse;
    fromJSON(object: any): QueryAddressRolesResponse;
    toJSON(message: QueryAddressRolesResponse): unknown;
    create(base?: DeepPartial<QueryAddressRolesResponse>): QueryAddressRolesResponse;
    fromPartial(object: DeepPartial<QueryAddressRolesResponse>): QueryAddressRolesResponse;
};
export declare const QueryVouchersForAddressRequest: {
    encode(message: QueryVouchersForAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVouchersForAddressRequest;
    fromJSON(object: any): QueryVouchersForAddressRequest;
    toJSON(message: QueryVouchersForAddressRequest): unknown;
    create(base?: DeepPartial<QueryVouchersForAddressRequest>): QueryVouchersForAddressRequest;
    fromPartial(object: DeepPartial<QueryVouchersForAddressRequest>): QueryVouchersForAddressRequest;
};
export declare const QueryVouchersForAddressResponse: {
    encode(message: QueryVouchersForAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVouchersForAddressResponse;
    fromJSON(object: any): QueryVouchersForAddressResponse;
    toJSON(message: QueryVouchersForAddressResponse): unknown;
    create(base?: DeepPartial<QueryVouchersForAddressResponse>): QueryVouchersForAddressResponse;
    fromPartial(object: DeepPartial<QueryVouchersForAddressResponse>): QueryVouchersForAddressResponse;
};
export declare const QueryVouchersForAddressResponse_VouchersEntry: {
    encode(message: QueryVouchersForAddressResponse_VouchersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVouchersForAddressResponse_VouchersEntry;
    fromJSON(object: any): QueryVouchersForAddressResponse_VouchersEntry;
    toJSON(message: QueryVouchersForAddressResponse_VouchersEntry): unknown;
    create(base?: DeepPartial<QueryVouchersForAddressResponse_VouchersEntry>): QueryVouchersForAddressResponse_VouchersEntry;
    fromPartial(object: DeepPartial<QueryVouchersForAddressResponse_VouchersEntry>): QueryVouchersForAddressResponse_VouchersEntry;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /**
     * Params defines a gRPC query method that returns the permissions module's
     * parameters.
     */
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    /**
     * AllNamespaces defines a gRPC query method that returns the permissions
     * module's created namespaces.
     */
    AllNamespaces(request: DeepPartial<QueryAllNamespacesRequest>, metadata?: grpc.Metadata): Promise<QueryAllNamespacesResponse>;
    /**
     * NamespaceByDenom defines a gRPC query method that returns the permissions
     * module's namespace associated with the provided denom.
     */
    NamespaceByDenom(request: DeepPartial<QueryNamespaceByDenomRequest>, metadata?: grpc.Metadata): Promise<QueryNamespaceByDenomResponse>;
    /**
     * AddressRoles defines a gRPC query method that returns address roles in the
     * namespace
     */
    AddressRoles(request: DeepPartial<QueryAddressRolesRequest>, metadata?: grpc.Metadata): Promise<QueryAddressRolesResponse>;
    /**
     * AddressesByRole defines a gRPC query method that returns a namespace's
     * roles associated with the provided address.
     */
    AddressesByRole(request: DeepPartial<QueryAddressesByRoleRequest>, metadata?: grpc.Metadata): Promise<QueryAddressesByRoleResponse>;
    /**
     * VouchersForAddress defines a gRPC query method that returns a map of
     * vouchers that are held by permissions module for this address, keyed by the
     * originator address
     */
    VouchersForAddress(request: DeepPartial<QueryVouchersForAddressRequest>, metadata?: grpc.Metadata): Promise<QueryVouchersForAddressResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    AllNamespaces(request: DeepPartial<QueryAllNamespacesRequest>, metadata?: grpc.Metadata): Promise<QueryAllNamespacesResponse>;
    NamespaceByDenom(request: DeepPartial<QueryNamespaceByDenomRequest>, metadata?: grpc.Metadata): Promise<QueryNamespaceByDenomResponse>;
    AddressRoles(request: DeepPartial<QueryAddressRolesRequest>, metadata?: grpc.Metadata): Promise<QueryAddressRolesResponse>;
    AddressesByRole(request: DeepPartial<QueryAddressesByRoleRequest>, metadata?: grpc.Metadata): Promise<QueryAddressesByRoleResponse>;
    VouchersForAddress(request: DeepPartial<QueryVouchersForAddressRequest>, metadata?: grpc.Metadata): Promise<QueryVouchersForAddressResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
export declare const QueryAllNamespacesDesc: UnaryMethodDefinitionish;
export declare const QueryNamespaceByDenomDesc: UnaryMethodDefinitionish;
export declare const QueryAddressRolesDesc: UnaryMethodDefinitionish;
export declare const QueryAddressesByRoleDesc: UnaryMethodDefinitionish;
export declare const QueryVouchersForAddressDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
