"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Voucher = exports.RoleIDs = exports.Roles = exports.Role = exports.Namespace_AddressRolesEntry = exports.Namespace_RolePermissionsEntry = exports.Namespace = exports.actionToJSON = exports.actionFromJSON = exports.Action = void 0;
/* eslint-disable */
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
/** each Action enum value should be a power of two */
var Action;
(function (Action) {
    Action[Action["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    Action[Action["MINT"] = 1] = "MINT";
    Action[Action["RECEIVE"] = 2] = "RECEIVE";
    Action[Action["BURN"] = 4] = "BURN";
    Action[Action["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Action = exports.Action || (exports.Action = {}));
function actionFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSPECIFIED":
            return Action.UNSPECIFIED;
        case 1:
        case "MINT":
            return Action.MINT;
        case 2:
        case "RECEIVE":
            return Action.RECEIVE;
        case 4:
        case "BURN":
            return Action.BURN;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Action.UNRECOGNIZED;
    }
}
exports.actionFromJSON = actionFromJSON;
function actionToJSON(object) {
    switch (object) {
        case Action.UNSPECIFIED:
            return "UNSPECIFIED";
        case Action.MINT:
            return "MINT";
        case Action.RECEIVE:
            return "RECEIVE";
        case Action.BURN:
            return "BURN";
        case Action.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.actionToJSON = actionToJSON;
function createBaseNamespace() {
    return {
        denom: "",
        wasmHook: "",
        mintsPaused: false,
        sendsPaused: false,
        burnsPaused: false,
        rolePermissions: {},
        addressRoles: {},
    };
}
exports.Namespace = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.wasmHook !== "") {
            writer.uint32(18).string(message.wasmHook);
        }
        if (message.mintsPaused === true) {
            writer.uint32(24).bool(message.mintsPaused);
        }
        if (message.sendsPaused === true) {
            writer.uint32(32).bool(message.sendsPaused);
        }
        if (message.burnsPaused === true) {
            writer.uint32(40).bool(message.burnsPaused);
        }
        Object.entries(message.rolePermissions).forEach(([key, value]) => {
            exports.Namespace_RolePermissionsEntry.encode({ key: key, value }, writer.uint32(50).fork()).ldelim();
        });
        Object.entries(message.addressRoles).forEach(([key, value]) => {
            exports.Namespace_AddressRolesEntry.encode({ key: key, value }, writer.uint32(58).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.wasmHook = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.mintsPaused = reader.bool();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.sendsPaused = reader.bool();
                    continue;
                case 5:
                    if (tag !== 40) {
                        break;
                    }
                    message.burnsPaused = reader.bool();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    const entry6 = exports.Namespace_RolePermissionsEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.rolePermissions[entry6.key] = entry6.value;
                    }
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = exports.Namespace_AddressRolesEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.addressRoles[entry7.key] = entry7.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
            wasmHook: isSet(object.wasmHook) ? globalThis.String(object.wasmHook) : "",
            mintsPaused: isSet(object.mintsPaused) ? globalThis.Boolean(object.mintsPaused) : false,
            sendsPaused: isSet(object.sendsPaused) ? globalThis.Boolean(object.sendsPaused) : false,
            burnsPaused: isSet(object.burnsPaused) ? globalThis.Boolean(object.burnsPaused) : false,
            rolePermissions: isObject(object.rolePermissions)
                ? Object.entries(object.rolePermissions).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            addressRoles: isObject(object.addressRoles)
                ? Object.entries(object.addressRoles).reduce((acc, [key, value]) => {
                    acc[key] = exports.Roles.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        if (message.wasmHook !== "") {
            obj.wasmHook = message.wasmHook;
        }
        if (message.mintsPaused === true) {
            obj.mintsPaused = message.mintsPaused;
        }
        if (message.sendsPaused === true) {
            obj.sendsPaused = message.sendsPaused;
        }
        if (message.burnsPaused === true) {
            obj.burnsPaused = message.burnsPaused;
        }
        if (message.rolePermissions) {
            const entries = Object.entries(message.rolePermissions);
            if (entries.length > 0) {
                obj.rolePermissions = {};
                entries.forEach(([k, v]) => {
                    obj.rolePermissions[k] = Math.round(v);
                });
            }
        }
        if (message.addressRoles) {
            const entries = Object.entries(message.addressRoles);
            if (entries.length > 0) {
                obj.addressRoles = {};
                entries.forEach(([k, v]) => {
                    obj.addressRoles[k] = exports.Roles.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return exports.Namespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseNamespace();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        message.wasmHook = (_b = object.wasmHook) !== null && _b !== void 0 ? _b : "";
        message.mintsPaused = (_c = object.mintsPaused) !== null && _c !== void 0 ? _c : false;
        message.sendsPaused = (_d = object.sendsPaused) !== null && _d !== void 0 ? _d : false;
        message.burnsPaused = (_e = object.burnsPaused) !== null && _e !== void 0 ? _e : false;
        message.rolePermissions = Object.entries((_f = object.rolePermissions) !== null && _f !== void 0 ? _f : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.addressRoles = Object.entries((_g = object.addressRoles) !== null && _g !== void 0 ? _g : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = exports.Roles.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseNamespace_RolePermissionsEntry() {
    return { key: "", value: 0 };
}
exports.Namespace_RolePermissionsEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNamespace_RolePermissionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.Namespace_RolePermissionsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseNamespace_RolePermissionsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseNamespace_AddressRolesEntry() {
    return { key: "", value: undefined };
}
exports.Namespace_AddressRolesEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.Roles.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseNamespace_AddressRolesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.Roles.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? exports.Roles.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = exports.Roles.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return exports.Namespace_AddressRolesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseNamespace_AddressRolesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null) ? exports.Roles.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseRole() {
    return { name: "", permissions: 0 };
}
exports.Role = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.permissions !== 0) {
            writer.uint32(16).uint32(message.permissions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRole();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.permissions = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            permissions: isSet(object.permissions) ? globalThis.Number(object.permissions) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.permissions !== 0) {
            obj.permissions = Math.round(message.permissions);
        }
        return obj;
    },
    create(base) {
        return exports.Role.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRole();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.permissions = (_b = object.permissions) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseRoles() {
    return { roles: [] };
}
exports.Roles = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.roles) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.roles.push(reader.string());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { roles: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roles) ? object.roles.map((e) => globalThis.String(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.roles) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roles = message.roles;
        }
        return obj;
    },
    create(base) {
        return exports.Roles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRoles();
        message.roles = ((_a = object.roles) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseRoleIDs() {
    return { roleIds: [] };
}
exports.RoleIDs = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.roleIds) {
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoleIDs();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag === 8) {
                        message.roleIds.push(reader.uint32());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.roleIds.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            roleIds: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.roleIds) ? object.roleIds.map((e) => globalThis.Number(e)) : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.roleIds) === null || _a === void 0 ? void 0 : _a.length) {
            obj.roleIds = message.roleIds.map((e) => Math.round(e));
        }
        return obj;
    },
    create(base) {
        return exports.RoleIDs.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseRoleIDs();
        message.roleIds = ((_a = object.roleIds) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseVoucher() {
    return { coins: [] };
}
exports.Voucher = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.coins) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoucher();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { coins: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.coins) ? object.coins.map((e) => coin_1.Coin.fromJSON(e)) : [] };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.coins) === null || _a === void 0 ? void 0 : _a.length) {
            obj.coins = message.coins.map((e) => coin_1.Coin.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return exports.Voucher.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseVoucher();
        message.coins = ((_a = object.coins) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
