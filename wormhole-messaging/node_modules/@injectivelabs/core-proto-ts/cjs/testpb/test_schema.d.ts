import _m0 from "protobufjs/minimal";
import { Duration } from "../google/protobuf/duration";
export declare enum Enum {
    ENUM_UNSPECIFIED = 0,
    ENUM_ONE = 1,
    ENUM_TWO = 2,
    ENUM_FIVE = 5,
    ENUM_NEG_THREE = -3,
    UNRECOGNIZED = -1
}
export declare function enumFromJSON(object: any): Enum;
export declare function enumToJSON(object: Enum): string;
export interface ExampleTable {
    /** Valid key fields: */
    u32: number;
    u64: string;
    str: string;
    bz: Uint8Array;
    ts: Date | undefined;
    dur: Duration | undefined;
    i32: number;
    s32: number;
    sf32: number;
    i64: string;
    s64: string;
    sf64: string;
    f32: number;
    f64: string;
    b: boolean;
    e: Enum;
    /** Invalid key fields: */
    repeated: number[];
    map: {
        [key: string]: number;
    };
    msg: ExampleTable_ExampleMessage | undefined;
    oneof?: number | undefined;
}
export interface ExampleTable_MapEntry {
    key: string;
    value: number;
}
export interface ExampleTable_ExampleMessage {
    foo: string;
    bar: number;
}
export interface ExampleAutoIncrementTable {
    id: string;
    x: string;
    y: number;
}
export interface ExampleSingleton {
    foo: string;
    bar: number;
}
export interface ExampleTimestamp {
    id: string;
    name: string;
    ts: Date | undefined;
}
export interface SimpleExample {
    name: string;
    unique: string;
    notUnique: string;
}
/** ExampleAutoIncFieldName is a table for testing InsertReturning<FieldName>. */
export interface ExampleAutoIncFieldName {
    foo: string;
    bar: string;
}
export declare const ExampleTable: {
    encode(message: ExampleTable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExampleTable;
    fromJSON(object: any): ExampleTable;
    toJSON(message: ExampleTable): unknown;
    create(base?: DeepPartial<ExampleTable>): ExampleTable;
    fromPartial(object: DeepPartial<ExampleTable>): ExampleTable;
};
export declare const ExampleTable_MapEntry: {
    encode(message: ExampleTable_MapEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExampleTable_MapEntry;
    fromJSON(object: any): ExampleTable_MapEntry;
    toJSON(message: ExampleTable_MapEntry): unknown;
    create(base?: DeepPartial<ExampleTable_MapEntry>): ExampleTable_MapEntry;
    fromPartial(object: DeepPartial<ExampleTable_MapEntry>): ExampleTable_MapEntry;
};
export declare const ExampleTable_ExampleMessage: {
    encode(message: ExampleTable_ExampleMessage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExampleTable_ExampleMessage;
    fromJSON(object: any): ExampleTable_ExampleMessage;
    toJSON(message: ExampleTable_ExampleMessage): unknown;
    create(base?: DeepPartial<ExampleTable_ExampleMessage>): ExampleTable_ExampleMessage;
    fromPartial(object: DeepPartial<ExampleTable_ExampleMessage>): ExampleTable_ExampleMessage;
};
export declare const ExampleAutoIncrementTable: {
    encode(message: ExampleAutoIncrementTable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExampleAutoIncrementTable;
    fromJSON(object: any): ExampleAutoIncrementTable;
    toJSON(message: ExampleAutoIncrementTable): unknown;
    create(base?: DeepPartial<ExampleAutoIncrementTable>): ExampleAutoIncrementTable;
    fromPartial(object: DeepPartial<ExampleAutoIncrementTable>): ExampleAutoIncrementTable;
};
export declare const ExampleSingleton: {
    encode(message: ExampleSingleton, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExampleSingleton;
    fromJSON(object: any): ExampleSingleton;
    toJSON(message: ExampleSingleton): unknown;
    create(base?: DeepPartial<ExampleSingleton>): ExampleSingleton;
    fromPartial(object: DeepPartial<ExampleSingleton>): ExampleSingleton;
};
export declare const ExampleTimestamp: {
    encode(message: ExampleTimestamp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExampleTimestamp;
    fromJSON(object: any): ExampleTimestamp;
    toJSON(message: ExampleTimestamp): unknown;
    create(base?: DeepPartial<ExampleTimestamp>): ExampleTimestamp;
    fromPartial(object: DeepPartial<ExampleTimestamp>): ExampleTimestamp;
};
export declare const SimpleExample: {
    encode(message: SimpleExample, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SimpleExample;
    fromJSON(object: any): SimpleExample;
    toJSON(message: SimpleExample): unknown;
    create(base?: DeepPartial<SimpleExample>): SimpleExample;
    fromPartial(object: DeepPartial<SimpleExample>): SimpleExample;
};
export declare const ExampleAutoIncFieldName: {
    encode(message: ExampleAutoIncFieldName, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExampleAutoIncFieldName;
    fromJSON(object: any): ExampleAutoIncFieldName;
    toJSON(message: ExampleAutoIncFieldName): unknown;
    create(base?: DeepPartial<ExampleAutoIncFieldName>): ExampleAutoIncFieldName;
    fromPartial(object: DeepPartial<ExampleAutoIncFieldName>): ExampleAutoIncFieldName;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
