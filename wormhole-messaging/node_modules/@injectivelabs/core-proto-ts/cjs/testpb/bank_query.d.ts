import { grpc } from "@injectivelabs/grpc-web";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../cosmos/base/query/v1beta1/pagination";
import { Balance, Supply } from "./bank";
/** Code generated by protoc-gen-go-cosmos-orm-proto. DO NOT EDIT. */
/** GetBalanceRequest is the BankQuery/GetBalanceRequest request type. */
export interface GetBalanceRequest {
    /** address specifies the value of the address field in the primary key. */
    address: string;
    /** denom specifies the value of the denom field in the primary key. */
    denom: string;
}
/** GetBalanceResponse is the BankQuery/GetBalanceResponse response type. */
export interface GetBalanceResponse {
    /** value is the response value. */
    value: Balance | undefined;
}
/** ListBalanceRequest is the BankQuery/ListBalanceRequest request type. */
export interface ListBalanceRequest {
    /** prefix_query specifies the index key value to use for the prefix query. */
    prefixQuery?: ListBalanceRequest_IndexKey | undefined;
    /** range_query specifies the index key from/to values to use for the range query. */
    rangeQuery?: ListBalanceRequest_RangeQuery | undefined;
    /** pagination specifies optional pagination parameters. */
    pagination: PageRequest | undefined;
}
/** IndexKey specifies the value of an index key to use in prefix and range queries. */
export interface ListBalanceRequest_IndexKey {
    /** address_denom specifies the value of the AddressDenom index key to use in the query. */
    addressDenom?: ListBalanceRequest_IndexKey_AddressDenom | undefined;
    /** denom specifies the value of the Denom index key to use in the query. */
    denom?: ListBalanceRequest_IndexKey_Denom | undefined;
}
export interface ListBalanceRequest_IndexKey_AddressDenom {
    /**
     * address is the value of the address field in the index.
     * It can be omitted to query for all valid values of that field in this segment of the index.
     */
    address?: string | undefined;
    /**
     * denom is the value of the denom field in the index.
     * It can be omitted to query for all valid values of that field in this segment of the index.
     */
    denom?: string | undefined;
}
export interface ListBalanceRequest_IndexKey_Denom {
    /**
     * denom is the value of the denom field in the index.
     * It can be omitted to query for all valid values of that field in this segment of the index.
     */
    denom?: string | undefined;
}
/** RangeQuery specifies the from/to index keys for a range query. */
export interface ListBalanceRequest_RangeQuery {
    /**
     * from is the index key to use for the start of the range query.
     * To query from the start of an index, specify an index key for that index with empty values.
     */
    from: ListBalanceRequest_IndexKey | undefined;
    /**
     * to is the index key to use for the end of the range query.
     * The index key type MUST be the same as the index key type used for from.
     * To query from to the end of an index it can be omitted.
     */
    to: ListBalanceRequest_IndexKey | undefined;
}
/** ListBalanceResponse is the BankQuery/ListBalanceResponse response type. */
export interface ListBalanceResponse {
    /** values are the results of the query. */
    values: Balance[];
    /** pagination is the pagination response. */
    pagination: PageResponse | undefined;
}
/** GetSupplyRequest is the BankQuery/GetSupplyRequest request type. */
export interface GetSupplyRequest {
    /** denom specifies the value of the denom field in the primary key. */
    denom: string;
}
/** GetSupplyResponse is the BankQuery/GetSupplyResponse response type. */
export interface GetSupplyResponse {
    /** value is the response value. */
    value: Supply | undefined;
}
/** ListSupplyRequest is the BankQuery/ListSupplyRequest request type. */
export interface ListSupplyRequest {
    /** prefix_query specifies the index key value to use for the prefix query. */
    prefixQuery?: ListSupplyRequest_IndexKey | undefined;
    /** range_query specifies the index key from/to values to use for the range query. */
    rangeQuery?: ListSupplyRequest_RangeQuery | undefined;
    /** pagination specifies optional pagination parameters. */
    pagination: PageRequest | undefined;
}
/** IndexKey specifies the value of an index key to use in prefix and range queries. */
export interface ListSupplyRequest_IndexKey {
    /** denom specifies the value of the Denom index key to use in the query. */
    denom?: ListSupplyRequest_IndexKey_Denom | undefined;
}
export interface ListSupplyRequest_IndexKey_Denom {
    /**
     * denom is the value of the denom field in the index.
     * It can be omitted to query for all valid values of that field in this segment of the index.
     */
    denom?: string | undefined;
}
/** RangeQuery specifies the from/to index keys for a range query. */
export interface ListSupplyRequest_RangeQuery {
    /**
     * from is the index key to use for the start of the range query.
     * To query from the start of an index, specify an index key for that index with empty values.
     */
    from: ListSupplyRequest_IndexKey | undefined;
    /**
     * to is the index key to use for the end of the range query.
     * The index key type MUST be the same as the index key type used for from.
     * To query from to the end of an index it can be omitted.
     */
    to: ListSupplyRequest_IndexKey | undefined;
}
/** ListSupplyResponse is the BankQuery/ListSupplyResponse response type. */
export interface ListSupplyResponse {
    /** values are the results of the query. */
    values: Supply[];
    /** pagination is the pagination response. */
    pagination: PageResponse | undefined;
}
export declare const GetBalanceRequest: {
    encode(message: GetBalanceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetBalanceRequest;
    fromJSON(object: any): GetBalanceRequest;
    toJSON(message: GetBalanceRequest): unknown;
    create(base?: DeepPartial<GetBalanceRequest>): GetBalanceRequest;
    fromPartial(object: DeepPartial<GetBalanceRequest>): GetBalanceRequest;
};
export declare const GetBalanceResponse: {
    encode(message: GetBalanceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetBalanceResponse;
    fromJSON(object: any): GetBalanceResponse;
    toJSON(message: GetBalanceResponse): unknown;
    create(base?: DeepPartial<GetBalanceResponse>): GetBalanceResponse;
    fromPartial(object: DeepPartial<GetBalanceResponse>): GetBalanceResponse;
};
export declare const ListBalanceRequest: {
    encode(message: ListBalanceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBalanceRequest;
    fromJSON(object: any): ListBalanceRequest;
    toJSON(message: ListBalanceRequest): unknown;
    create(base?: DeepPartial<ListBalanceRequest>): ListBalanceRequest;
    fromPartial(object: DeepPartial<ListBalanceRequest>): ListBalanceRequest;
};
export declare const ListBalanceRequest_IndexKey: {
    encode(message: ListBalanceRequest_IndexKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBalanceRequest_IndexKey;
    fromJSON(object: any): ListBalanceRequest_IndexKey;
    toJSON(message: ListBalanceRequest_IndexKey): unknown;
    create(base?: DeepPartial<ListBalanceRequest_IndexKey>): ListBalanceRequest_IndexKey;
    fromPartial(object: DeepPartial<ListBalanceRequest_IndexKey>): ListBalanceRequest_IndexKey;
};
export declare const ListBalanceRequest_IndexKey_AddressDenom: {
    encode(message: ListBalanceRequest_IndexKey_AddressDenom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBalanceRequest_IndexKey_AddressDenom;
    fromJSON(object: any): ListBalanceRequest_IndexKey_AddressDenom;
    toJSON(message: ListBalanceRequest_IndexKey_AddressDenom): unknown;
    create(base?: DeepPartial<ListBalanceRequest_IndexKey_AddressDenom>): ListBalanceRequest_IndexKey_AddressDenom;
    fromPartial(object: DeepPartial<ListBalanceRequest_IndexKey_AddressDenom>): ListBalanceRequest_IndexKey_AddressDenom;
};
export declare const ListBalanceRequest_IndexKey_Denom: {
    encode(message: ListBalanceRequest_IndexKey_Denom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBalanceRequest_IndexKey_Denom;
    fromJSON(object: any): ListBalanceRequest_IndexKey_Denom;
    toJSON(message: ListBalanceRequest_IndexKey_Denom): unknown;
    create(base?: DeepPartial<ListBalanceRequest_IndexKey_Denom>): ListBalanceRequest_IndexKey_Denom;
    fromPartial(object: DeepPartial<ListBalanceRequest_IndexKey_Denom>): ListBalanceRequest_IndexKey_Denom;
};
export declare const ListBalanceRequest_RangeQuery: {
    encode(message: ListBalanceRequest_RangeQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBalanceRequest_RangeQuery;
    fromJSON(object: any): ListBalanceRequest_RangeQuery;
    toJSON(message: ListBalanceRequest_RangeQuery): unknown;
    create(base?: DeepPartial<ListBalanceRequest_RangeQuery>): ListBalanceRequest_RangeQuery;
    fromPartial(object: DeepPartial<ListBalanceRequest_RangeQuery>): ListBalanceRequest_RangeQuery;
};
export declare const ListBalanceResponse: {
    encode(message: ListBalanceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBalanceResponse;
    fromJSON(object: any): ListBalanceResponse;
    toJSON(message: ListBalanceResponse): unknown;
    create(base?: DeepPartial<ListBalanceResponse>): ListBalanceResponse;
    fromPartial(object: DeepPartial<ListBalanceResponse>): ListBalanceResponse;
};
export declare const GetSupplyRequest: {
    encode(message: GetSupplyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSupplyRequest;
    fromJSON(object: any): GetSupplyRequest;
    toJSON(message: GetSupplyRequest): unknown;
    create(base?: DeepPartial<GetSupplyRequest>): GetSupplyRequest;
    fromPartial(object: DeepPartial<GetSupplyRequest>): GetSupplyRequest;
};
export declare const GetSupplyResponse: {
    encode(message: GetSupplyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetSupplyResponse;
    fromJSON(object: any): GetSupplyResponse;
    toJSON(message: GetSupplyResponse): unknown;
    create(base?: DeepPartial<GetSupplyResponse>): GetSupplyResponse;
    fromPartial(object: DeepPartial<GetSupplyResponse>): GetSupplyResponse;
};
export declare const ListSupplyRequest: {
    encode(message: ListSupplyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListSupplyRequest;
    fromJSON(object: any): ListSupplyRequest;
    toJSON(message: ListSupplyRequest): unknown;
    create(base?: DeepPartial<ListSupplyRequest>): ListSupplyRequest;
    fromPartial(object: DeepPartial<ListSupplyRequest>): ListSupplyRequest;
};
export declare const ListSupplyRequest_IndexKey: {
    encode(message: ListSupplyRequest_IndexKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListSupplyRequest_IndexKey;
    fromJSON(object: any): ListSupplyRequest_IndexKey;
    toJSON(message: ListSupplyRequest_IndexKey): unknown;
    create(base?: DeepPartial<ListSupplyRequest_IndexKey>): ListSupplyRequest_IndexKey;
    fromPartial(object: DeepPartial<ListSupplyRequest_IndexKey>): ListSupplyRequest_IndexKey;
};
export declare const ListSupplyRequest_IndexKey_Denom: {
    encode(message: ListSupplyRequest_IndexKey_Denom, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListSupplyRequest_IndexKey_Denom;
    fromJSON(object: any): ListSupplyRequest_IndexKey_Denom;
    toJSON(message: ListSupplyRequest_IndexKey_Denom): unknown;
    create(base?: DeepPartial<ListSupplyRequest_IndexKey_Denom>): ListSupplyRequest_IndexKey_Denom;
    fromPartial(object: DeepPartial<ListSupplyRequest_IndexKey_Denom>): ListSupplyRequest_IndexKey_Denom;
};
export declare const ListSupplyRequest_RangeQuery: {
    encode(message: ListSupplyRequest_RangeQuery, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListSupplyRequest_RangeQuery;
    fromJSON(object: any): ListSupplyRequest_RangeQuery;
    toJSON(message: ListSupplyRequest_RangeQuery): unknown;
    create(base?: DeepPartial<ListSupplyRequest_RangeQuery>): ListSupplyRequest_RangeQuery;
    fromPartial(object: DeepPartial<ListSupplyRequest_RangeQuery>): ListSupplyRequest_RangeQuery;
};
export declare const ListSupplyResponse: {
    encode(message: ListSupplyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListSupplyResponse;
    fromJSON(object: any): ListSupplyResponse;
    toJSON(message: ListSupplyResponse): unknown;
    create(base?: DeepPartial<ListSupplyResponse>): ListSupplyResponse;
    fromPartial(object: DeepPartial<ListSupplyResponse>): ListSupplyResponse;
};
/** BankQueryService queries the state of the tables specified by testpb/bank.proto. */
export interface BankQueryService {
    /** Get queries the Balance table by its primary key. */
    GetBalance(request: DeepPartial<GetBalanceRequest>, metadata?: grpc.Metadata): Promise<GetBalanceResponse>;
    /** ListBalance queries the Balance table using prefix and range queries against defined indexes. */
    ListBalance(request: DeepPartial<ListBalanceRequest>, metadata?: grpc.Metadata): Promise<ListBalanceResponse>;
    /** Get queries the Supply table by its primary key. */
    GetSupply(request: DeepPartial<GetSupplyRequest>, metadata?: grpc.Metadata): Promise<GetSupplyResponse>;
    /** ListSupply queries the Supply table using prefix and range queries against defined indexes. */
    ListSupply(request: DeepPartial<ListSupplyRequest>, metadata?: grpc.Metadata): Promise<ListSupplyResponse>;
}
export declare class BankQueryServiceClientImpl implements BankQueryService {
    private readonly rpc;
    constructor(rpc: Rpc);
    GetBalance(request: DeepPartial<GetBalanceRequest>, metadata?: grpc.Metadata): Promise<GetBalanceResponse>;
    ListBalance(request: DeepPartial<ListBalanceRequest>, metadata?: grpc.Metadata): Promise<ListBalanceResponse>;
    GetSupply(request: DeepPartial<GetSupplyRequest>, metadata?: grpc.Metadata): Promise<GetSupplyResponse>;
    ListSupply(request: DeepPartial<ListSupplyRequest>, metadata?: grpc.Metadata): Promise<ListSupplyResponse>;
}
export declare const BankQueryServiceDesc: {
    serviceName: string;
};
export declare const BankQueryServiceGetBalanceDesc: UnaryMethodDefinitionish;
export declare const BankQueryServiceListBalanceDesc: UnaryMethodDefinitionish;
export declare const BankQueryServiceGetSupplyDesc: UnaryMethodDefinitionish;
export declare const BankQueryServiceListSupplyDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
        upStreamRetryCodes?: number[];
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
type DeepPartial<T> = T extends Builtin ? T : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export declare class GrpcWebError extends globalThis.Error {
    code: grpc.Code;
    metadata: grpc.Metadata;
    constructor(message: string, code: grpc.Code, metadata: grpc.Metadata);
}
export {};
