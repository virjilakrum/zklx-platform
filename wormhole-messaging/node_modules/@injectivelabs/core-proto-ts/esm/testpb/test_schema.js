/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Duration } from "../google/protobuf/duration";
import { Timestamp } from "../google/protobuf/timestamp";
export var Enum;
(function (Enum) {
    Enum[Enum["ENUM_UNSPECIFIED"] = 0] = "ENUM_UNSPECIFIED";
    Enum[Enum["ENUM_ONE"] = 1] = "ENUM_ONE";
    Enum[Enum["ENUM_TWO"] = 2] = "ENUM_TWO";
    Enum[Enum["ENUM_FIVE"] = 5] = "ENUM_FIVE";
    Enum[Enum["ENUM_NEG_THREE"] = -3] = "ENUM_NEG_THREE";
    Enum[Enum["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Enum || (Enum = {}));
export function enumFromJSON(object) {
    switch (object) {
        case 0:
        case "ENUM_UNSPECIFIED":
            return Enum.ENUM_UNSPECIFIED;
        case 1:
        case "ENUM_ONE":
            return Enum.ENUM_ONE;
        case 2:
        case "ENUM_TWO":
            return Enum.ENUM_TWO;
        case 5:
        case "ENUM_FIVE":
            return Enum.ENUM_FIVE;
        case -3:
        case "ENUM_NEG_THREE":
            return Enum.ENUM_NEG_THREE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Enum.UNRECOGNIZED;
    }
}
export function enumToJSON(object) {
    switch (object) {
        case Enum.ENUM_UNSPECIFIED:
            return "ENUM_UNSPECIFIED";
        case Enum.ENUM_ONE:
            return "ENUM_ONE";
        case Enum.ENUM_TWO:
            return "ENUM_TWO";
        case Enum.ENUM_FIVE:
            return "ENUM_FIVE";
        case Enum.ENUM_NEG_THREE:
            return "ENUM_NEG_THREE";
        case Enum.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseExampleTable() {
    return {
        u32: 0,
        u64: "0",
        str: "",
        bz: new Uint8Array(0),
        ts: undefined,
        dur: undefined,
        i32: 0,
        s32: 0,
        sf32: 0,
        i64: "0",
        s64: "0",
        sf64: "0",
        f32: 0,
        f64: "0",
        b: false,
        e: 0,
        repeated: [],
        map: {},
        msg: undefined,
        oneof: undefined,
    };
}
export const ExampleTable = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.u32 !== 0) {
            writer.uint32(8).uint32(message.u32);
        }
        if (message.u64 !== "0") {
            writer.uint32(16).uint64(message.u64);
        }
        if (message.str !== "") {
            writer.uint32(26).string(message.str);
        }
        if (message.bz.length !== 0) {
            writer.uint32(34).bytes(message.bz);
        }
        if (message.ts !== undefined) {
            Timestamp.encode(toTimestamp(message.ts), writer.uint32(42).fork()).ldelim();
        }
        if (message.dur !== undefined) {
            Duration.encode(message.dur, writer.uint32(50).fork()).ldelim();
        }
        if (message.i32 !== 0) {
            writer.uint32(56).int32(message.i32);
        }
        if (message.s32 !== 0) {
            writer.uint32(64).sint32(message.s32);
        }
        if (message.sf32 !== 0) {
            writer.uint32(77).sfixed32(message.sf32);
        }
        if (message.i64 !== "0") {
            writer.uint32(80).int64(message.i64);
        }
        if (message.s64 !== "0") {
            writer.uint32(88).sint64(message.s64);
        }
        if (message.sf64 !== "0") {
            writer.uint32(97).sfixed64(message.sf64);
        }
        if (message.f32 !== 0) {
            writer.uint32(109).fixed32(message.f32);
        }
        if (message.f64 !== "0") {
            writer.uint32(113).fixed64(message.f64);
        }
        if (message.b === true) {
            writer.uint32(120).bool(message.b);
        }
        if (message.e !== 0) {
            writer.uint32(128).int32(message.e);
        }
        writer.uint32(138).fork();
        for (const v of message.repeated) {
            writer.uint32(v);
        }
        writer.ldelim();
        Object.entries(message.map).forEach(([key, value]) => {
            ExampleTable_MapEntry.encode({ key: key, value }, writer.uint32(146).fork()).ldelim();
        });
        if (message.msg !== undefined) {
            ExampleTable_ExampleMessage.encode(message.msg, writer.uint32(154).fork()).ldelim();
        }
        if (message.oneof !== undefined) {
            writer.uint32(160).uint32(message.oneof);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleTable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.u32 = reader.uint32();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.u64 = longToString(reader.uint64());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.str = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.bz = reader.bytes();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.ts = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.dur = Duration.decode(reader, reader.uint32());
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.i32 = reader.int32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.s32 = reader.sint32();
                    continue;
                case 9:
                    if (tag !== 77) {
                        break;
                    }
                    message.sf32 = reader.sfixed32();
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.i64 = longToString(reader.int64());
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.s64 = longToString(reader.sint64());
                    continue;
                case 12:
                    if (tag !== 97) {
                        break;
                    }
                    message.sf64 = longToString(reader.sfixed64());
                    continue;
                case 13:
                    if (tag !== 109) {
                        break;
                    }
                    message.f32 = reader.fixed32();
                    continue;
                case 14:
                    if (tag !== 113) {
                        break;
                    }
                    message.f64 = longToString(reader.fixed64());
                    continue;
                case 15:
                    if (tag !== 120) {
                        break;
                    }
                    message.b = reader.bool();
                    continue;
                case 16:
                    if (tag !== 128) {
                        break;
                    }
                    message.e = reader.int32();
                    continue;
                case 17:
                    if (tag === 136) {
                        message.repeated.push(reader.uint32());
                        continue;
                    }
                    if (tag === 138) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.repeated.push(reader.uint32());
                        }
                        continue;
                    }
                    break;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    const entry18 = ExampleTable_MapEntry.decode(reader, reader.uint32());
                    if (entry18.value !== undefined) {
                        message.map[entry18.key] = entry18.value;
                    }
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.msg = ExampleTable_ExampleMessage.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 160) {
                        break;
                    }
                    message.oneof = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            u32: isSet(object.u32) ? globalThis.Number(object.u32) : 0,
            u64: isSet(object.u64) ? globalThis.String(object.u64) : "0",
            str: isSet(object.str) ? globalThis.String(object.str) : "",
            bz: isSet(object.bz) ? bytesFromBase64(object.bz) : new Uint8Array(0),
            ts: isSet(object.ts) ? fromJsonTimestamp(object.ts) : undefined,
            dur: isSet(object.dur) ? Duration.fromJSON(object.dur) : undefined,
            i32: isSet(object.i32) ? globalThis.Number(object.i32) : 0,
            s32: isSet(object.s32) ? globalThis.Number(object.s32) : 0,
            sf32: isSet(object.sf32) ? globalThis.Number(object.sf32) : 0,
            i64: isSet(object.i64) ? globalThis.String(object.i64) : "0",
            s64: isSet(object.s64) ? globalThis.String(object.s64) : "0",
            sf64: isSet(object.sf64) ? globalThis.String(object.sf64) : "0",
            f32: isSet(object.f32) ? globalThis.Number(object.f32) : 0,
            f64: isSet(object.f64) ? globalThis.String(object.f64) : "0",
            b: isSet(object.b) ? globalThis.Boolean(object.b) : false,
            e: isSet(object.e) ? enumFromJSON(object.e) : 0,
            repeated: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.repeated) ? object.repeated.map((e) => globalThis.Number(e)) : [],
            map: isObject(object.map)
                ? Object.entries(object.map).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            msg: isSet(object.msg) ? ExampleTable_ExampleMessage.fromJSON(object.msg) : undefined,
            oneof: isSet(object.oneof) ? globalThis.Number(object.oneof) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.u32 !== 0) {
            obj.u32 = Math.round(message.u32);
        }
        if (message.u64 !== "0") {
            obj.u64 = message.u64;
        }
        if (message.str !== "") {
            obj.str = message.str;
        }
        if (message.bz.length !== 0) {
            obj.bz = base64FromBytes(message.bz);
        }
        if (message.ts !== undefined) {
            obj.ts = message.ts.toISOString();
        }
        if (message.dur !== undefined) {
            obj.dur = Duration.toJSON(message.dur);
        }
        if (message.i32 !== 0) {
            obj.i32 = Math.round(message.i32);
        }
        if (message.s32 !== 0) {
            obj.s32 = Math.round(message.s32);
        }
        if (message.sf32 !== 0) {
            obj.sf32 = Math.round(message.sf32);
        }
        if (message.i64 !== "0") {
            obj.i64 = message.i64;
        }
        if (message.s64 !== "0") {
            obj.s64 = message.s64;
        }
        if (message.sf64 !== "0") {
            obj.sf64 = message.sf64;
        }
        if (message.f32 !== 0) {
            obj.f32 = Math.round(message.f32);
        }
        if (message.f64 !== "0") {
            obj.f64 = message.f64;
        }
        if (message.b === true) {
            obj.b = message.b;
        }
        if (message.e !== 0) {
            obj.e = enumToJSON(message.e);
        }
        if ((_a = message.repeated) === null || _a === void 0 ? void 0 : _a.length) {
            obj.repeated = message.repeated.map((e) => Math.round(e));
        }
        if (message.map) {
            const entries = Object.entries(message.map);
            if (entries.length > 0) {
                obj.map = {};
                entries.forEach(([k, v]) => {
                    obj.map[k] = Math.round(v);
                });
            }
        }
        if (message.msg !== undefined) {
            obj.msg = ExampleTable_ExampleMessage.toJSON(message.msg);
        }
        if (message.oneof !== undefined) {
            obj.oneof = Math.round(message.oneof);
        }
        return obj;
    },
    create(base) {
        return ExampleTable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t;
        const message = createBaseExampleTable();
        message.u32 = (_a = object.u32) !== null && _a !== void 0 ? _a : 0;
        message.u64 = (_b = object.u64) !== null && _b !== void 0 ? _b : "0";
        message.str = (_c = object.str) !== null && _c !== void 0 ? _c : "";
        message.bz = (_d = object.bz) !== null && _d !== void 0 ? _d : new Uint8Array(0);
        message.ts = (_e = object.ts) !== null && _e !== void 0 ? _e : undefined;
        message.dur = (object.dur !== undefined && object.dur !== null) ? Duration.fromPartial(object.dur) : undefined;
        message.i32 = (_f = object.i32) !== null && _f !== void 0 ? _f : 0;
        message.s32 = (_g = object.s32) !== null && _g !== void 0 ? _g : 0;
        message.sf32 = (_h = object.sf32) !== null && _h !== void 0 ? _h : 0;
        message.i64 = (_j = object.i64) !== null && _j !== void 0 ? _j : "0";
        message.s64 = (_k = object.s64) !== null && _k !== void 0 ? _k : "0";
        message.sf64 = (_l = object.sf64) !== null && _l !== void 0 ? _l : "0";
        message.f32 = (_m = object.f32) !== null && _m !== void 0 ? _m : 0;
        message.f64 = (_o = object.f64) !== null && _o !== void 0 ? _o : "0";
        message.b = (_p = object.b) !== null && _p !== void 0 ? _p : false;
        message.e = (_q = object.e) !== null && _q !== void 0 ? _q : 0;
        message.repeated = ((_r = object.repeated) === null || _r === void 0 ? void 0 : _r.map((e) => e)) || [];
        message.map = Object.entries((_s = object.map) !== null && _s !== void 0 ? _s : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.msg = (object.msg !== undefined && object.msg !== null)
            ? ExampleTable_ExampleMessage.fromPartial(object.msg)
            : undefined;
        message.oneof = (_t = object.oneof) !== null && _t !== void 0 ? _t : undefined;
        return message;
    },
};
function createBaseExampleTable_MapEntry() {
    return { key: "", value: 0 };
}
export const ExampleTable_MapEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleTable_MapEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return ExampleTable_MapEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExampleTable_MapEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseExampleTable_ExampleMessage() {
    return { foo: "", bar: 0 };
}
export const ExampleTable_ExampleMessage = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.foo !== "") {
            writer.uint32(10).string(message.foo);
        }
        if (message.bar !== 0) {
            writer.uint32(16).int32(message.bar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleTable_ExampleMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.foo = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bar = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            foo: isSet(object.foo) ? globalThis.String(object.foo) : "",
            bar: isSet(object.bar) ? globalThis.Number(object.bar) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.foo !== "") {
            obj.foo = message.foo;
        }
        if (message.bar !== 0) {
            obj.bar = Math.round(message.bar);
        }
        return obj;
    },
    create(base) {
        return ExampleTable_ExampleMessage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExampleTable_ExampleMessage();
        message.foo = (_a = object.foo) !== null && _a !== void 0 ? _a : "";
        message.bar = (_b = object.bar) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseExampleAutoIncrementTable() {
    return { id: "0", x: "", y: 0 };
}
export const ExampleAutoIncrementTable = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        if (message.x !== "") {
            writer.uint32(18).string(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(24).int32(message.y);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleAutoIncrementTable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.x = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.y = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            x: isSet(object.x) ? globalThis.String(object.x) : "",
            y: isSet(object.y) ? globalThis.Number(object.y) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.x !== "") {
            obj.x = message.x;
        }
        if (message.y !== 0) {
            obj.y = Math.round(message.y);
        }
        return obj;
    },
    create(base) {
        return ExampleAutoIncrementTable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExampleAutoIncrementTable();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "0";
        message.x = (_b = object.x) !== null && _b !== void 0 ? _b : "";
        message.y = (_c = object.y) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseExampleSingleton() {
    return { foo: "", bar: 0 };
}
export const ExampleSingleton = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.foo !== "") {
            writer.uint32(10).string(message.foo);
        }
        if (message.bar !== 0) {
            writer.uint32(16).int32(message.bar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleSingleton();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.foo = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bar = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            foo: isSet(object.foo) ? globalThis.String(object.foo) : "",
            bar: isSet(object.bar) ? globalThis.Number(object.bar) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.foo !== "") {
            obj.foo = message.foo;
        }
        if (message.bar !== 0) {
            obj.bar = Math.round(message.bar);
        }
        return obj;
    },
    create(base) {
        return ExampleSingleton.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExampleSingleton();
        message.foo = (_a = object.foo) !== null && _a !== void 0 ? _a : "";
        message.bar = (_b = object.bar) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseExampleTimestamp() {
    return { id: "0", name: "", ts: undefined };
}
export const ExampleTimestamp = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.id !== "0") {
            writer.uint32(8).uint64(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.ts !== undefined) {
            Timestamp.encode(toTimestamp(message.ts), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleTimestamp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.id = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.ts = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? globalThis.String(object.id) : "0",
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            ts: isSet(object.ts) ? fromJsonTimestamp(object.ts) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.id !== "0") {
            obj.id = message.id;
        }
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.ts !== undefined) {
            obj.ts = message.ts.toISOString();
        }
        return obj;
    },
    create(base) {
        return ExampleTimestamp.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExampleTimestamp();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "0";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.ts = (_c = object.ts) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function createBaseSimpleExample() {
    return { name: "", unique: "", notUnique: "" };
}
export const SimpleExample = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.unique !== "") {
            writer.uint32(18).string(message.unique);
        }
        if (message.notUnique !== "") {
            writer.uint32(26).string(message.notUnique);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSimpleExample();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.unique = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.notUnique = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            unique: isSet(object.unique) ? globalThis.String(object.unique) : "",
            notUnique: isSet(object.notUnique) ? globalThis.String(object.notUnique) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.unique !== "") {
            obj.unique = message.unique;
        }
        if (message.notUnique !== "") {
            obj.notUnique = message.notUnique;
        }
        return obj;
    },
    create(base) {
        return SimpleExample.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSimpleExample();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.unique = (_b = object.unique) !== null && _b !== void 0 ? _b : "";
        message.notUnique = (_c = object.notUnique) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseExampleAutoIncFieldName() {
    return { foo: "0", bar: "0" };
}
export const ExampleAutoIncFieldName = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.foo !== "0") {
            writer.uint32(8).uint64(message.foo);
        }
        if (message.bar !== "0") {
            writer.uint32(16).uint64(message.bar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExampleAutoIncFieldName();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.foo = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.bar = longToString(reader.uint64());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            foo: isSet(object.foo) ? globalThis.String(object.foo) : "0",
            bar: isSet(object.bar) ? globalThis.String(object.bar) : "0",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.foo !== "0") {
            obj.foo = message.foo;
        }
        if (message.bar !== "0") {
            obj.bar = message.bar;
        }
        return obj;
    },
    create(base) {
        return ExampleAutoIncFieldName.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseExampleAutoIncFieldName();
        message.foo = (_a = object.foo) !== null && _a !== void 0 ? _a : "0";
        message.bar = (_b = object.bar) !== null && _b !== void 0 ? _b : "0";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function toTimestamp(date) {
    const seconds = Math.trunc(date.getTime() / 1000).toString();
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (globalThis.Number(t.seconds) || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new globalThis.Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof globalThis.Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new globalThis.Date(o);
    }
    else {
        return fromTimestamp(Timestamp.fromJSON(o));
    }
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
