/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";
import { PageRequest, PageResponse } from "../cosmos/base/query/v1beta1/pagination";
import { Balance, Supply } from "./bank";
function createBaseGetBalanceRequest() {
    return { address: "", denom: "" };
}
export const GetBalanceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : "",
            denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== "") {
            obj.address = message.address;
        }
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return GetBalanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseGetBalanceRequest();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGetBalanceResponse() {
    return { value: undefined };
}
export const GetBalanceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.value !== undefined) {
            Balance.encode(message.value, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.value = Balance.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? Balance.fromJSON(object.value) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== undefined) {
            obj.value = Balance.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return GetBalanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetBalanceResponse();
        message.value = (object.value !== undefined && object.value !== null)
            ? Balance.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseListBalanceRequest() {
    return { prefixQuery: undefined, rangeQuery: undefined, pagination: undefined };
}
export const ListBalanceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.prefixQuery !== undefined) {
            ListBalanceRequest_IndexKey.encode(message.prefixQuery, writer.uint32(10).fork()).ldelim();
        }
        if (message.rangeQuery !== undefined) {
            ListBalanceRequest_RangeQuery.encode(message.rangeQuery, writer.uint32(18).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.prefixQuery = ListBalanceRequest_IndexKey.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rangeQuery = ListBalanceRequest_RangeQuery.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            prefixQuery: isSet(object.prefixQuery) ? ListBalanceRequest_IndexKey.fromJSON(object.prefixQuery) : undefined,
            rangeQuery: isSet(object.rangeQuery) ? ListBalanceRequest_RangeQuery.fromJSON(object.rangeQuery) : undefined,
            pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.prefixQuery !== undefined) {
            obj.prefixQuery = ListBalanceRequest_IndexKey.toJSON(message.prefixQuery);
        }
        if (message.rangeQuery !== undefined) {
            obj.rangeQuery = ListBalanceRequest_RangeQuery.toJSON(message.rangeQuery);
        }
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return ListBalanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListBalanceRequest();
        message.prefixQuery = (object.prefixQuery !== undefined && object.prefixQuery !== null)
            ? ListBalanceRequest_IndexKey.fromPartial(object.prefixQuery)
            : undefined;
        message.rangeQuery = (object.rangeQuery !== undefined && object.rangeQuery !== null)
            ? ListBalanceRequest_RangeQuery.fromPartial(object.rangeQuery)
            : undefined;
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseListBalanceRequest_IndexKey() {
    return { addressDenom: undefined, denom: undefined };
}
export const ListBalanceRequest_IndexKey = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.addressDenom !== undefined) {
            ListBalanceRequest_IndexKey_AddressDenom.encode(message.addressDenom, writer.uint32(10).fork()).ldelim();
        }
        if (message.denom !== undefined) {
            ListBalanceRequest_IndexKey_Denom.encode(message.denom, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListBalanceRequest_IndexKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.addressDenom = ListBalanceRequest_IndexKey_AddressDenom.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = ListBalanceRequest_IndexKey_Denom.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            addressDenom: isSet(object.addressDenom)
                ? ListBalanceRequest_IndexKey_AddressDenom.fromJSON(object.addressDenom)
                : undefined,
            denom: isSet(object.denom) ? ListBalanceRequest_IndexKey_Denom.fromJSON(object.denom) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.addressDenom !== undefined) {
            obj.addressDenom = ListBalanceRequest_IndexKey_AddressDenom.toJSON(message.addressDenom);
        }
        if (message.denom !== undefined) {
            obj.denom = ListBalanceRequest_IndexKey_Denom.toJSON(message.denom);
        }
        return obj;
    },
    create(base) {
        return ListBalanceRequest_IndexKey.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListBalanceRequest_IndexKey();
        message.addressDenom = (object.addressDenom !== undefined && object.addressDenom !== null)
            ? ListBalanceRequest_IndexKey_AddressDenom.fromPartial(object.addressDenom)
            : undefined;
        message.denom = (object.denom !== undefined && object.denom !== null)
            ? ListBalanceRequest_IndexKey_Denom.fromPartial(object.denom)
            : undefined;
        return message;
    },
};
function createBaseListBalanceRequest_IndexKey_AddressDenom() {
    return { address: undefined, denom: undefined };
}
export const ListBalanceRequest_IndexKey_AddressDenom = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.address !== undefined) {
            writer.uint32(10).string(message.address);
        }
        if (message.denom !== undefined) {
            writer.uint32(18).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListBalanceRequest_IndexKey_AddressDenom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? globalThis.String(object.address) : undefined,
            denom: isSet(object.denom) ? globalThis.String(object.denom) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.address !== undefined) {
            obj.address = message.address;
        }
        if (message.denom !== undefined) {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return ListBalanceRequest_IndexKey_AddressDenom.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseListBalanceRequest_IndexKey_AddressDenom();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : undefined;
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseListBalanceRequest_IndexKey_Denom() {
    return { denom: undefined };
}
export const ListBalanceRequest_IndexKey_Denom = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.denom !== undefined) {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListBalanceRequest_IndexKey_Denom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== undefined) {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return ListBalanceRequest_IndexKey_Denom.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListBalanceRequest_IndexKey_Denom();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseListBalanceRequest_RangeQuery() {
    return { from: undefined, to: undefined };
}
export const ListBalanceRequest_RangeQuery = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.from !== undefined) {
            ListBalanceRequest_IndexKey.encode(message.from, writer.uint32(10).fork()).ldelim();
        }
        if (message.to !== undefined) {
            ListBalanceRequest_IndexKey.encode(message.to, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListBalanceRequest_RangeQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from = ListBalanceRequest_IndexKey.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to = ListBalanceRequest_IndexKey.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from: isSet(object.from) ? ListBalanceRequest_IndexKey.fromJSON(object.from) : undefined,
            to: isSet(object.to) ? ListBalanceRequest_IndexKey.fromJSON(object.to) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from !== undefined) {
            obj.from = ListBalanceRequest_IndexKey.toJSON(message.from);
        }
        if (message.to !== undefined) {
            obj.to = ListBalanceRequest_IndexKey.toJSON(message.to);
        }
        return obj;
    },
    create(base) {
        return ListBalanceRequest_RangeQuery.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListBalanceRequest_RangeQuery();
        message.from = (object.from !== undefined && object.from !== null)
            ? ListBalanceRequest_IndexKey.fromPartial(object.from)
            : undefined;
        message.to = (object.to !== undefined && object.to !== null)
            ? ListBalanceRequest_IndexKey.fromPartial(object.to)
            : undefined;
        return message;
    },
};
function createBaseListBalanceResponse() {
    return { values: [], pagination: undefined };
}
export const ListBalanceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            Balance.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.values.push(Balance.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            values: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map((e) => Balance.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.values) === null || _a === void 0 ? void 0 : _a.length) {
            obj.values = message.values.map((e) => Balance.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return ListBalanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListBalanceResponse();
        message.values = ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map((e) => Balance.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseGetSupplyRequest() {
    return { denom: "" };
}
export const GetSupplyRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupplyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== "") {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return GetSupplyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseGetSupplyRequest();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseGetSupplyResponse() {
    return { value: undefined };
}
export const GetSupplyResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.value !== undefined) {
            Supply.encode(message.value, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGetSupplyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.value = Supply.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { value: isSet(object.value) ? Supply.fromJSON(object.value) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.value !== undefined) {
            obj.value = Supply.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return GetSupplyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseGetSupplyResponse();
        message.value = (object.value !== undefined && object.value !== null)
            ? Supply.fromPartial(object.value)
            : undefined;
        return message;
    },
};
function createBaseListSupplyRequest() {
    return { prefixQuery: undefined, rangeQuery: undefined, pagination: undefined };
}
export const ListSupplyRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.prefixQuery !== undefined) {
            ListSupplyRequest_IndexKey.encode(message.prefixQuery, writer.uint32(10).fork()).ldelim();
        }
        if (message.rangeQuery !== undefined) {
            ListSupplyRequest_RangeQuery.encode(message.rangeQuery, writer.uint32(18).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageRequest.encode(message.pagination, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSupplyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.prefixQuery = ListSupplyRequest_IndexKey.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.rangeQuery = ListSupplyRequest_RangeQuery.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.pagination = PageRequest.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            prefixQuery: isSet(object.prefixQuery) ? ListSupplyRequest_IndexKey.fromJSON(object.prefixQuery) : undefined,
            rangeQuery: isSet(object.rangeQuery) ? ListSupplyRequest_RangeQuery.fromJSON(object.rangeQuery) : undefined,
            pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.prefixQuery !== undefined) {
            obj.prefixQuery = ListSupplyRequest_IndexKey.toJSON(message.prefixQuery);
        }
        if (message.rangeQuery !== undefined) {
            obj.rangeQuery = ListSupplyRequest_RangeQuery.toJSON(message.rangeQuery);
        }
        if (message.pagination !== undefined) {
            obj.pagination = PageRequest.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return ListSupplyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListSupplyRequest();
        message.prefixQuery = (object.prefixQuery !== undefined && object.prefixQuery !== null)
            ? ListSupplyRequest_IndexKey.fromPartial(object.prefixQuery)
            : undefined;
        message.rangeQuery = (object.rangeQuery !== undefined && object.rangeQuery !== null)
            ? ListSupplyRequest_RangeQuery.fromPartial(object.rangeQuery)
            : undefined;
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseListSupplyRequest_IndexKey() {
    return { denom: undefined };
}
export const ListSupplyRequest_IndexKey = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.denom !== undefined) {
            ListSupplyRequest_IndexKey_Denom.encode(message.denom, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSupplyRequest_IndexKey();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = ListSupplyRequest_IndexKey_Denom.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? ListSupplyRequest_IndexKey_Denom.fromJSON(object.denom) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== undefined) {
            obj.denom = ListSupplyRequest_IndexKey_Denom.toJSON(message.denom);
        }
        return obj;
    },
    create(base) {
        return ListSupplyRequest_IndexKey.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListSupplyRequest_IndexKey();
        message.denom = (object.denom !== undefined && object.denom !== null)
            ? ListSupplyRequest_IndexKey_Denom.fromPartial(object.denom)
            : undefined;
        return message;
    },
};
function createBaseListSupplyRequest_IndexKey_Denom() {
    return { denom: undefined };
}
export const ListSupplyRequest_IndexKey_Denom = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.denom !== undefined) {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSupplyRequest_IndexKey_Denom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.denom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { denom: isSet(object.denom) ? globalThis.String(object.denom) : undefined };
    },
    toJSON(message) {
        const obj = {};
        if (message.denom !== undefined) {
            obj.denom = message.denom;
        }
        return obj;
    },
    create(base) {
        return ListSupplyRequest_IndexKey_Denom.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListSupplyRequest_IndexKey_Denom();
        message.denom = (_a = object.denom) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseListSupplyRequest_RangeQuery() {
    return { from: undefined, to: undefined };
}
export const ListSupplyRequest_RangeQuery = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.from !== undefined) {
            ListSupplyRequest_IndexKey.encode(message.from, writer.uint32(10).fork()).ldelim();
        }
        if (message.to !== undefined) {
            ListSupplyRequest_IndexKey.encode(message.to, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSupplyRequest_RangeQuery();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.from = ListSupplyRequest_IndexKey.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.to = ListSupplyRequest_IndexKey.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            from: isSet(object.from) ? ListSupplyRequest_IndexKey.fromJSON(object.from) : undefined,
            to: isSet(object.to) ? ListSupplyRequest_IndexKey.fromJSON(object.to) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.from !== undefined) {
            obj.from = ListSupplyRequest_IndexKey.toJSON(message.from);
        }
        if (message.to !== undefined) {
            obj.to = ListSupplyRequest_IndexKey.toJSON(message.to);
        }
        return obj;
    },
    create(base) {
        return ListSupplyRequest_RangeQuery.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseListSupplyRequest_RangeQuery();
        message.from = (object.from !== undefined && object.from !== null)
            ? ListSupplyRequest_IndexKey.fromPartial(object.from)
            : undefined;
        message.to = (object.to !== undefined && object.to !== null)
            ? ListSupplyRequest_IndexKey.fromPartial(object.to)
            : undefined;
        return message;
    },
};
function createBaseListSupplyResponse() {
    return { values: [], pagination: undefined };
}
export const ListSupplyResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.values) {
            Supply.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListSupplyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.values.push(Supply.decode(reader, reader.uint32()));
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pagination = PageResponse.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            values: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map((e) => Supply.fromJSON(e)) : [],
            pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.values) === null || _a === void 0 ? void 0 : _a.length) {
            obj.values = message.values.map((e) => Supply.toJSON(e));
        }
        if (message.pagination !== undefined) {
            obj.pagination = PageResponse.toJSON(message.pagination);
        }
        return obj;
    },
    create(base) {
        return ListSupplyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseListSupplyResponse();
        message.values = ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map((e) => Supply.fromPartial(e))) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
export class BankQueryServiceClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.GetBalance = this.GetBalance.bind(this);
        this.ListBalance = this.ListBalance.bind(this);
        this.GetSupply = this.GetSupply.bind(this);
        this.ListSupply = this.ListSupply.bind(this);
    }
    GetBalance(request, metadata) {
        return this.rpc.unary(BankQueryServiceGetBalanceDesc, GetBalanceRequest.fromPartial(request), metadata);
    }
    ListBalance(request, metadata) {
        return this.rpc.unary(BankQueryServiceListBalanceDesc, ListBalanceRequest.fromPartial(request), metadata);
    }
    GetSupply(request, metadata) {
        return this.rpc.unary(BankQueryServiceGetSupplyDesc, GetSupplyRequest.fromPartial(request), metadata);
    }
    ListSupply(request, metadata) {
        return this.rpc.unary(BankQueryServiceListSupplyDesc, ListSupplyRequest.fromPartial(request), metadata);
    }
}
export const BankQueryServiceDesc = { serviceName: "testpb.BankQueryService" };
export const BankQueryServiceGetBalanceDesc = {
    methodName: "GetBalance",
    service: BankQueryServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetBalanceRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetBalanceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const BankQueryServiceListBalanceDesc = {
    methodName: "ListBalance",
    service: BankQueryServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return ListBalanceRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = ListBalanceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const BankQueryServiceGetSupplyDesc = {
    methodName: "GetSupply",
    service: BankQueryServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return GetSupplyRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = GetSupplyResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const BankQueryServiceListSupplyDesc = {
    methodName: "ListSupply",
    service: BankQueryServiceDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return ListSupplyRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = ListSupplyResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
export class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
