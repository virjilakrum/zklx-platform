/* eslint-disable */
import _m0 from "protobufjs/minimal";
function createBaseEventSetBalances() {
    return { balanceUpdates: [] };
}
export const EventSetBalances = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.balanceUpdates) {
            BalanceUpdate.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventSetBalances();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.balanceUpdates.push(BalanceUpdate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            balanceUpdates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.balanceUpdates)
                ? object.balanceUpdates.map((e) => BalanceUpdate.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if ((_a = message.balanceUpdates) === null || _a === void 0 ? void 0 : _a.length) {
            obj.balanceUpdates = message.balanceUpdates.map((e) => BalanceUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return EventSetBalances.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventSetBalances();
        message.balanceUpdates = ((_a = object.balanceUpdates) === null || _a === void 0 ? void 0 : _a.map((e) => BalanceUpdate.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBalanceUpdate() {
    return { addr: new Uint8Array(0), denom: new Uint8Array(0), amt: "" };
}
export const BalanceUpdate = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.addr.length !== 0) {
            writer.uint32(10).bytes(message.addr);
        }
        if (message.denom.length !== 0) {
            writer.uint32(18).bytes(message.denom);
        }
        if (message.amt !== "") {
            writer.uint32(26).string(message.amt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBalanceUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.addr = reader.bytes();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.denom = reader.bytes();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.amt = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            addr: isSet(object.addr) ? bytesFromBase64(object.addr) : new Uint8Array(0),
            denom: isSet(object.denom) ? bytesFromBase64(object.denom) : new Uint8Array(0),
            amt: isSet(object.amt) ? globalThis.String(object.amt) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.addr.length !== 0) {
            obj.addr = base64FromBytes(message.addr);
        }
        if (message.denom.length !== 0) {
            obj.denom = base64FromBytes(message.denom);
        }
        if (message.amt !== "") {
            obj.amt = message.amt;
        }
        return obj;
    },
    create(base) {
        return BalanceUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBalanceUpdate();
        message.addr = (_a = object.addr) !== null && _a !== void 0 ? _a : new Uint8Array(0);
        message.denom = (_b = object.denom) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        message.amt = (_c = object.amt) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
