/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { GroupInfo, GroupMember, GroupPolicyInfo, Proposal, Vote } from "./types";
function createBaseGenesisState() {
    return {
        groupSeq: "0",
        groups: [],
        groupMembers: [],
        groupPolicySeq: "0",
        groupPolicies: [],
        proposalSeq: "0",
        proposals: [],
        votes: [],
    };
}
export const GenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.groupSeq !== "0") {
            writer.uint32(8).uint64(message.groupSeq);
        }
        for (const v of message.groups) {
            GroupInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.groupMembers) {
            GroupMember.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.groupPolicySeq !== "0") {
            writer.uint32(32).uint64(message.groupPolicySeq);
        }
        for (const v of message.groupPolicies) {
            GroupPolicyInfo.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.proposalSeq !== "0") {
            writer.uint32(48).uint64(message.proposalSeq);
        }
        for (const v of message.proposals) {
            Proposal.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.votes) {
            Vote.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.groupSeq = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.groups.push(GroupInfo.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.groupMembers.push(GroupMember.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.groupPolicySeq = longToString(reader.uint64());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.groupPolicies.push(GroupPolicyInfo.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.proposalSeq = longToString(reader.uint64());
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.proposals.push(Proposal.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.votes.push(Vote.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            groupSeq: isSet(object.groupSeq) ? globalThis.String(object.groupSeq) : "0",
            groups: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.groups) ? object.groups.map((e) => GroupInfo.fromJSON(e)) : [],
            groupMembers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.groupMembers)
                ? object.groupMembers.map((e) => GroupMember.fromJSON(e))
                : [],
            groupPolicySeq: isSet(object.groupPolicySeq) ? globalThis.String(object.groupPolicySeq) : "0",
            groupPolicies: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.groupPolicies)
                ? object.groupPolicies.map((e) => GroupPolicyInfo.fromJSON(e))
                : [],
            proposalSeq: isSet(object.proposalSeq) ? globalThis.String(object.proposalSeq) : "0",
            proposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.proposals)
                ? object.proposals.map((e) => Proposal.fromJSON(e))
                : [],
            votes: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.votes) ? object.votes.map((e) => Vote.fromJSON(e)) : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e;
        const obj = {};
        if (message.groupSeq !== "0") {
            obj.groupSeq = message.groupSeq;
        }
        if ((_a = message.groups) === null || _a === void 0 ? void 0 : _a.length) {
            obj.groups = message.groups.map((e) => GroupInfo.toJSON(e));
        }
        if ((_b = message.groupMembers) === null || _b === void 0 ? void 0 : _b.length) {
            obj.groupMembers = message.groupMembers.map((e) => GroupMember.toJSON(e));
        }
        if (message.groupPolicySeq !== "0") {
            obj.groupPolicySeq = message.groupPolicySeq;
        }
        if ((_c = message.groupPolicies) === null || _c === void 0 ? void 0 : _c.length) {
            obj.groupPolicies = message.groupPolicies.map((e) => GroupPolicyInfo.toJSON(e));
        }
        if (message.proposalSeq !== "0") {
            obj.proposalSeq = message.proposalSeq;
        }
        if ((_d = message.proposals) === null || _d === void 0 ? void 0 : _d.length) {
            obj.proposals = message.proposals.map((e) => Proposal.toJSON(e));
        }
        if ((_e = message.votes) === null || _e === void 0 ? void 0 : _e.length) {
            obj.votes = message.votes.map((e) => Vote.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const message = createBaseGenesisState();
        message.groupSeq = (_a = object.groupSeq) !== null && _a !== void 0 ? _a : "0";
        message.groups = ((_b = object.groups) === null || _b === void 0 ? void 0 : _b.map((e) => GroupInfo.fromPartial(e))) || [];
        message.groupMembers = ((_c = object.groupMembers) === null || _c === void 0 ? void 0 : _c.map((e) => GroupMember.fromPartial(e))) || [];
        message.groupPolicySeq = (_d = object.groupPolicySeq) !== null && _d !== void 0 ? _d : "0";
        message.groupPolicies = ((_e = object.groupPolicies) === null || _e === void 0 ? void 0 : _e.map((e) => GroupPolicyInfo.fromPartial(e))) || [];
        message.proposalSeq = (_f = object.proposalSeq) !== null && _f !== void 0 ? _f : "0";
        message.proposals = ((_g = object.proposals) === null || _g === void 0 ? void 0 : _g.map((e) => Proposal.fromPartial(e))) || [];
        message.votes = ((_h = object.votes) === null || _h === void 0 ? void 0 : _h.map((e) => Vote.fromPartial(e))) || [];
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
