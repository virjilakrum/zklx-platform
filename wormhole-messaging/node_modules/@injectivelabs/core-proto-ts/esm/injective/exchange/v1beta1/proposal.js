/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { CommunityPoolSpendProposal } from "../../../cosmos/distribution/v1beta1/distribution";
import { oracleTypeFromJSON, oracleTypeToJSON } from "../../oracle/v1beta1/oracle";
import { CampaignRewardPool, DenomDecimals, FeeDiscountSchedule, MarketFeeMultiplier, marketStatusFromJSON, marketStatusToJSON, TradingRewardCampaignInfo, } from "./exchange";
export var ExchangeType;
(function (ExchangeType) {
    ExchangeType[ExchangeType["EXCHANGE_UNSPECIFIED"] = 0] = "EXCHANGE_UNSPECIFIED";
    ExchangeType[ExchangeType["SPOT"] = 1] = "SPOT";
    ExchangeType[ExchangeType["DERIVATIVES"] = 2] = "DERIVATIVES";
    ExchangeType[ExchangeType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ExchangeType || (ExchangeType = {}));
export function exchangeTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "EXCHANGE_UNSPECIFIED":
            return ExchangeType.EXCHANGE_UNSPECIFIED;
        case 1:
        case "SPOT":
            return ExchangeType.SPOT;
        case 2:
        case "DERIVATIVES":
            return ExchangeType.DERIVATIVES;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ExchangeType.UNRECOGNIZED;
    }
}
export function exchangeTypeToJSON(object) {
    switch (object) {
        case ExchangeType.EXCHANGE_UNSPECIFIED:
            return "EXCHANGE_UNSPECIFIED";
        case ExchangeType.SPOT:
            return "SPOT";
        case ExchangeType.DERIVATIVES:
            return "DERIVATIVES";
        case ExchangeType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseSpotMarketParamUpdateProposal() {
    return {
        title: "",
        description: "",
        marketId: "",
        makerFeeRate: "",
        takerFeeRate: "",
        relayerFeeShareRate: "",
        minPriceTickSize: "",
        minQuantityTickSize: "",
        status: 0,
    };
}
export const SpotMarketParamUpdateProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.marketId !== "") {
            writer.uint32(26).string(message.marketId);
        }
        if (message.makerFeeRate !== "") {
            writer.uint32(34).string(message.makerFeeRate);
        }
        if (message.takerFeeRate !== "") {
            writer.uint32(42).string(message.takerFeeRate);
        }
        if (message.relayerFeeShareRate !== "") {
            writer.uint32(50).string(message.relayerFeeShareRate);
        }
        if (message.minPriceTickSize !== "") {
            writer.uint32(58).string(message.minPriceTickSize);
        }
        if (message.minQuantityTickSize !== "") {
            writer.uint32(66).string(message.minQuantityTickSize);
        }
        if (message.status !== 0) {
            writer.uint32(72).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpotMarketParamUpdateProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.marketId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.makerFeeRate = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.takerFeeRate = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.relayerFeeShareRate = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.minPriceTickSize = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.minQuantityTickSize = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            marketId: isSet(object.marketId) ? globalThis.String(object.marketId) : "",
            makerFeeRate: isSet(object.makerFeeRate) ? globalThis.String(object.makerFeeRate) : "",
            takerFeeRate: isSet(object.takerFeeRate) ? globalThis.String(object.takerFeeRate) : "",
            relayerFeeShareRate: isSet(object.relayerFeeShareRate) ? globalThis.String(object.relayerFeeShareRate) : "",
            minPriceTickSize: isSet(object.minPriceTickSize) ? globalThis.String(object.minPriceTickSize) : "",
            minQuantityTickSize: isSet(object.minQuantityTickSize) ? globalThis.String(object.minQuantityTickSize) : "",
            status: isSet(object.status) ? marketStatusFromJSON(object.status) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.marketId !== "") {
            obj.marketId = message.marketId;
        }
        if (message.makerFeeRate !== "") {
            obj.makerFeeRate = message.makerFeeRate;
        }
        if (message.takerFeeRate !== "") {
            obj.takerFeeRate = message.takerFeeRate;
        }
        if (message.relayerFeeShareRate !== "") {
            obj.relayerFeeShareRate = message.relayerFeeShareRate;
        }
        if (message.minPriceTickSize !== "") {
            obj.minPriceTickSize = message.minPriceTickSize;
        }
        if (message.minQuantityTickSize !== "") {
            obj.minQuantityTickSize = message.minQuantityTickSize;
        }
        if (message.status !== 0) {
            obj.status = marketStatusToJSON(message.status);
        }
        return obj;
    },
    create(base) {
        return SpotMarketParamUpdateProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseSpotMarketParamUpdateProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.marketId = (_c = object.marketId) !== null && _c !== void 0 ? _c : "";
        message.makerFeeRate = (_d = object.makerFeeRate) !== null && _d !== void 0 ? _d : "";
        message.takerFeeRate = (_e = object.takerFeeRate) !== null && _e !== void 0 ? _e : "";
        message.relayerFeeShareRate = (_f = object.relayerFeeShareRate) !== null && _f !== void 0 ? _f : "";
        message.minPriceTickSize = (_g = object.minPriceTickSize) !== null && _g !== void 0 ? _g : "";
        message.minQuantityTickSize = (_h = object.minQuantityTickSize) !== null && _h !== void 0 ? _h : "";
        message.status = (_j = object.status) !== null && _j !== void 0 ? _j : 0;
        return message;
    },
};
function createBaseExchangeEnableProposal() {
    return { title: "", description: "", exchangeType: 0 };
}
export const ExchangeEnableProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.exchangeType !== 0) {
            writer.uint32(24).int32(message.exchangeType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExchangeEnableProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.exchangeType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            exchangeType: isSet(object.exchangeType) ? exchangeTypeFromJSON(object.exchangeType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.exchangeType !== 0) {
            obj.exchangeType = exchangeTypeToJSON(message.exchangeType);
        }
        return obj;
    },
    create(base) {
        return ExchangeEnableProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseExchangeEnableProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.exchangeType = (_c = object.exchangeType) !== null && _c !== void 0 ? _c : 0;
        return message;
    },
};
function createBaseBatchExchangeModificationProposal() {
    return {
        title: "",
        description: "",
        spotMarketParamUpdateProposals: [],
        derivativeMarketParamUpdateProposals: [],
        spotMarketLaunchProposals: [],
        perpetualMarketLaunchProposals: [],
        expiryFuturesMarketLaunchProposals: [],
        tradingRewardCampaignUpdateProposal: undefined,
        binaryOptionsMarketLaunchProposals: [],
        binaryOptionsParamUpdateProposals: [],
        denomDecimalsUpdateProposal: undefined,
        feeDiscountProposal: undefined,
        marketForcedSettlementProposals: [],
    };
}
export const BatchExchangeModificationProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.spotMarketParamUpdateProposals) {
            SpotMarketParamUpdateProposal.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.derivativeMarketParamUpdateProposals) {
            DerivativeMarketParamUpdateProposal.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.spotMarketLaunchProposals) {
            SpotMarketLaunchProposal.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.perpetualMarketLaunchProposals) {
            PerpetualMarketLaunchProposal.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.expiryFuturesMarketLaunchProposals) {
            ExpiryFuturesMarketLaunchProposal.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.tradingRewardCampaignUpdateProposal !== undefined) {
            TradingRewardCampaignUpdateProposal.encode(message.tradingRewardCampaignUpdateProposal, writer.uint32(66).fork())
                .ldelim();
        }
        for (const v of message.binaryOptionsMarketLaunchProposals) {
            BinaryOptionsMarketLaunchProposal.encode(v, writer.uint32(74).fork()).ldelim();
        }
        for (const v of message.binaryOptionsParamUpdateProposals) {
            BinaryOptionsMarketParamUpdateProposal.encode(v, writer.uint32(82).fork()).ldelim();
        }
        if (message.denomDecimalsUpdateProposal !== undefined) {
            UpdateDenomDecimalsProposal.encode(message.denomDecimalsUpdateProposal, writer.uint32(90).fork()).ldelim();
        }
        if (message.feeDiscountProposal !== undefined) {
            FeeDiscountProposal.encode(message.feeDiscountProposal, writer.uint32(98).fork()).ldelim();
        }
        for (const v of message.marketForcedSettlementProposals) {
            MarketForcedSettlementProposal.encode(v, writer.uint32(106).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchExchangeModificationProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.spotMarketParamUpdateProposals.push(SpotMarketParamUpdateProposal.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.derivativeMarketParamUpdateProposals.push(DerivativeMarketParamUpdateProposal.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.spotMarketLaunchProposals.push(SpotMarketLaunchProposal.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.perpetualMarketLaunchProposals.push(PerpetualMarketLaunchProposal.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.expiryFuturesMarketLaunchProposals.push(ExpiryFuturesMarketLaunchProposal.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.tradingRewardCampaignUpdateProposal = TradingRewardCampaignUpdateProposal.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.binaryOptionsMarketLaunchProposals.push(BinaryOptionsMarketLaunchProposal.decode(reader, reader.uint32()));
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.binaryOptionsParamUpdateProposals.push(BinaryOptionsMarketParamUpdateProposal.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.denomDecimalsUpdateProposal = UpdateDenomDecimalsProposal.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.feeDiscountProposal = FeeDiscountProposal.decode(reader, reader.uint32());
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.marketForcedSettlementProposals.push(MarketForcedSettlementProposal.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            spotMarketParamUpdateProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.spotMarketParamUpdateProposals)
                ? object.spotMarketParamUpdateProposals.map((e) => SpotMarketParamUpdateProposal.fromJSON(e))
                : [],
            derivativeMarketParamUpdateProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.derivativeMarketParamUpdateProposals)
                ? object.derivativeMarketParamUpdateProposals.map((e) => DerivativeMarketParamUpdateProposal.fromJSON(e))
                : [],
            spotMarketLaunchProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.spotMarketLaunchProposals)
                ? object.spotMarketLaunchProposals.map((e) => SpotMarketLaunchProposal.fromJSON(e))
                : [],
            perpetualMarketLaunchProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.perpetualMarketLaunchProposals)
                ? object.perpetualMarketLaunchProposals.map((e) => PerpetualMarketLaunchProposal.fromJSON(e))
                : [],
            expiryFuturesMarketLaunchProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.expiryFuturesMarketLaunchProposals)
                ? object.expiryFuturesMarketLaunchProposals.map((e) => ExpiryFuturesMarketLaunchProposal.fromJSON(e))
                : [],
            tradingRewardCampaignUpdateProposal: isSet(object.tradingRewardCampaignUpdateProposal)
                ? TradingRewardCampaignUpdateProposal.fromJSON(object.tradingRewardCampaignUpdateProposal)
                : undefined,
            binaryOptionsMarketLaunchProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.binaryOptionsMarketLaunchProposals)
                ? object.binaryOptionsMarketLaunchProposals.map((e) => BinaryOptionsMarketLaunchProposal.fromJSON(e))
                : [],
            binaryOptionsParamUpdateProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.binaryOptionsParamUpdateProposals)
                ? object.binaryOptionsParamUpdateProposals.map((e) => BinaryOptionsMarketParamUpdateProposal.fromJSON(e))
                : [],
            denomDecimalsUpdateProposal: isSet(object.denomDecimalsUpdateProposal)
                ? UpdateDenomDecimalsProposal.fromJSON(object.denomDecimalsUpdateProposal)
                : undefined,
            feeDiscountProposal: isSet(object.feeDiscountProposal)
                ? FeeDiscountProposal.fromJSON(object.feeDiscountProposal)
                : undefined,
            marketForcedSettlementProposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.marketForcedSettlementProposals)
                ? object.marketForcedSettlementProposals.map((e) => MarketForcedSettlementProposal.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.spotMarketParamUpdateProposals) === null || _a === void 0 ? void 0 : _a.length) {
            obj.spotMarketParamUpdateProposals = message.spotMarketParamUpdateProposals.map((e) => SpotMarketParamUpdateProposal.toJSON(e));
        }
        if ((_b = message.derivativeMarketParamUpdateProposals) === null || _b === void 0 ? void 0 : _b.length) {
            obj.derivativeMarketParamUpdateProposals = message.derivativeMarketParamUpdateProposals.map((e) => DerivativeMarketParamUpdateProposal.toJSON(e));
        }
        if ((_c = message.spotMarketLaunchProposals) === null || _c === void 0 ? void 0 : _c.length) {
            obj.spotMarketLaunchProposals = message.spotMarketLaunchProposals.map((e) => SpotMarketLaunchProposal.toJSON(e));
        }
        if ((_d = message.perpetualMarketLaunchProposals) === null || _d === void 0 ? void 0 : _d.length) {
            obj.perpetualMarketLaunchProposals = message.perpetualMarketLaunchProposals.map((e) => PerpetualMarketLaunchProposal.toJSON(e));
        }
        if ((_e = message.expiryFuturesMarketLaunchProposals) === null || _e === void 0 ? void 0 : _e.length) {
            obj.expiryFuturesMarketLaunchProposals = message.expiryFuturesMarketLaunchProposals.map((e) => ExpiryFuturesMarketLaunchProposal.toJSON(e));
        }
        if (message.tradingRewardCampaignUpdateProposal !== undefined) {
            obj.tradingRewardCampaignUpdateProposal = TradingRewardCampaignUpdateProposal.toJSON(message.tradingRewardCampaignUpdateProposal);
        }
        if ((_f = message.binaryOptionsMarketLaunchProposals) === null || _f === void 0 ? void 0 : _f.length) {
            obj.binaryOptionsMarketLaunchProposals = message.binaryOptionsMarketLaunchProposals.map((e) => BinaryOptionsMarketLaunchProposal.toJSON(e));
        }
        if ((_g = message.binaryOptionsParamUpdateProposals) === null || _g === void 0 ? void 0 : _g.length) {
            obj.binaryOptionsParamUpdateProposals = message.binaryOptionsParamUpdateProposals.map((e) => BinaryOptionsMarketParamUpdateProposal.toJSON(e));
        }
        if (message.denomDecimalsUpdateProposal !== undefined) {
            obj.denomDecimalsUpdateProposal = UpdateDenomDecimalsProposal.toJSON(message.denomDecimalsUpdateProposal);
        }
        if (message.feeDiscountProposal !== undefined) {
            obj.feeDiscountProposal = FeeDiscountProposal.toJSON(message.feeDiscountProposal);
        }
        if ((_h = message.marketForcedSettlementProposals) === null || _h === void 0 ? void 0 : _h.length) {
            obj.marketForcedSettlementProposals = message.marketForcedSettlementProposals.map((e) => MarketForcedSettlementProposal.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return BatchExchangeModificationProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseBatchExchangeModificationProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.spotMarketParamUpdateProposals =
            ((_c = object.spotMarketParamUpdateProposals) === null || _c === void 0 ? void 0 : _c.map((e) => SpotMarketParamUpdateProposal.fromPartial(e))) || [];
        message.derivativeMarketParamUpdateProposals =
            ((_d = object.derivativeMarketParamUpdateProposals) === null || _d === void 0 ? void 0 : _d.map((e) => DerivativeMarketParamUpdateProposal.fromPartial(e))) || [];
        message.spotMarketLaunchProposals =
            ((_e = object.spotMarketLaunchProposals) === null || _e === void 0 ? void 0 : _e.map((e) => SpotMarketLaunchProposal.fromPartial(e))) || [];
        message.perpetualMarketLaunchProposals =
            ((_f = object.perpetualMarketLaunchProposals) === null || _f === void 0 ? void 0 : _f.map((e) => PerpetualMarketLaunchProposal.fromPartial(e))) || [];
        message.expiryFuturesMarketLaunchProposals =
            ((_g = object.expiryFuturesMarketLaunchProposals) === null || _g === void 0 ? void 0 : _g.map((e) => ExpiryFuturesMarketLaunchProposal.fromPartial(e))) || [];
        message.tradingRewardCampaignUpdateProposal =
            (object.tradingRewardCampaignUpdateProposal !== undefined && object.tradingRewardCampaignUpdateProposal !== null)
                ? TradingRewardCampaignUpdateProposal.fromPartial(object.tradingRewardCampaignUpdateProposal)
                : undefined;
        message.binaryOptionsMarketLaunchProposals =
            ((_h = object.binaryOptionsMarketLaunchProposals) === null || _h === void 0 ? void 0 : _h.map((e) => BinaryOptionsMarketLaunchProposal.fromPartial(e))) || [];
        message.binaryOptionsParamUpdateProposals =
            ((_j = object.binaryOptionsParamUpdateProposals) === null || _j === void 0 ? void 0 : _j.map((e) => BinaryOptionsMarketParamUpdateProposal.fromPartial(e))) || [];
        message.denomDecimalsUpdateProposal =
            (object.denomDecimalsUpdateProposal !== undefined && object.denomDecimalsUpdateProposal !== null)
                ? UpdateDenomDecimalsProposal.fromPartial(object.denomDecimalsUpdateProposal)
                : undefined;
        message.feeDiscountProposal = (object.feeDiscountProposal !== undefined && object.feeDiscountProposal !== null)
            ? FeeDiscountProposal.fromPartial(object.feeDiscountProposal)
            : undefined;
        message.marketForcedSettlementProposals =
            ((_k = object.marketForcedSettlementProposals) === null || _k === void 0 ? void 0 : _k.map((e) => MarketForcedSettlementProposal.fromPartial(e))) || [];
        return message;
    },
};
function createBaseSpotMarketLaunchProposal() {
    return {
        title: "",
        description: "",
        ticker: "",
        baseDenom: "",
        quoteDenom: "",
        minPriceTickSize: "",
        minQuantityTickSize: "",
        makerFeeRate: "",
        takerFeeRate: "",
    };
}
export const SpotMarketLaunchProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.ticker !== "") {
            writer.uint32(26).string(message.ticker);
        }
        if (message.baseDenom !== "") {
            writer.uint32(34).string(message.baseDenom);
        }
        if (message.quoteDenom !== "") {
            writer.uint32(42).string(message.quoteDenom);
        }
        if (message.minPriceTickSize !== "") {
            writer.uint32(50).string(message.minPriceTickSize);
        }
        if (message.minQuantityTickSize !== "") {
            writer.uint32(58).string(message.minQuantityTickSize);
        }
        if (message.makerFeeRate !== "") {
            writer.uint32(66).string(message.makerFeeRate);
        }
        if (message.takerFeeRate !== "") {
            writer.uint32(74).string(message.takerFeeRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpotMarketLaunchProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.ticker = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.baseDenom = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.quoteDenom = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.minPriceTickSize = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.minQuantityTickSize = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.makerFeeRate = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.takerFeeRate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
            baseDenom: isSet(object.baseDenom) ? globalThis.String(object.baseDenom) : "",
            quoteDenom: isSet(object.quoteDenom) ? globalThis.String(object.quoteDenom) : "",
            minPriceTickSize: isSet(object.minPriceTickSize) ? globalThis.String(object.minPriceTickSize) : "",
            minQuantityTickSize: isSet(object.minQuantityTickSize) ? globalThis.String(object.minQuantityTickSize) : "",
            makerFeeRate: isSet(object.makerFeeRate) ? globalThis.String(object.makerFeeRate) : "",
            takerFeeRate: isSet(object.takerFeeRate) ? globalThis.String(object.takerFeeRate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.ticker !== "") {
            obj.ticker = message.ticker;
        }
        if (message.baseDenom !== "") {
            obj.baseDenom = message.baseDenom;
        }
        if (message.quoteDenom !== "") {
            obj.quoteDenom = message.quoteDenom;
        }
        if (message.minPriceTickSize !== "") {
            obj.minPriceTickSize = message.minPriceTickSize;
        }
        if (message.minQuantityTickSize !== "") {
            obj.minQuantityTickSize = message.minQuantityTickSize;
        }
        if (message.makerFeeRate !== "") {
            obj.makerFeeRate = message.makerFeeRate;
        }
        if (message.takerFeeRate !== "") {
            obj.takerFeeRate = message.takerFeeRate;
        }
        return obj;
    },
    create(base) {
        return SpotMarketLaunchProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const message = createBaseSpotMarketLaunchProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.ticker = (_c = object.ticker) !== null && _c !== void 0 ? _c : "";
        message.baseDenom = (_d = object.baseDenom) !== null && _d !== void 0 ? _d : "";
        message.quoteDenom = (_e = object.quoteDenom) !== null && _e !== void 0 ? _e : "";
        message.minPriceTickSize = (_f = object.minPriceTickSize) !== null && _f !== void 0 ? _f : "";
        message.minQuantityTickSize = (_g = object.minQuantityTickSize) !== null && _g !== void 0 ? _g : "";
        message.makerFeeRate = (_h = object.makerFeeRate) !== null && _h !== void 0 ? _h : "";
        message.takerFeeRate = (_j = object.takerFeeRate) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBasePerpetualMarketLaunchProposal() {
    return {
        title: "",
        description: "",
        ticker: "",
        quoteDenom: "",
        oracleBase: "",
        oracleQuote: "",
        oracleScaleFactor: 0,
        oracleType: 0,
        initialMarginRatio: "",
        maintenanceMarginRatio: "",
        makerFeeRate: "",
        takerFeeRate: "",
        minPriceTickSize: "",
        minQuantityTickSize: "",
    };
}
export const PerpetualMarketLaunchProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.ticker !== "") {
            writer.uint32(26).string(message.ticker);
        }
        if (message.quoteDenom !== "") {
            writer.uint32(34).string(message.quoteDenom);
        }
        if (message.oracleBase !== "") {
            writer.uint32(42).string(message.oracleBase);
        }
        if (message.oracleQuote !== "") {
            writer.uint32(50).string(message.oracleQuote);
        }
        if (message.oracleScaleFactor !== 0) {
            writer.uint32(56).uint32(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            writer.uint32(64).int32(message.oracleType);
        }
        if (message.initialMarginRatio !== "") {
            writer.uint32(74).string(message.initialMarginRatio);
        }
        if (message.maintenanceMarginRatio !== "") {
            writer.uint32(82).string(message.maintenanceMarginRatio);
        }
        if (message.makerFeeRate !== "") {
            writer.uint32(90).string(message.makerFeeRate);
        }
        if (message.takerFeeRate !== "") {
            writer.uint32(98).string(message.takerFeeRate);
        }
        if (message.minPriceTickSize !== "") {
            writer.uint32(106).string(message.minPriceTickSize);
        }
        if (message.minQuantityTickSize !== "") {
            writer.uint32(114).string(message.minQuantityTickSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerpetualMarketLaunchProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.ticker = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.quoteDenom = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.oracleBase = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.oracleQuote = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.oracleScaleFactor = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.oracleType = reader.int32();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.initialMarginRatio = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.maintenanceMarginRatio = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.makerFeeRate = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.takerFeeRate = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.minPriceTickSize = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.minQuantityTickSize = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
            quoteDenom: isSet(object.quoteDenom) ? globalThis.String(object.quoteDenom) : "",
            oracleBase: isSet(object.oracleBase) ? globalThis.String(object.oracleBase) : "",
            oracleQuote: isSet(object.oracleQuote) ? globalThis.String(object.oracleQuote) : "",
            oracleScaleFactor: isSet(object.oracleScaleFactor) ? globalThis.Number(object.oracleScaleFactor) : 0,
            oracleType: isSet(object.oracleType) ? oracleTypeFromJSON(object.oracleType) : 0,
            initialMarginRatio: isSet(object.initialMarginRatio) ? globalThis.String(object.initialMarginRatio) : "",
            maintenanceMarginRatio: isSet(object.maintenanceMarginRatio)
                ? globalThis.String(object.maintenanceMarginRatio)
                : "",
            makerFeeRate: isSet(object.makerFeeRate) ? globalThis.String(object.makerFeeRate) : "",
            takerFeeRate: isSet(object.takerFeeRate) ? globalThis.String(object.takerFeeRate) : "",
            minPriceTickSize: isSet(object.minPriceTickSize) ? globalThis.String(object.minPriceTickSize) : "",
            minQuantityTickSize: isSet(object.minQuantityTickSize) ? globalThis.String(object.minQuantityTickSize) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.ticker !== "") {
            obj.ticker = message.ticker;
        }
        if (message.quoteDenom !== "") {
            obj.quoteDenom = message.quoteDenom;
        }
        if (message.oracleBase !== "") {
            obj.oracleBase = message.oracleBase;
        }
        if (message.oracleQuote !== "") {
            obj.oracleQuote = message.oracleQuote;
        }
        if (message.oracleScaleFactor !== 0) {
            obj.oracleScaleFactor = Math.round(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            obj.oracleType = oracleTypeToJSON(message.oracleType);
        }
        if (message.initialMarginRatio !== "") {
            obj.initialMarginRatio = message.initialMarginRatio;
        }
        if (message.maintenanceMarginRatio !== "") {
            obj.maintenanceMarginRatio = message.maintenanceMarginRatio;
        }
        if (message.makerFeeRate !== "") {
            obj.makerFeeRate = message.makerFeeRate;
        }
        if (message.takerFeeRate !== "") {
            obj.takerFeeRate = message.takerFeeRate;
        }
        if (message.minPriceTickSize !== "") {
            obj.minPriceTickSize = message.minPriceTickSize;
        }
        if (message.minQuantityTickSize !== "") {
            obj.minQuantityTickSize = message.minQuantityTickSize;
        }
        return obj;
    },
    create(base) {
        return PerpetualMarketLaunchProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        const message = createBasePerpetualMarketLaunchProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.ticker = (_c = object.ticker) !== null && _c !== void 0 ? _c : "";
        message.quoteDenom = (_d = object.quoteDenom) !== null && _d !== void 0 ? _d : "";
        message.oracleBase = (_e = object.oracleBase) !== null && _e !== void 0 ? _e : "";
        message.oracleQuote = (_f = object.oracleQuote) !== null && _f !== void 0 ? _f : "";
        message.oracleScaleFactor = (_g = object.oracleScaleFactor) !== null && _g !== void 0 ? _g : 0;
        message.oracleType = (_h = object.oracleType) !== null && _h !== void 0 ? _h : 0;
        message.initialMarginRatio = (_j = object.initialMarginRatio) !== null && _j !== void 0 ? _j : "";
        message.maintenanceMarginRatio = (_k = object.maintenanceMarginRatio) !== null && _k !== void 0 ? _k : "";
        message.makerFeeRate = (_l = object.makerFeeRate) !== null && _l !== void 0 ? _l : "";
        message.takerFeeRate = (_m = object.takerFeeRate) !== null && _m !== void 0 ? _m : "";
        message.minPriceTickSize = (_o = object.minPriceTickSize) !== null && _o !== void 0 ? _o : "";
        message.minQuantityTickSize = (_p = object.minQuantityTickSize) !== null && _p !== void 0 ? _p : "";
        return message;
    },
};
function createBaseBinaryOptionsMarketLaunchProposal() {
    return {
        title: "",
        description: "",
        ticker: "",
        oracleSymbol: "",
        oracleProvider: "",
        oracleType: 0,
        oracleScaleFactor: 0,
        expirationTimestamp: "0",
        settlementTimestamp: "0",
        admin: "",
        quoteDenom: "",
        makerFeeRate: "",
        takerFeeRate: "",
        minPriceTickSize: "",
        minQuantityTickSize: "",
    };
}
export const BinaryOptionsMarketLaunchProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.ticker !== "") {
            writer.uint32(26).string(message.ticker);
        }
        if (message.oracleSymbol !== "") {
            writer.uint32(34).string(message.oracleSymbol);
        }
        if (message.oracleProvider !== "") {
            writer.uint32(42).string(message.oracleProvider);
        }
        if (message.oracleType !== 0) {
            writer.uint32(48).int32(message.oracleType);
        }
        if (message.oracleScaleFactor !== 0) {
            writer.uint32(56).uint32(message.oracleScaleFactor);
        }
        if (message.expirationTimestamp !== "0") {
            writer.uint32(64).int64(message.expirationTimestamp);
        }
        if (message.settlementTimestamp !== "0") {
            writer.uint32(72).int64(message.settlementTimestamp);
        }
        if (message.admin !== "") {
            writer.uint32(82).string(message.admin);
        }
        if (message.quoteDenom !== "") {
            writer.uint32(90).string(message.quoteDenom);
        }
        if (message.makerFeeRate !== "") {
            writer.uint32(98).string(message.makerFeeRate);
        }
        if (message.takerFeeRate !== "") {
            writer.uint32(106).string(message.takerFeeRate);
        }
        if (message.minPriceTickSize !== "") {
            writer.uint32(114).string(message.minPriceTickSize);
        }
        if (message.minQuantityTickSize !== "") {
            writer.uint32(122).string(message.minQuantityTickSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBinaryOptionsMarketLaunchProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.ticker = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.oracleSymbol = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.oracleProvider = reader.string();
                    continue;
                case 6:
                    if (tag !== 48) {
                        break;
                    }
                    message.oracleType = reader.int32();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.oracleScaleFactor = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.expirationTimestamp = longToString(reader.int64());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.settlementTimestamp = longToString(reader.int64());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.admin = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.quoteDenom = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.makerFeeRate = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.takerFeeRate = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.minPriceTickSize = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.minQuantityTickSize = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
            oracleSymbol: isSet(object.oracleSymbol) ? globalThis.String(object.oracleSymbol) : "",
            oracleProvider: isSet(object.oracleProvider) ? globalThis.String(object.oracleProvider) : "",
            oracleType: isSet(object.oracleType) ? oracleTypeFromJSON(object.oracleType) : 0,
            oracleScaleFactor: isSet(object.oracleScaleFactor) ? globalThis.Number(object.oracleScaleFactor) : 0,
            expirationTimestamp: isSet(object.expirationTimestamp) ? globalThis.String(object.expirationTimestamp) : "0",
            settlementTimestamp: isSet(object.settlementTimestamp) ? globalThis.String(object.settlementTimestamp) : "0",
            admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
            quoteDenom: isSet(object.quoteDenom) ? globalThis.String(object.quoteDenom) : "",
            makerFeeRate: isSet(object.makerFeeRate) ? globalThis.String(object.makerFeeRate) : "",
            takerFeeRate: isSet(object.takerFeeRate) ? globalThis.String(object.takerFeeRate) : "",
            minPriceTickSize: isSet(object.minPriceTickSize) ? globalThis.String(object.minPriceTickSize) : "",
            minQuantityTickSize: isSet(object.minQuantityTickSize) ? globalThis.String(object.minQuantityTickSize) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.ticker !== "") {
            obj.ticker = message.ticker;
        }
        if (message.oracleSymbol !== "") {
            obj.oracleSymbol = message.oracleSymbol;
        }
        if (message.oracleProvider !== "") {
            obj.oracleProvider = message.oracleProvider;
        }
        if (message.oracleType !== 0) {
            obj.oracleType = oracleTypeToJSON(message.oracleType);
        }
        if (message.oracleScaleFactor !== 0) {
            obj.oracleScaleFactor = Math.round(message.oracleScaleFactor);
        }
        if (message.expirationTimestamp !== "0") {
            obj.expirationTimestamp = message.expirationTimestamp;
        }
        if (message.settlementTimestamp !== "0") {
            obj.settlementTimestamp = message.settlementTimestamp;
        }
        if (message.admin !== "") {
            obj.admin = message.admin;
        }
        if (message.quoteDenom !== "") {
            obj.quoteDenom = message.quoteDenom;
        }
        if (message.makerFeeRate !== "") {
            obj.makerFeeRate = message.makerFeeRate;
        }
        if (message.takerFeeRate !== "") {
            obj.takerFeeRate = message.takerFeeRate;
        }
        if (message.minPriceTickSize !== "") {
            obj.minPriceTickSize = message.minPriceTickSize;
        }
        if (message.minQuantityTickSize !== "") {
            obj.minQuantityTickSize = message.minQuantityTickSize;
        }
        return obj;
    },
    create(base) {
        return BinaryOptionsMarketLaunchProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseBinaryOptionsMarketLaunchProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.ticker = (_c = object.ticker) !== null && _c !== void 0 ? _c : "";
        message.oracleSymbol = (_d = object.oracleSymbol) !== null && _d !== void 0 ? _d : "";
        message.oracleProvider = (_e = object.oracleProvider) !== null && _e !== void 0 ? _e : "";
        message.oracleType = (_f = object.oracleType) !== null && _f !== void 0 ? _f : 0;
        message.oracleScaleFactor = (_g = object.oracleScaleFactor) !== null && _g !== void 0 ? _g : 0;
        message.expirationTimestamp = (_h = object.expirationTimestamp) !== null && _h !== void 0 ? _h : "0";
        message.settlementTimestamp = (_j = object.settlementTimestamp) !== null && _j !== void 0 ? _j : "0";
        message.admin = (_k = object.admin) !== null && _k !== void 0 ? _k : "";
        message.quoteDenom = (_l = object.quoteDenom) !== null && _l !== void 0 ? _l : "";
        message.makerFeeRate = (_m = object.makerFeeRate) !== null && _m !== void 0 ? _m : "";
        message.takerFeeRate = (_o = object.takerFeeRate) !== null && _o !== void 0 ? _o : "";
        message.minPriceTickSize = (_p = object.minPriceTickSize) !== null && _p !== void 0 ? _p : "";
        message.minQuantityTickSize = (_q = object.minQuantityTickSize) !== null && _q !== void 0 ? _q : "";
        return message;
    },
};
function createBaseExpiryFuturesMarketLaunchProposal() {
    return {
        title: "",
        description: "",
        ticker: "",
        quoteDenom: "",
        oracleBase: "",
        oracleQuote: "",
        oracleScaleFactor: 0,
        oracleType: 0,
        expiry: "0",
        initialMarginRatio: "",
        maintenanceMarginRatio: "",
        makerFeeRate: "",
        takerFeeRate: "",
        minPriceTickSize: "",
        minQuantityTickSize: "",
    };
}
export const ExpiryFuturesMarketLaunchProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.ticker !== "") {
            writer.uint32(26).string(message.ticker);
        }
        if (message.quoteDenom !== "") {
            writer.uint32(34).string(message.quoteDenom);
        }
        if (message.oracleBase !== "") {
            writer.uint32(42).string(message.oracleBase);
        }
        if (message.oracleQuote !== "") {
            writer.uint32(50).string(message.oracleQuote);
        }
        if (message.oracleScaleFactor !== 0) {
            writer.uint32(56).uint32(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            writer.uint32(64).int32(message.oracleType);
        }
        if (message.expiry !== "0") {
            writer.uint32(72).int64(message.expiry);
        }
        if (message.initialMarginRatio !== "") {
            writer.uint32(82).string(message.initialMarginRatio);
        }
        if (message.maintenanceMarginRatio !== "") {
            writer.uint32(90).string(message.maintenanceMarginRatio);
        }
        if (message.makerFeeRate !== "") {
            writer.uint32(98).string(message.makerFeeRate);
        }
        if (message.takerFeeRate !== "") {
            writer.uint32(106).string(message.takerFeeRate);
        }
        if (message.minPriceTickSize !== "") {
            writer.uint32(114).string(message.minPriceTickSize);
        }
        if (message.minQuantityTickSize !== "") {
            writer.uint32(122).string(message.minQuantityTickSize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseExpiryFuturesMarketLaunchProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.ticker = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.quoteDenom = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.oracleBase = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.oracleQuote = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.oracleScaleFactor = reader.uint32();
                    continue;
                case 8:
                    if (tag !== 64) {
                        break;
                    }
                    message.oracleType = reader.int32();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.expiry = longToString(reader.int64());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.initialMarginRatio = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.maintenanceMarginRatio = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.makerFeeRate = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.takerFeeRate = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.minPriceTickSize = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.minQuantityTickSize = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            ticker: isSet(object.ticker) ? globalThis.String(object.ticker) : "",
            quoteDenom: isSet(object.quoteDenom) ? globalThis.String(object.quoteDenom) : "",
            oracleBase: isSet(object.oracleBase) ? globalThis.String(object.oracleBase) : "",
            oracleQuote: isSet(object.oracleQuote) ? globalThis.String(object.oracleQuote) : "",
            oracleScaleFactor: isSet(object.oracleScaleFactor) ? globalThis.Number(object.oracleScaleFactor) : 0,
            oracleType: isSet(object.oracleType) ? oracleTypeFromJSON(object.oracleType) : 0,
            expiry: isSet(object.expiry) ? globalThis.String(object.expiry) : "0",
            initialMarginRatio: isSet(object.initialMarginRatio) ? globalThis.String(object.initialMarginRatio) : "",
            maintenanceMarginRatio: isSet(object.maintenanceMarginRatio)
                ? globalThis.String(object.maintenanceMarginRatio)
                : "",
            makerFeeRate: isSet(object.makerFeeRate) ? globalThis.String(object.makerFeeRate) : "",
            takerFeeRate: isSet(object.takerFeeRate) ? globalThis.String(object.takerFeeRate) : "",
            minPriceTickSize: isSet(object.minPriceTickSize) ? globalThis.String(object.minPriceTickSize) : "",
            minQuantityTickSize: isSet(object.minQuantityTickSize) ? globalThis.String(object.minQuantityTickSize) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.ticker !== "") {
            obj.ticker = message.ticker;
        }
        if (message.quoteDenom !== "") {
            obj.quoteDenom = message.quoteDenom;
        }
        if (message.oracleBase !== "") {
            obj.oracleBase = message.oracleBase;
        }
        if (message.oracleQuote !== "") {
            obj.oracleQuote = message.oracleQuote;
        }
        if (message.oracleScaleFactor !== 0) {
            obj.oracleScaleFactor = Math.round(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            obj.oracleType = oracleTypeToJSON(message.oracleType);
        }
        if (message.expiry !== "0") {
            obj.expiry = message.expiry;
        }
        if (message.initialMarginRatio !== "") {
            obj.initialMarginRatio = message.initialMarginRatio;
        }
        if (message.maintenanceMarginRatio !== "") {
            obj.maintenanceMarginRatio = message.maintenanceMarginRatio;
        }
        if (message.makerFeeRate !== "") {
            obj.makerFeeRate = message.makerFeeRate;
        }
        if (message.takerFeeRate !== "") {
            obj.takerFeeRate = message.takerFeeRate;
        }
        if (message.minPriceTickSize !== "") {
            obj.minPriceTickSize = message.minPriceTickSize;
        }
        if (message.minQuantityTickSize !== "") {
            obj.minQuantityTickSize = message.minQuantityTickSize;
        }
        return obj;
    },
    create(base) {
        return ExpiryFuturesMarketLaunchProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        const message = createBaseExpiryFuturesMarketLaunchProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.ticker = (_c = object.ticker) !== null && _c !== void 0 ? _c : "";
        message.quoteDenom = (_d = object.quoteDenom) !== null && _d !== void 0 ? _d : "";
        message.oracleBase = (_e = object.oracleBase) !== null && _e !== void 0 ? _e : "";
        message.oracleQuote = (_f = object.oracleQuote) !== null && _f !== void 0 ? _f : "";
        message.oracleScaleFactor = (_g = object.oracleScaleFactor) !== null && _g !== void 0 ? _g : 0;
        message.oracleType = (_h = object.oracleType) !== null && _h !== void 0 ? _h : 0;
        message.expiry = (_j = object.expiry) !== null && _j !== void 0 ? _j : "0";
        message.initialMarginRatio = (_k = object.initialMarginRatio) !== null && _k !== void 0 ? _k : "";
        message.maintenanceMarginRatio = (_l = object.maintenanceMarginRatio) !== null && _l !== void 0 ? _l : "";
        message.makerFeeRate = (_m = object.makerFeeRate) !== null && _m !== void 0 ? _m : "";
        message.takerFeeRate = (_o = object.takerFeeRate) !== null && _o !== void 0 ? _o : "";
        message.minPriceTickSize = (_p = object.minPriceTickSize) !== null && _p !== void 0 ? _p : "";
        message.minQuantityTickSize = (_q = object.minQuantityTickSize) !== null && _q !== void 0 ? _q : "";
        return message;
    },
};
function createBaseDerivativeMarketParamUpdateProposal() {
    return {
        title: "",
        description: "",
        marketId: "",
        initialMarginRatio: "",
        maintenanceMarginRatio: "",
        makerFeeRate: "",
        takerFeeRate: "",
        relayerFeeShareRate: "",
        minPriceTickSize: "",
        minQuantityTickSize: "",
        HourlyInterestRate: "",
        HourlyFundingRateCap: "",
        status: 0,
        oracleParams: undefined,
    };
}
export const DerivativeMarketParamUpdateProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.marketId !== "") {
            writer.uint32(26).string(message.marketId);
        }
        if (message.initialMarginRatio !== "") {
            writer.uint32(34).string(message.initialMarginRatio);
        }
        if (message.maintenanceMarginRatio !== "") {
            writer.uint32(42).string(message.maintenanceMarginRatio);
        }
        if (message.makerFeeRate !== "") {
            writer.uint32(50).string(message.makerFeeRate);
        }
        if (message.takerFeeRate !== "") {
            writer.uint32(58).string(message.takerFeeRate);
        }
        if (message.relayerFeeShareRate !== "") {
            writer.uint32(66).string(message.relayerFeeShareRate);
        }
        if (message.minPriceTickSize !== "") {
            writer.uint32(74).string(message.minPriceTickSize);
        }
        if (message.minQuantityTickSize !== "") {
            writer.uint32(82).string(message.minQuantityTickSize);
        }
        if (message.HourlyInterestRate !== "") {
            writer.uint32(90).string(message.HourlyInterestRate);
        }
        if (message.HourlyFundingRateCap !== "") {
            writer.uint32(98).string(message.HourlyFundingRateCap);
        }
        if (message.status !== 0) {
            writer.uint32(104).int32(message.status);
        }
        if (message.oracleParams !== undefined) {
            OracleParams.encode(message.oracleParams, writer.uint32(114).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDerivativeMarketParamUpdateProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.marketId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.initialMarginRatio = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.maintenanceMarginRatio = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.makerFeeRate = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.takerFeeRate = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.relayerFeeShareRate = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.minPriceTickSize = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.minQuantityTickSize = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.HourlyInterestRate = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.HourlyFundingRateCap = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.oracleParams = OracleParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            marketId: isSet(object.marketId) ? globalThis.String(object.marketId) : "",
            initialMarginRatio: isSet(object.initialMarginRatio) ? globalThis.String(object.initialMarginRatio) : "",
            maintenanceMarginRatio: isSet(object.maintenanceMarginRatio)
                ? globalThis.String(object.maintenanceMarginRatio)
                : "",
            makerFeeRate: isSet(object.makerFeeRate) ? globalThis.String(object.makerFeeRate) : "",
            takerFeeRate: isSet(object.takerFeeRate) ? globalThis.String(object.takerFeeRate) : "",
            relayerFeeShareRate: isSet(object.relayerFeeShareRate) ? globalThis.String(object.relayerFeeShareRate) : "",
            minPriceTickSize: isSet(object.minPriceTickSize) ? globalThis.String(object.minPriceTickSize) : "",
            minQuantityTickSize: isSet(object.minQuantityTickSize) ? globalThis.String(object.minQuantityTickSize) : "",
            HourlyInterestRate: isSet(object.HourlyInterestRate) ? globalThis.String(object.HourlyInterestRate) : "",
            HourlyFundingRateCap: isSet(object.HourlyFundingRateCap) ? globalThis.String(object.HourlyFundingRateCap) : "",
            status: isSet(object.status) ? marketStatusFromJSON(object.status) : 0,
            oracleParams: isSet(object.oracleParams) ? OracleParams.fromJSON(object.oracleParams) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.marketId !== "") {
            obj.marketId = message.marketId;
        }
        if (message.initialMarginRatio !== "") {
            obj.initialMarginRatio = message.initialMarginRatio;
        }
        if (message.maintenanceMarginRatio !== "") {
            obj.maintenanceMarginRatio = message.maintenanceMarginRatio;
        }
        if (message.makerFeeRate !== "") {
            obj.makerFeeRate = message.makerFeeRate;
        }
        if (message.takerFeeRate !== "") {
            obj.takerFeeRate = message.takerFeeRate;
        }
        if (message.relayerFeeShareRate !== "") {
            obj.relayerFeeShareRate = message.relayerFeeShareRate;
        }
        if (message.minPriceTickSize !== "") {
            obj.minPriceTickSize = message.minPriceTickSize;
        }
        if (message.minQuantityTickSize !== "") {
            obj.minQuantityTickSize = message.minQuantityTickSize;
        }
        if (message.HourlyInterestRate !== "") {
            obj.HourlyInterestRate = message.HourlyInterestRate;
        }
        if (message.HourlyFundingRateCap !== "") {
            obj.HourlyFundingRateCap = message.HourlyFundingRateCap;
        }
        if (message.status !== 0) {
            obj.status = marketStatusToJSON(message.status);
        }
        if (message.oracleParams !== undefined) {
            obj.oracleParams = OracleParams.toJSON(message.oracleParams);
        }
        return obj;
    },
    create(base) {
        return DerivativeMarketParamUpdateProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseDerivativeMarketParamUpdateProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.marketId = (_c = object.marketId) !== null && _c !== void 0 ? _c : "";
        message.initialMarginRatio = (_d = object.initialMarginRatio) !== null && _d !== void 0 ? _d : "";
        message.maintenanceMarginRatio = (_e = object.maintenanceMarginRatio) !== null && _e !== void 0 ? _e : "";
        message.makerFeeRate = (_f = object.makerFeeRate) !== null && _f !== void 0 ? _f : "";
        message.takerFeeRate = (_g = object.takerFeeRate) !== null && _g !== void 0 ? _g : "";
        message.relayerFeeShareRate = (_h = object.relayerFeeShareRate) !== null && _h !== void 0 ? _h : "";
        message.minPriceTickSize = (_j = object.minPriceTickSize) !== null && _j !== void 0 ? _j : "";
        message.minQuantityTickSize = (_k = object.minQuantityTickSize) !== null && _k !== void 0 ? _k : "";
        message.HourlyInterestRate = (_l = object.HourlyInterestRate) !== null && _l !== void 0 ? _l : "";
        message.HourlyFundingRateCap = (_m = object.HourlyFundingRateCap) !== null && _m !== void 0 ? _m : "";
        message.status = (_o = object.status) !== null && _o !== void 0 ? _o : 0;
        message.oracleParams = (object.oracleParams !== undefined && object.oracleParams !== null)
            ? OracleParams.fromPartial(object.oracleParams)
            : undefined;
        return message;
    },
};
function createBaseMarketForcedSettlementProposal() {
    return { title: "", description: "", marketId: "", settlementPrice: "" };
}
export const MarketForcedSettlementProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.marketId !== "") {
            writer.uint32(26).string(message.marketId);
        }
        if (message.settlementPrice !== "") {
            writer.uint32(34).string(message.settlementPrice);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketForcedSettlementProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.marketId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.settlementPrice = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            marketId: isSet(object.marketId) ? globalThis.String(object.marketId) : "",
            settlementPrice: isSet(object.settlementPrice) ? globalThis.String(object.settlementPrice) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.marketId !== "") {
            obj.marketId = message.marketId;
        }
        if (message.settlementPrice !== "") {
            obj.settlementPrice = message.settlementPrice;
        }
        return obj;
    },
    create(base) {
        return MarketForcedSettlementProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMarketForcedSettlementProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.marketId = (_c = object.marketId) !== null && _c !== void 0 ? _c : "";
        message.settlementPrice = (_d = object.settlementPrice) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseUpdateDenomDecimalsProposal() {
    return { title: "", description: "", denomDecimals: [] };
}
export const UpdateDenomDecimalsProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.denomDecimals) {
            DenomDecimals.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateDenomDecimalsProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.denomDecimals.push(DenomDecimals.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            denomDecimals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.denomDecimals)
                ? object.denomDecimals.map((e) => DenomDecimals.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.denomDecimals) === null || _a === void 0 ? void 0 : _a.length) {
            obj.denomDecimals = message.denomDecimals.map((e) => DenomDecimals.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return UpdateDenomDecimalsProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseUpdateDenomDecimalsProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.denomDecimals = ((_c = object.denomDecimals) === null || _c === void 0 ? void 0 : _c.map((e) => DenomDecimals.fromPartial(e))) || [];
        return message;
    },
};
function createBaseBinaryOptionsMarketParamUpdateProposal() {
    return {
        title: "",
        description: "",
        marketId: "",
        makerFeeRate: "",
        takerFeeRate: "",
        relayerFeeShareRate: "",
        minPriceTickSize: "",
        minQuantityTickSize: "",
        expirationTimestamp: "0",
        settlementTimestamp: "0",
        settlementPrice: "",
        admin: "",
        status: 0,
        oracleParams: undefined,
    };
}
export const BinaryOptionsMarketParamUpdateProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.marketId !== "") {
            writer.uint32(26).string(message.marketId);
        }
        if (message.makerFeeRate !== "") {
            writer.uint32(34).string(message.makerFeeRate);
        }
        if (message.takerFeeRate !== "") {
            writer.uint32(42).string(message.takerFeeRate);
        }
        if (message.relayerFeeShareRate !== "") {
            writer.uint32(50).string(message.relayerFeeShareRate);
        }
        if (message.minPriceTickSize !== "") {
            writer.uint32(58).string(message.minPriceTickSize);
        }
        if (message.minQuantityTickSize !== "") {
            writer.uint32(66).string(message.minQuantityTickSize);
        }
        if (message.expirationTimestamp !== "0") {
            writer.uint32(72).int64(message.expirationTimestamp);
        }
        if (message.settlementTimestamp !== "0") {
            writer.uint32(80).int64(message.settlementTimestamp);
        }
        if (message.settlementPrice !== "") {
            writer.uint32(90).string(message.settlementPrice);
        }
        if (message.admin !== "") {
            writer.uint32(98).string(message.admin);
        }
        if (message.status !== 0) {
            writer.uint32(104).int32(message.status);
        }
        if (message.oracleParams !== undefined) {
            ProviderOracleParams.encode(message.oracleParams, writer.uint32(114).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBinaryOptionsMarketParamUpdateProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.marketId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.makerFeeRate = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.takerFeeRate = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.relayerFeeShareRate = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.minPriceTickSize = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.minQuantityTickSize = reader.string();
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.expirationTimestamp = longToString(reader.int64());
                    continue;
                case 10:
                    if (tag !== 80) {
                        break;
                    }
                    message.settlementTimestamp = longToString(reader.int64());
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.settlementPrice = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.admin = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.oracleParams = ProviderOracleParams.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            marketId: isSet(object.marketId) ? globalThis.String(object.marketId) : "",
            makerFeeRate: isSet(object.makerFeeRate) ? globalThis.String(object.makerFeeRate) : "",
            takerFeeRate: isSet(object.takerFeeRate) ? globalThis.String(object.takerFeeRate) : "",
            relayerFeeShareRate: isSet(object.relayerFeeShareRate) ? globalThis.String(object.relayerFeeShareRate) : "",
            minPriceTickSize: isSet(object.minPriceTickSize) ? globalThis.String(object.minPriceTickSize) : "",
            minQuantityTickSize: isSet(object.minQuantityTickSize) ? globalThis.String(object.minQuantityTickSize) : "",
            expirationTimestamp: isSet(object.expirationTimestamp) ? globalThis.String(object.expirationTimestamp) : "0",
            settlementTimestamp: isSet(object.settlementTimestamp) ? globalThis.String(object.settlementTimestamp) : "0",
            settlementPrice: isSet(object.settlementPrice) ? globalThis.String(object.settlementPrice) : "",
            admin: isSet(object.admin) ? globalThis.String(object.admin) : "",
            status: isSet(object.status) ? marketStatusFromJSON(object.status) : 0,
            oracleParams: isSet(object.oracleParams) ? ProviderOracleParams.fromJSON(object.oracleParams) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.marketId !== "") {
            obj.marketId = message.marketId;
        }
        if (message.makerFeeRate !== "") {
            obj.makerFeeRate = message.makerFeeRate;
        }
        if (message.takerFeeRate !== "") {
            obj.takerFeeRate = message.takerFeeRate;
        }
        if (message.relayerFeeShareRate !== "") {
            obj.relayerFeeShareRate = message.relayerFeeShareRate;
        }
        if (message.minPriceTickSize !== "") {
            obj.minPriceTickSize = message.minPriceTickSize;
        }
        if (message.minQuantityTickSize !== "") {
            obj.minQuantityTickSize = message.minQuantityTickSize;
        }
        if (message.expirationTimestamp !== "0") {
            obj.expirationTimestamp = message.expirationTimestamp;
        }
        if (message.settlementTimestamp !== "0") {
            obj.settlementTimestamp = message.settlementTimestamp;
        }
        if (message.settlementPrice !== "") {
            obj.settlementPrice = message.settlementPrice;
        }
        if (message.admin !== "") {
            obj.admin = message.admin;
        }
        if (message.status !== 0) {
            obj.status = marketStatusToJSON(message.status);
        }
        if (message.oracleParams !== undefined) {
            obj.oracleParams = ProviderOracleParams.toJSON(message.oracleParams);
        }
        return obj;
    },
    create(base) {
        return BinaryOptionsMarketParamUpdateProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseBinaryOptionsMarketParamUpdateProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.marketId = (_c = object.marketId) !== null && _c !== void 0 ? _c : "";
        message.makerFeeRate = (_d = object.makerFeeRate) !== null && _d !== void 0 ? _d : "";
        message.takerFeeRate = (_e = object.takerFeeRate) !== null && _e !== void 0 ? _e : "";
        message.relayerFeeShareRate = (_f = object.relayerFeeShareRate) !== null && _f !== void 0 ? _f : "";
        message.minPriceTickSize = (_g = object.minPriceTickSize) !== null && _g !== void 0 ? _g : "";
        message.minQuantityTickSize = (_h = object.minQuantityTickSize) !== null && _h !== void 0 ? _h : "";
        message.expirationTimestamp = (_j = object.expirationTimestamp) !== null && _j !== void 0 ? _j : "0";
        message.settlementTimestamp = (_k = object.settlementTimestamp) !== null && _k !== void 0 ? _k : "0";
        message.settlementPrice = (_l = object.settlementPrice) !== null && _l !== void 0 ? _l : "";
        message.admin = (_m = object.admin) !== null && _m !== void 0 ? _m : "";
        message.status = (_o = object.status) !== null && _o !== void 0 ? _o : 0;
        message.oracleParams = (object.oracleParams !== undefined && object.oracleParams !== null)
            ? ProviderOracleParams.fromPartial(object.oracleParams)
            : undefined;
        return message;
    },
};
function createBaseProviderOracleParams() {
    return { symbol: "", provider: "", oracleScaleFactor: 0, oracleType: 0 };
}
export const ProviderOracleParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.symbol !== "") {
            writer.uint32(10).string(message.symbol);
        }
        if (message.provider !== "") {
            writer.uint32(18).string(message.provider);
        }
        if (message.oracleScaleFactor !== 0) {
            writer.uint32(24).uint32(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            writer.uint32(32).int32(message.oracleType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProviderOracleParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.symbol = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.provider = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.oracleScaleFactor = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.oracleType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            symbol: isSet(object.symbol) ? globalThis.String(object.symbol) : "",
            provider: isSet(object.provider) ? globalThis.String(object.provider) : "",
            oracleScaleFactor: isSet(object.oracleScaleFactor) ? globalThis.Number(object.oracleScaleFactor) : 0,
            oracleType: isSet(object.oracleType) ? oracleTypeFromJSON(object.oracleType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.symbol !== "") {
            obj.symbol = message.symbol;
        }
        if (message.provider !== "") {
            obj.provider = message.provider;
        }
        if (message.oracleScaleFactor !== 0) {
            obj.oracleScaleFactor = Math.round(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            obj.oracleType = oracleTypeToJSON(message.oracleType);
        }
        return obj;
    },
    create(base) {
        return ProviderOracleParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseProviderOracleParams();
        message.symbol = (_a = object.symbol) !== null && _a !== void 0 ? _a : "";
        message.provider = (_b = object.provider) !== null && _b !== void 0 ? _b : "";
        message.oracleScaleFactor = (_c = object.oracleScaleFactor) !== null && _c !== void 0 ? _c : 0;
        message.oracleType = (_d = object.oracleType) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseOracleParams() {
    return { oracleBase: "", oracleQuote: "", oracleScaleFactor: 0, oracleType: 0 };
}
export const OracleParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.oracleBase !== "") {
            writer.uint32(10).string(message.oracleBase);
        }
        if (message.oracleQuote !== "") {
            writer.uint32(18).string(message.oracleQuote);
        }
        if (message.oracleScaleFactor !== 0) {
            writer.uint32(24).uint32(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            writer.uint32(32).int32(message.oracleType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOracleParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.oracleBase = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.oracleQuote = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.oracleScaleFactor = reader.uint32();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.oracleType = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            oracleBase: isSet(object.oracleBase) ? globalThis.String(object.oracleBase) : "",
            oracleQuote: isSet(object.oracleQuote) ? globalThis.String(object.oracleQuote) : "",
            oracleScaleFactor: isSet(object.oracleScaleFactor) ? globalThis.Number(object.oracleScaleFactor) : 0,
            oracleType: isSet(object.oracleType) ? oracleTypeFromJSON(object.oracleType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.oracleBase !== "") {
            obj.oracleBase = message.oracleBase;
        }
        if (message.oracleQuote !== "") {
            obj.oracleQuote = message.oracleQuote;
        }
        if (message.oracleScaleFactor !== 0) {
            obj.oracleScaleFactor = Math.round(message.oracleScaleFactor);
        }
        if (message.oracleType !== 0) {
            obj.oracleType = oracleTypeToJSON(message.oracleType);
        }
        return obj;
    },
    create(base) {
        return OracleParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseOracleParams();
        message.oracleBase = (_a = object.oracleBase) !== null && _a !== void 0 ? _a : "";
        message.oracleQuote = (_b = object.oracleQuote) !== null && _b !== void 0 ? _b : "";
        message.oracleScaleFactor = (_c = object.oracleScaleFactor) !== null && _c !== void 0 ? _c : 0;
        message.oracleType = (_d = object.oracleType) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseTradingRewardCampaignLaunchProposal() {
    return { title: "", description: "", campaignInfo: undefined, campaignRewardPools: [] };
}
export const TradingRewardCampaignLaunchProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.campaignInfo !== undefined) {
            TradingRewardCampaignInfo.encode(message.campaignInfo, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.campaignRewardPools) {
            CampaignRewardPool.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTradingRewardCampaignLaunchProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.campaignInfo = TradingRewardCampaignInfo.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.campaignRewardPools.push(CampaignRewardPool.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            campaignInfo: isSet(object.campaignInfo) ? TradingRewardCampaignInfo.fromJSON(object.campaignInfo) : undefined,
            campaignRewardPools: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.campaignRewardPools)
                ? object.campaignRewardPools.map((e) => CampaignRewardPool.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.campaignInfo !== undefined) {
            obj.campaignInfo = TradingRewardCampaignInfo.toJSON(message.campaignInfo);
        }
        if ((_a = message.campaignRewardPools) === null || _a === void 0 ? void 0 : _a.length) {
            obj.campaignRewardPools = message.campaignRewardPools.map((e) => CampaignRewardPool.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return TradingRewardCampaignLaunchProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseTradingRewardCampaignLaunchProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.campaignInfo = (object.campaignInfo !== undefined && object.campaignInfo !== null)
            ? TradingRewardCampaignInfo.fromPartial(object.campaignInfo)
            : undefined;
        message.campaignRewardPools = ((_c = object.campaignRewardPools) === null || _c === void 0 ? void 0 : _c.map((e) => CampaignRewardPool.fromPartial(e))) || [];
        return message;
    },
};
function createBaseTradingRewardCampaignUpdateProposal() {
    return {
        title: "",
        description: "",
        campaignInfo: undefined,
        campaignRewardPoolsAdditions: [],
        campaignRewardPoolsUpdates: [],
    };
}
export const TradingRewardCampaignUpdateProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.campaignInfo !== undefined) {
            TradingRewardCampaignInfo.encode(message.campaignInfo, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.campaignRewardPoolsAdditions) {
            CampaignRewardPool.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.campaignRewardPoolsUpdates) {
            CampaignRewardPool.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTradingRewardCampaignUpdateProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.campaignInfo = TradingRewardCampaignInfo.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.campaignRewardPoolsAdditions.push(CampaignRewardPool.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.campaignRewardPoolsUpdates.push(CampaignRewardPool.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            campaignInfo: isSet(object.campaignInfo) ? TradingRewardCampaignInfo.fromJSON(object.campaignInfo) : undefined,
            campaignRewardPoolsAdditions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.campaignRewardPoolsAdditions)
                ? object.campaignRewardPoolsAdditions.map((e) => CampaignRewardPool.fromJSON(e))
                : [],
            campaignRewardPoolsUpdates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.campaignRewardPoolsUpdates)
                ? object.campaignRewardPoolsUpdates.map((e) => CampaignRewardPool.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.campaignInfo !== undefined) {
            obj.campaignInfo = TradingRewardCampaignInfo.toJSON(message.campaignInfo);
        }
        if ((_a = message.campaignRewardPoolsAdditions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.campaignRewardPoolsAdditions = message.campaignRewardPoolsAdditions.map((e) => CampaignRewardPool.toJSON(e));
        }
        if ((_b = message.campaignRewardPoolsUpdates) === null || _b === void 0 ? void 0 : _b.length) {
            obj.campaignRewardPoolsUpdates = message.campaignRewardPoolsUpdates.map((e) => CampaignRewardPool.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return TradingRewardCampaignUpdateProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTradingRewardCampaignUpdateProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.campaignInfo = (object.campaignInfo !== undefined && object.campaignInfo !== null)
            ? TradingRewardCampaignInfo.fromPartial(object.campaignInfo)
            : undefined;
        message.campaignRewardPoolsAdditions =
            ((_c = object.campaignRewardPoolsAdditions) === null || _c === void 0 ? void 0 : _c.map((e) => CampaignRewardPool.fromPartial(e))) || [];
        message.campaignRewardPoolsUpdates =
            ((_d = object.campaignRewardPoolsUpdates) === null || _d === void 0 ? void 0 : _d.map((e) => CampaignRewardPool.fromPartial(e))) || [];
        return message;
    },
};
function createBaseRewardPointUpdate() {
    return { accountAddress: "", newPoints: "" };
}
export const RewardPointUpdate = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.accountAddress !== "") {
            writer.uint32(10).string(message.accountAddress);
        }
        if (message.newPoints !== "") {
            writer.uint32(98).string(message.newPoints);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRewardPointUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accountAddress = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.newPoints = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accountAddress: isSet(object.accountAddress) ? globalThis.String(object.accountAddress) : "",
            newPoints: isSet(object.newPoints) ? globalThis.String(object.newPoints) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accountAddress !== "") {
            obj.accountAddress = message.accountAddress;
        }
        if (message.newPoints !== "") {
            obj.newPoints = message.newPoints;
        }
        return obj;
    },
    create(base) {
        return RewardPointUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRewardPointUpdate();
        message.accountAddress = (_a = object.accountAddress) !== null && _a !== void 0 ? _a : "";
        message.newPoints = (_b = object.newPoints) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTradingRewardPendingPointsUpdateProposal() {
    return { title: "", description: "", pendingPoolTimestamp: "0", rewardPointUpdates: [] };
}
export const TradingRewardPendingPointsUpdateProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.pendingPoolTimestamp !== "0") {
            writer.uint32(24).int64(message.pendingPoolTimestamp);
        }
        for (const v of message.rewardPointUpdates) {
            RewardPointUpdate.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTradingRewardPendingPointsUpdateProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.pendingPoolTimestamp = longToString(reader.int64());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.rewardPointUpdates.push(RewardPointUpdate.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            pendingPoolTimestamp: isSet(object.pendingPoolTimestamp) ? globalThis.String(object.pendingPoolTimestamp) : "0",
            rewardPointUpdates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.rewardPointUpdates)
                ? object.rewardPointUpdates.map((e) => RewardPointUpdate.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.pendingPoolTimestamp !== "0") {
            obj.pendingPoolTimestamp = message.pendingPoolTimestamp;
        }
        if ((_a = message.rewardPointUpdates) === null || _a === void 0 ? void 0 : _a.length) {
            obj.rewardPointUpdates = message.rewardPointUpdates.map((e) => RewardPointUpdate.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return TradingRewardPendingPointsUpdateProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseTradingRewardPendingPointsUpdateProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.pendingPoolTimestamp = (_c = object.pendingPoolTimestamp) !== null && _c !== void 0 ? _c : "0";
        message.rewardPointUpdates = ((_d = object.rewardPointUpdates) === null || _d === void 0 ? void 0 : _d.map((e) => RewardPointUpdate.fromPartial(e))) || [];
        return message;
    },
};
function createBaseFeeDiscountProposal() {
    return { title: "", description: "", schedule: undefined };
}
export const FeeDiscountProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.schedule !== undefined) {
            FeeDiscountSchedule.encode(message.schedule, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeeDiscountProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.schedule = FeeDiscountSchedule.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            schedule: isSet(object.schedule) ? FeeDiscountSchedule.fromJSON(object.schedule) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.schedule !== undefined) {
            obj.schedule = FeeDiscountSchedule.toJSON(message.schedule);
        }
        return obj;
    },
    create(base) {
        return FeeDiscountProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFeeDiscountProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.schedule = (object.schedule !== undefined && object.schedule !== null)
            ? FeeDiscountSchedule.fromPartial(object.schedule)
            : undefined;
        return message;
    },
};
function createBaseBatchCommunityPoolSpendProposal() {
    return { title: "", description: "", proposals: [] };
}
export const BatchCommunityPoolSpendProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.proposals) {
            CommunityPoolSpendProposal.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBatchCommunityPoolSpendProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.proposals.push(CommunityPoolSpendProposal.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            proposals: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.proposals)
                ? object.proposals.map((e) => CommunityPoolSpendProposal.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.proposals) === null || _a === void 0 ? void 0 : _a.length) {
            obj.proposals = message.proposals.map((e) => CommunityPoolSpendProposal.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return BatchCommunityPoolSpendProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseBatchCommunityPoolSpendProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.proposals = ((_c = object.proposals) === null || _c === void 0 ? void 0 : _c.map((e) => CommunityPoolSpendProposal.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAtomicMarketOrderFeeMultiplierScheduleProposal() {
    return { title: "", description: "", marketFeeMultipliers: [] };
}
export const AtomicMarketOrderFeeMultiplierScheduleProposal = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.marketFeeMultipliers) {
            MarketFeeMultiplier.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAtomicMarketOrderFeeMultiplierScheduleProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.marketFeeMultipliers.push(MarketFeeMultiplier.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            title: isSet(object.title) ? globalThis.String(object.title) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            marketFeeMultipliers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.marketFeeMultipliers)
                ? object.marketFeeMultipliers.map((e) => MarketFeeMultiplier.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a;
        const obj = {};
        if (message.title !== "") {
            obj.title = message.title;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if ((_a = message.marketFeeMultipliers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.marketFeeMultipliers = message.marketFeeMultipliers.map((e) => MarketFeeMultiplier.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return AtomicMarketOrderFeeMultiplierScheduleProposal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAtomicMarketOrderFeeMultiplierScheduleProposal();
        message.title = (_a = object.title) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.marketFeeMultipliers = ((_c = object.marketFeeMultipliers) === null || _c === void 0 ? void 0 : _c.map((e) => MarketFeeMultiplier.fromPartial(e))) || [];
        return message;
    },
};
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
