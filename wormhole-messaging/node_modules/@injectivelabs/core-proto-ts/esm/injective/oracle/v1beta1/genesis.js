/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { BandIBCParams, BandOracleRequest, BandPriceState, ChainlinkPriceState, CoinbasePriceState, Params, PriceFeedState, PriceRecords, ProviderState, PythPriceState, } from "./oracle";
function createBaseGenesisState() {
    return {
        params: undefined,
        bandRelayers: [],
        bandPriceStates: [],
        priceFeedPriceStates: [],
        coinbasePriceStates: [],
        bandIbcPriceStates: [],
        bandIbcOracleRequests: [],
        bandIbcParams: undefined,
        bandIbcLatestClientId: "0",
        calldataRecords: [],
        bandIbcLatestRequestId: "0",
        chainlinkPriceStates: [],
        historicalPriceRecords: [],
        providerStates: [],
        pythPriceStates: [],
    };
}
export const GenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.bandRelayers) {
            writer.uint32(18).string(v);
        }
        for (const v of message.bandPriceStates) {
            BandPriceState.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.priceFeedPriceStates) {
            PriceFeedState.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.coinbasePriceStates) {
            CoinbasePriceState.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.bandIbcPriceStates) {
            BandPriceState.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.bandIbcOracleRequests) {
            BandOracleRequest.encode(v, writer.uint32(58).fork()).ldelim();
        }
        if (message.bandIbcParams !== undefined) {
            BandIBCParams.encode(message.bandIbcParams, writer.uint32(66).fork()).ldelim();
        }
        if (message.bandIbcLatestClientId !== "0") {
            writer.uint32(72).uint64(message.bandIbcLatestClientId);
        }
        for (const v of message.calldataRecords) {
            CalldataRecord.encode(v, writer.uint32(82).fork()).ldelim();
        }
        if (message.bandIbcLatestRequestId !== "0") {
            writer.uint32(88).uint64(message.bandIbcLatestRequestId);
        }
        for (const v of message.chainlinkPriceStates) {
            ChainlinkPriceState.encode(v, writer.uint32(98).fork()).ldelim();
        }
        for (const v of message.historicalPriceRecords) {
            PriceRecords.encode(v, writer.uint32(106).fork()).ldelim();
        }
        for (const v of message.providerStates) {
            ProviderState.encode(v, writer.uint32(114).fork()).ldelim();
        }
        for (const v of message.pythPriceStates) {
            PythPriceState.encode(v, writer.uint32(122).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.bandRelayers.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.bandPriceStates.push(BandPriceState.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.priceFeedPriceStates.push(PriceFeedState.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.coinbasePriceStates.push(CoinbasePriceState.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.bandIbcPriceStates.push(BandPriceState.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.bandIbcOracleRequests.push(BandOracleRequest.decode(reader, reader.uint32()));
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.bandIbcParams = BandIBCParams.decode(reader, reader.uint32());
                    continue;
                case 9:
                    if (tag !== 72) {
                        break;
                    }
                    message.bandIbcLatestClientId = longToString(reader.uint64());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.calldataRecords.push(CalldataRecord.decode(reader, reader.uint32()));
                    continue;
                case 11:
                    if (tag !== 88) {
                        break;
                    }
                    message.bandIbcLatestRequestId = longToString(reader.uint64());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.chainlinkPriceStates.push(ChainlinkPriceState.decode(reader, reader.uint32()));
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.historicalPriceRecords.push(PriceRecords.decode(reader, reader.uint32()));
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.providerStates.push(ProviderState.decode(reader, reader.uint32()));
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.pythPriceStates.push(PythPriceState.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
            bandRelayers: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.bandRelayers)
                ? object.bandRelayers.map((e) => globalThis.String(e))
                : [],
            bandPriceStates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.bandPriceStates)
                ? object.bandPriceStates.map((e) => BandPriceState.fromJSON(e))
                : [],
            priceFeedPriceStates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.priceFeedPriceStates)
                ? object.priceFeedPriceStates.map((e) => PriceFeedState.fromJSON(e))
                : [],
            coinbasePriceStates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.coinbasePriceStates)
                ? object.coinbasePriceStates.map((e) => CoinbasePriceState.fromJSON(e))
                : [],
            bandIbcPriceStates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.bandIbcPriceStates)
                ? object.bandIbcPriceStates.map((e) => BandPriceState.fromJSON(e))
                : [],
            bandIbcOracleRequests: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.bandIbcOracleRequests)
                ? object.bandIbcOracleRequests.map((e) => BandOracleRequest.fromJSON(e))
                : [],
            bandIbcParams: isSet(object.bandIbcParams) ? BandIBCParams.fromJSON(object.bandIbcParams) : undefined,
            bandIbcLatestClientId: isSet(object.bandIbcLatestClientId)
                ? globalThis.String(object.bandIbcLatestClientId)
                : "0",
            calldataRecords: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.calldataRecords)
                ? object.calldataRecords.map((e) => CalldataRecord.fromJSON(e))
                : [],
            bandIbcLatestRequestId: isSet(object.bandIbcLatestRequestId)
                ? globalThis.String(object.bandIbcLatestRequestId)
                : "0",
            chainlinkPriceStates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.chainlinkPriceStates)
                ? object.chainlinkPriceStates.map((e) => ChainlinkPriceState.fromJSON(e))
                : [],
            historicalPriceRecords: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.historicalPriceRecords)
                ? object.historicalPriceRecords.map((e) => PriceRecords.fromJSON(e))
                : [],
            providerStates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.providerStates)
                ? object.providerStates.map((e) => ProviderState.fromJSON(e))
                : [],
            pythPriceStates: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.pythPriceStates)
                ? object.pythPriceStates.map((e) => PythPriceState.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        const obj = {};
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        if ((_a = message.bandRelayers) === null || _a === void 0 ? void 0 : _a.length) {
            obj.bandRelayers = message.bandRelayers;
        }
        if ((_b = message.bandPriceStates) === null || _b === void 0 ? void 0 : _b.length) {
            obj.bandPriceStates = message.bandPriceStates.map((e) => BandPriceState.toJSON(e));
        }
        if ((_c = message.priceFeedPriceStates) === null || _c === void 0 ? void 0 : _c.length) {
            obj.priceFeedPriceStates = message.priceFeedPriceStates.map((e) => PriceFeedState.toJSON(e));
        }
        if ((_d = message.coinbasePriceStates) === null || _d === void 0 ? void 0 : _d.length) {
            obj.coinbasePriceStates = message.coinbasePriceStates.map((e) => CoinbasePriceState.toJSON(e));
        }
        if ((_e = message.bandIbcPriceStates) === null || _e === void 0 ? void 0 : _e.length) {
            obj.bandIbcPriceStates = message.bandIbcPriceStates.map((e) => BandPriceState.toJSON(e));
        }
        if ((_f = message.bandIbcOracleRequests) === null || _f === void 0 ? void 0 : _f.length) {
            obj.bandIbcOracleRequests = message.bandIbcOracleRequests.map((e) => BandOracleRequest.toJSON(e));
        }
        if (message.bandIbcParams !== undefined) {
            obj.bandIbcParams = BandIBCParams.toJSON(message.bandIbcParams);
        }
        if (message.bandIbcLatestClientId !== "0") {
            obj.bandIbcLatestClientId = message.bandIbcLatestClientId;
        }
        if ((_g = message.calldataRecords) === null || _g === void 0 ? void 0 : _g.length) {
            obj.calldataRecords = message.calldataRecords.map((e) => CalldataRecord.toJSON(e));
        }
        if (message.bandIbcLatestRequestId !== "0") {
            obj.bandIbcLatestRequestId = message.bandIbcLatestRequestId;
        }
        if ((_h = message.chainlinkPriceStates) === null || _h === void 0 ? void 0 : _h.length) {
            obj.chainlinkPriceStates = message.chainlinkPriceStates.map((e) => ChainlinkPriceState.toJSON(e));
        }
        if ((_j = message.historicalPriceRecords) === null || _j === void 0 ? void 0 : _j.length) {
            obj.historicalPriceRecords = message.historicalPriceRecords.map((e) => PriceRecords.toJSON(e));
        }
        if ((_k = message.providerStates) === null || _k === void 0 ? void 0 : _k.length) {
            obj.providerStates = message.providerStates.map((e) => ProviderState.toJSON(e));
        }
        if ((_l = message.pythPriceStates) === null || _l === void 0 ? void 0 : _l.length) {
            obj.pythPriceStates = message.pythPriceStates.map((e) => PythPriceState.toJSON(e));
        }
        return obj;
    },
    create(base) {
        return GenesisState.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        const message = createBaseGenesisState();
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        message.bandRelayers = ((_a = object.bandRelayers) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.bandPriceStates = ((_b = object.bandPriceStates) === null || _b === void 0 ? void 0 : _b.map((e) => BandPriceState.fromPartial(e))) || [];
        message.priceFeedPriceStates = ((_c = object.priceFeedPriceStates) === null || _c === void 0 ? void 0 : _c.map((e) => PriceFeedState.fromPartial(e))) || [];
        message.coinbasePriceStates = ((_d = object.coinbasePriceStates) === null || _d === void 0 ? void 0 : _d.map((e) => CoinbasePriceState.fromPartial(e))) || [];
        message.bandIbcPriceStates = ((_e = object.bandIbcPriceStates) === null || _e === void 0 ? void 0 : _e.map((e) => BandPriceState.fromPartial(e))) || [];
        message.bandIbcOracleRequests = ((_f = object.bandIbcOracleRequests) === null || _f === void 0 ? void 0 : _f.map((e) => BandOracleRequest.fromPartial(e))) || [];
        message.bandIbcParams = (object.bandIbcParams !== undefined && object.bandIbcParams !== null)
            ? BandIBCParams.fromPartial(object.bandIbcParams)
            : undefined;
        message.bandIbcLatestClientId = (_g = object.bandIbcLatestClientId) !== null && _g !== void 0 ? _g : "0";
        message.calldataRecords = ((_h = object.calldataRecords) === null || _h === void 0 ? void 0 : _h.map((e) => CalldataRecord.fromPartial(e))) || [];
        message.bandIbcLatestRequestId = (_j = object.bandIbcLatestRequestId) !== null && _j !== void 0 ? _j : "0";
        message.chainlinkPriceStates = ((_k = object.chainlinkPriceStates) === null || _k === void 0 ? void 0 : _k.map((e) => ChainlinkPriceState.fromPartial(e))) || [];
        message.historicalPriceRecords = ((_l = object.historicalPriceRecords) === null || _l === void 0 ? void 0 : _l.map((e) => PriceRecords.fromPartial(e))) || [];
        message.providerStates = ((_m = object.providerStates) === null || _m === void 0 ? void 0 : _m.map((e) => ProviderState.fromPartial(e))) || [];
        message.pythPriceStates = ((_o = object.pythPriceStates) === null || _o === void 0 ? void 0 : _o.map((e) => PythPriceState.fromPartial(e))) || [];
        return message;
    },
};
function createBaseCalldataRecord() {
    return { clientId: "0", calldata: new Uint8Array(0) };
}
export const CalldataRecord = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.clientId !== "0") {
            writer.uint32(8).uint64(message.clientId);
        }
        if (message.calldata.length !== 0) {
            writer.uint32(18).bytes(message.calldata);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCalldataRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.clientId = longToString(reader.uint64());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.calldata = reader.bytes();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            clientId: isSet(object.clientId) ? globalThis.String(object.clientId) : "0",
            calldata: isSet(object.calldata) ? bytesFromBase64(object.calldata) : new Uint8Array(0),
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.clientId !== "0") {
            obj.clientId = message.clientId;
        }
        if (message.calldata.length !== 0) {
            obj.calldata = base64FromBytes(message.calldata);
        }
        return obj;
    },
    create(base) {
        return CalldataRecord.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseCalldataRecord();
        message.clientId = (_a = object.clientId) !== null && _a !== void 0 ? _a : "0";
        message.calldata = (_b = object.calldata) !== null && _b !== void 0 ? _b : new Uint8Array(0);
        return message;
    },
};
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        const bin = globalThis.atob(b64);
        const arr = new Uint8Array(bin.length);
        for (let i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        const bin = [];
        arr.forEach((byte) => {
            bin.push(globalThis.String.fromCharCode(byte));
        });
        return globalThis.btoa(bin.join(""));
    }
}
function longToString(long) {
    return long.toString();
}
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
