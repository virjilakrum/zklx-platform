/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { Namespace, Roles } from "./permissions";
function createBaseMsgUpdateParams() {
    return { authority: "", params: undefined };
}
export const MsgUpdateParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.authority !== "") {
            writer.uint32(10).string(message.authority);
        }
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.authority = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.params = Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
            params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.authority !== "") {
            obj.authority = message.authority;
        }
        if (message.params !== undefined) {
            obj.params = Params.toJSON(message.params);
        }
        return obj;
    },
    create(base) {
        return MsgUpdateParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateParams();
        message.authority = (_a = object.authority) !== null && _a !== void 0 ? _a : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateParamsResponse() {
    return {};
}
export const MsgUpdateParamsResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgUpdateParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateParamsResponse();
        return message;
    },
};
function createBaseMsgCreateNamespace() {
    return { sender: "", namespace: undefined };
}
export const MsgCreateNamespace = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespace !== undefined) {
            Namespace.encode(message.namespace, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.namespace = Namespace.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            namespace: isSet(object.namespace) ? Namespace.fromJSON(object.namespace) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.namespace !== undefined) {
            obj.namespace = Namespace.toJSON(message.namespace);
        }
        return obj;
    },
    create(base) {
        return MsgCreateNamespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgCreateNamespace();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespace = (object.namespace !== undefined && object.namespace !== null)
            ? Namespace.fromPartial(object.namespace)
            : undefined;
        return message;
    },
};
function createBaseMsgCreateNamespaceResponse() {
    return {};
}
export const MsgCreateNamespaceResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateNamespaceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgCreateNamespaceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgCreateNamespaceResponse();
        return message;
    },
};
function createBaseMsgDeleteNamespace() {
    return { sender: "", namespaceDenom: "" };
}
export const MsgDeleteNamespace = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.namespaceDenom = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? globalThis.String(object.namespaceDenom) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.namespaceDenom !== "") {
            obj.namespaceDenom = message.namespaceDenom;
        }
        return obj;
    },
    create(base) {
        return MsgDeleteNamespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgDeleteNamespace();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgDeleteNamespaceResponse() {
    return {};
}
export const MsgDeleteNamespaceResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDeleteNamespaceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgDeleteNamespaceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgDeleteNamespaceResponse();
        return message;
    },
};
function createBaseMsgUpdateNamespace() {
    return {
        sender: "",
        namespaceDenom: "",
        wasmHook: undefined,
        mintsPaused: undefined,
        sendsPaused: undefined,
        burnsPaused: undefined,
    };
}
export const MsgUpdateNamespace = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        if (message.wasmHook !== undefined) {
            MsgUpdateNamespace_MsgSetWasmHook.encode(message.wasmHook, writer.uint32(26).fork()).ldelim();
        }
        if (message.mintsPaused !== undefined) {
            MsgUpdateNamespace_MsgSetMintsPaused.encode(message.mintsPaused, writer.uint32(34).fork()).ldelim();
        }
        if (message.sendsPaused !== undefined) {
            MsgUpdateNamespace_MsgSetSendsPaused.encode(message.sendsPaused, writer.uint32(42).fork()).ldelim();
        }
        if (message.burnsPaused !== undefined) {
            MsgUpdateNamespace_MsgSetBurnsPaused.encode(message.burnsPaused, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.namespaceDenom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.wasmHook = MsgUpdateNamespace_MsgSetWasmHook.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.mintsPaused = MsgUpdateNamespace_MsgSetMintsPaused.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.sendsPaused = MsgUpdateNamespace_MsgSetSendsPaused.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.burnsPaused = MsgUpdateNamespace_MsgSetBurnsPaused.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? globalThis.String(object.namespaceDenom) : "",
            wasmHook: isSet(object.wasmHook) ? MsgUpdateNamespace_MsgSetWasmHook.fromJSON(object.wasmHook) : undefined,
            mintsPaused: isSet(object.mintsPaused)
                ? MsgUpdateNamespace_MsgSetMintsPaused.fromJSON(object.mintsPaused)
                : undefined,
            sendsPaused: isSet(object.sendsPaused)
                ? MsgUpdateNamespace_MsgSetSendsPaused.fromJSON(object.sendsPaused)
                : undefined,
            burnsPaused: isSet(object.burnsPaused)
                ? MsgUpdateNamespace_MsgSetBurnsPaused.fromJSON(object.burnsPaused)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.namespaceDenom !== "") {
            obj.namespaceDenom = message.namespaceDenom;
        }
        if (message.wasmHook !== undefined) {
            obj.wasmHook = MsgUpdateNamespace_MsgSetWasmHook.toJSON(message.wasmHook);
        }
        if (message.mintsPaused !== undefined) {
            obj.mintsPaused = MsgUpdateNamespace_MsgSetMintsPaused.toJSON(message.mintsPaused);
        }
        if (message.sendsPaused !== undefined) {
            obj.sendsPaused = MsgUpdateNamespace_MsgSetSendsPaused.toJSON(message.sendsPaused);
        }
        if (message.burnsPaused !== undefined) {
            obj.burnsPaused = MsgUpdateNamespace_MsgSetBurnsPaused.toJSON(message.burnsPaused);
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespace.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgUpdateNamespace();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        message.wasmHook = (object.wasmHook !== undefined && object.wasmHook !== null)
            ? MsgUpdateNamespace_MsgSetWasmHook.fromPartial(object.wasmHook)
            : undefined;
        message.mintsPaused = (object.mintsPaused !== undefined && object.mintsPaused !== null)
            ? MsgUpdateNamespace_MsgSetMintsPaused.fromPartial(object.mintsPaused)
            : undefined;
        message.sendsPaused = (object.sendsPaused !== undefined && object.sendsPaused !== null)
            ? MsgUpdateNamespace_MsgSetSendsPaused.fromPartial(object.sendsPaused)
            : undefined;
        message.burnsPaused = (object.burnsPaused !== undefined && object.burnsPaused !== null)
            ? MsgUpdateNamespace_MsgSetBurnsPaused.fromPartial(object.burnsPaused)
            : undefined;
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetWasmHook() {
    return { newValue: "" };
}
export const MsgUpdateNamespace_MsgSetWasmHook = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.newValue !== "") {
            writer.uint32(10).string(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetWasmHook();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.newValue = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? globalThis.String(object.newValue) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.newValue !== "") {
            obj.newValue = message.newValue;
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespace_MsgSetWasmHook.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetWasmHook();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetMintsPaused() {
    return { newValue: false };
}
export const MsgUpdateNamespace_MsgSetMintsPaused = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.newValue === true) {
            writer.uint32(8).bool(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetMintsPaused();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.newValue = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? globalThis.Boolean(object.newValue) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.newValue === true) {
            obj.newValue = message.newValue;
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespace_MsgSetMintsPaused.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetMintsPaused();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetSendsPaused() {
    return { newValue: false };
}
export const MsgUpdateNamespace_MsgSetSendsPaused = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.newValue === true) {
            writer.uint32(8).bool(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetSendsPaused();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.newValue = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? globalThis.Boolean(object.newValue) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.newValue === true) {
            obj.newValue = message.newValue;
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespace_MsgSetSendsPaused.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetSendsPaused();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseMsgUpdateNamespace_MsgSetBurnsPaused() {
    return { newValue: false };
}
export const MsgUpdateNamespace_MsgSetBurnsPaused = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.newValue === true) {
            writer.uint32(8).bool(message.newValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespace_MsgSetBurnsPaused();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.newValue = reader.bool();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { newValue: isSet(object.newValue) ? globalThis.Boolean(object.newValue) : false };
    },
    toJSON(message) {
        const obj = {};
        if (message.newValue === true) {
            obj.newValue = message.newValue;
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespace_MsgSetBurnsPaused.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespace_MsgSetBurnsPaused();
        message.newValue = (_a = object.newValue) !== null && _a !== void 0 ? _a : false;
        return message;
    },
};
function createBaseMsgUpdateNamespaceResponse() {
    return {};
}
export const MsgUpdateNamespaceResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgUpdateNamespaceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateNamespaceResponse();
        return message;
    },
};
function createBaseMsgUpdateNamespaceRoles() {
    return { sender: "", namespaceDenom: "", rolePermissions: {}, addressRoles: {} };
}
export const MsgUpdateNamespaceRoles = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        Object.entries(message.rolePermissions).forEach(([key, value]) => {
            MsgUpdateNamespaceRoles_RolePermissionsEntry.encode({ key: key, value }, writer.uint32(26).fork())
                .ldelim();
        });
        Object.entries(message.addressRoles).forEach(([key, value]) => {
            MsgUpdateNamespaceRoles_AddressRolesEntry.encode({ key: key, value }, writer.uint32(34).fork()).ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceRoles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.namespaceDenom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = MsgUpdateNamespaceRoles_RolePermissionsEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.rolePermissions[entry3.key] = entry3.value;
                    }
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    const entry4 = MsgUpdateNamespaceRoles_AddressRolesEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.addressRoles[entry4.key] = entry4.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? globalThis.String(object.namespaceDenom) : "",
            rolePermissions: isObject(object.rolePermissions)
                ? Object.entries(object.rolePermissions).reduce((acc, [key, value]) => {
                    acc[key] = Number(value);
                    return acc;
                }, {})
                : {},
            addressRoles: isObject(object.addressRoles)
                ? Object.entries(object.addressRoles).reduce((acc, [key, value]) => {
                    acc[key] = Roles.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.namespaceDenom !== "") {
            obj.namespaceDenom = message.namespaceDenom;
        }
        if (message.rolePermissions) {
            const entries = Object.entries(message.rolePermissions);
            if (entries.length > 0) {
                obj.rolePermissions = {};
                entries.forEach(([k, v]) => {
                    obj.rolePermissions[k] = Math.round(v);
                });
            }
        }
        if (message.addressRoles) {
            const entries = Object.entries(message.addressRoles);
            if (entries.length > 0) {
                obj.addressRoles = {};
                entries.forEach(([k, v]) => {
                    obj.addressRoles[k] = Roles.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespaceRoles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgUpdateNamespaceRoles();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        message.rolePermissions = Object.entries((_c = object.rolePermissions) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = globalThis.Number(value);
            }
            return acc;
        }, {});
        message.addressRoles = Object.entries((_d = object.addressRoles) !== null && _d !== void 0 ? _d : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Roles.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseMsgUpdateNamespaceRoles_RolePermissionsEntry() {
    return { key: "", value: 0 };
}
export const MsgUpdateNamespaceRoles_RolePermissionsEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).uint32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceRoles_RolePermissionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.uint32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? globalThis.Number(object.value) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== 0) {
            obj.value = Math.round(message.value);
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespaceRoles_RolePermissionsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgUpdateNamespaceRoles_RolePermissionsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMsgUpdateNamespaceRoles_AddressRolesEntry() {
    return { key: "", value: undefined };
}
export const MsgUpdateNamespaceRoles_AddressRolesEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Roles.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceRoles_AddressRolesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Roles.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Roles.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = Roles.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return MsgUpdateNamespaceRoles_AddressRolesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgUpdateNamespaceRoles_AddressRolesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null) ? Roles.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseMsgUpdateNamespaceRolesResponse() {
    return {};
}
export const MsgUpdateNamespaceRolesResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUpdateNamespaceRolesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgUpdateNamespaceRolesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgUpdateNamespaceRolesResponse();
        return message;
    },
};
function createBaseMsgRevokeNamespaceRoles() {
    return { sender: "", namespaceDenom: "", addressRolesToRevoke: {} };
}
export const MsgRevokeNamespaceRoles = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.namespaceDenom !== "") {
            writer.uint32(18).string(message.namespaceDenom);
        }
        Object.entries(message.addressRolesToRevoke).forEach(([key, value]) => {
            MsgRevokeNamespaceRoles_AddressRolesToRevokeEntry.encode({ key: key, value }, writer.uint32(26).fork())
                .ldelim();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRevokeNamespaceRoles();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.namespaceDenom = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = MsgRevokeNamespaceRoles_AddressRolesToRevokeEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.addressRolesToRevoke[entry3.key] = entry3.value;
                    }
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            namespaceDenom: isSet(object.namespaceDenom) ? globalThis.String(object.namespaceDenom) : "",
            addressRolesToRevoke: isObject(object.addressRolesToRevoke)
                ? Object.entries(object.addressRolesToRevoke).reduce((acc, [key, value]) => {
                    acc[key] = Roles.fromJSON(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.namespaceDenom !== "") {
            obj.namespaceDenom = message.namespaceDenom;
        }
        if (message.addressRolesToRevoke) {
            const entries = Object.entries(message.addressRolesToRevoke);
            if (entries.length > 0) {
                obj.addressRolesToRevoke = {};
                entries.forEach(([k, v]) => {
                    obj.addressRolesToRevoke[k] = Roles.toJSON(v);
                });
            }
        }
        return obj;
    },
    create(base) {
        return MsgRevokeNamespaceRoles.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgRevokeNamespaceRoles();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.namespaceDenom = (_b = object.namespaceDenom) !== null && _b !== void 0 ? _b : "";
        message.addressRolesToRevoke = Object.entries((_c = object.addressRolesToRevoke) !== null && _c !== void 0 ? _c : {}).reduce((acc, [key, value]) => {
            if (value !== undefined) {
                acc[key] = Roles.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseMsgRevokeNamespaceRoles_AddressRolesToRevokeEntry() {
    return { key: "", value: undefined };
}
export const MsgRevokeNamespaceRoles_AddressRolesToRevokeEntry = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            Roles.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRevokeNamespaceRoles_AddressRolesToRevokeEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = Roles.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            key: isSet(object.key) ? globalThis.String(object.key) : "",
            value: isSet(object.value) ? Roles.fromJSON(object.value) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.key !== "") {
            obj.key = message.key;
        }
        if (message.value !== undefined) {
            obj.value = Roles.toJSON(message.value);
        }
        return obj;
    },
    create(base) {
        return MsgRevokeNamespaceRoles_AddressRolesToRevokeEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgRevokeNamespaceRoles_AddressRolesToRevokeEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null) ? Roles.fromPartial(object.value) : undefined;
        return message;
    },
};
function createBaseMsgRevokeNamespaceRolesResponse() {
    return {};
}
export const MsgRevokeNamespaceRolesResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRevokeNamespaceRolesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgRevokeNamespaceRolesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgRevokeNamespaceRolesResponse();
        return message;
    },
};
function createBaseMsgClaimVoucher() {
    return { sender: "", originator: "" };
}
export const MsgClaimVoucher = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.originator !== "") {
            writer.uint32(18).string(message.originator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaimVoucher();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sender = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.originator = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
            originator: isSet(object.originator) ? globalThis.String(object.originator) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sender !== "") {
            obj.sender = message.sender;
        }
        if (message.originator !== "") {
            obj.originator = message.originator;
        }
        return obj;
    },
    create(base) {
        return MsgClaimVoucher.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgClaimVoucher();
        message.sender = (_a = object.sender) !== null && _a !== void 0 ? _a : "";
        message.originator = (_b = object.originator) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgClaimVoucherResponse() {
    return {};
}
export const MsgClaimVoucherResponse = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgClaimVoucherResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return MsgClaimVoucherResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgClaimVoucherResponse();
        return message;
    },
};
export class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.UpdateParams = this.UpdateParams.bind(this);
        this.CreateNamespace = this.CreateNamespace.bind(this);
        this.DeleteNamespace = this.DeleteNamespace.bind(this);
        this.UpdateNamespace = this.UpdateNamespace.bind(this);
        this.UpdateNamespaceRoles = this.UpdateNamespaceRoles.bind(this);
        this.RevokeNamespaceRoles = this.RevokeNamespaceRoles.bind(this);
        this.ClaimVoucher = this.ClaimVoucher.bind(this);
    }
    UpdateParams(request, metadata) {
        return this.rpc.unary(MsgUpdateParamsDesc, MsgUpdateParams.fromPartial(request), metadata);
    }
    CreateNamespace(request, metadata) {
        return this.rpc.unary(MsgCreateNamespaceDesc, MsgCreateNamespace.fromPartial(request), metadata);
    }
    DeleteNamespace(request, metadata) {
        return this.rpc.unary(MsgDeleteNamespaceDesc, MsgDeleteNamespace.fromPartial(request), metadata);
    }
    UpdateNamespace(request, metadata) {
        return this.rpc.unary(MsgUpdateNamespaceDesc, MsgUpdateNamespace.fromPartial(request), metadata);
    }
    UpdateNamespaceRoles(request, metadata) {
        return this.rpc.unary(MsgUpdateNamespaceRolesDesc, MsgUpdateNamespaceRoles.fromPartial(request), metadata);
    }
    RevokeNamespaceRoles(request, metadata) {
        return this.rpc.unary(MsgRevokeNamespaceRolesDesc, MsgRevokeNamespaceRoles.fromPartial(request), metadata);
    }
    ClaimVoucher(request, metadata) {
        return this.rpc.unary(MsgClaimVoucherDesc, MsgClaimVoucher.fromPartial(request), metadata);
    }
}
export const MsgDesc = { serviceName: "injective.permissions.v1beta1.Msg" };
export const MsgUpdateParamsDesc = {
    methodName: "UpdateParams",
    service: MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return MsgUpdateParams.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = MsgUpdateParamsResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const MsgCreateNamespaceDesc = {
    methodName: "CreateNamespace",
    service: MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return MsgCreateNamespace.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = MsgCreateNamespaceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const MsgDeleteNamespaceDesc = {
    methodName: "DeleteNamespace",
    service: MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return MsgDeleteNamespace.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = MsgDeleteNamespaceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const MsgUpdateNamespaceDesc = {
    methodName: "UpdateNamespace",
    service: MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return MsgUpdateNamespace.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = MsgUpdateNamespaceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const MsgUpdateNamespaceRolesDesc = {
    methodName: "UpdateNamespaceRoles",
    service: MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return MsgUpdateNamespaceRoles.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = MsgUpdateNamespaceRolesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const MsgRevokeNamespaceRolesDesc = {
    methodName: "RevokeNamespaceRoles",
    service: MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return MsgRevokeNamespaceRoles.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = MsgRevokeNamespaceRolesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const MsgClaimVoucherDesc = {
    methodName: "ClaimVoucher",
    service: MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return MsgClaimVoucher.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = MsgClaimVoucherResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata !== null && metadata !== void 0 ? metadata : this.options.metadata;
        return new Promise((resolve, reject) => {
            var _a;
            grpc.unary(methodDesc, Object.assign(Object.assign({ request, host: this.host, metadata: maybeCombinedMetadata !== null && maybeCombinedMetadata !== void 0 ? maybeCombinedMetadata : {} }, (this.options.transport !== undefined ? { transport: this.options.transport } : {})), { debug: (_a = this.options.debug) !== null && _a !== void 0 ? _a : false, onEnd: function (response) {
                    if (response.status === grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                } }));
        });
    }
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
export class GrpcWebError extends globalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
