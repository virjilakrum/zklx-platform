import { HttpRestClient } from '@injectivelabs/utils';
import { Network, isDevnet, isTestnet } from '@injectivelabs/networks';
const ASSET_PRICE_SERVICE_URL = 'https://k8s.mainnet.asset.injective.network/asset-price/v1';
const TESTNET_ASSET_PRICE_SERVICE_URL = 'https://k8s.testnet.asset.injective.network/asset-price/v1';
const DEVNET_ASSET_PRICE_SERVICE_URL = 'https://devnet.asset.injective.dev/asset-price/v1';
const getAssetMicroserviceEndpoint = (network = Network.Mainnet) => {
    if (isTestnet(network)) {
        return TESTNET_ASSET_PRICE_SERVICE_URL;
    }
    if (isDevnet(network)) {
        return DEVNET_ASSET_PRICE_SERVICE_URL;
    }
    return ASSET_PRICE_SERVICE_URL;
};
export class TokenPrice {
    restClient;
    constructor(network) {
        this.restClient = new HttpRestClient(getAssetMicroserviceEndpoint(network));
    }
    async fetchUsdTokensPriceMap() {
        const { data } = (await this.restClient.get('denoms?withPrice=true'));
        const tokenPriceMap = Object.values(data).reduce((prices, tokenWithPrice) => {
            const id = tokenWithPrice.coingecko_id || tokenWithPrice.denom;
            return { ...prices, [id.toLowerCase()]: tokenWithPrice.price.price };
        }, {});
        return tokenPriceMap;
    }
}
//# sourceMappingURL=TokenPrice.js.map