import { UnspecifiedErrorCode, GrpcUnaryRequestException, } from '@injectivelabs/exceptions';
import { InjectiveArchiverRPC } from '@injectivelabs/indexer-proto-ts';
import BaseGrpcConsumer from '../../base/BaseIndexerGrpcConsumer';
import { IndexerModule } from '../types';
import { IndexerGrpcArchiverTransformer } from '../transformers';
/**
 * @category Indexer Grpc API
 */
export class IndexerGrpcArchiverApi extends BaseGrpcConsumer {
    module = IndexerModule.Archiver;
    client;
    constructor(endpoint) {
        super(endpoint);
        this.client = new InjectiveArchiverRPC.InjectiveArchiverRPCClientImpl(this.getGrpcWebImpl(endpoint));
    }
    async fetchHistoricalBalance({ account, resolution, }) {
        const request = InjectiveArchiverRPC.BalanceRequest.create();
        request.account = account;
        request.resolution = resolution;
        try {
            const response = await this.retry(() => this.client.Balance(request));
            return IndexerGrpcArchiverTransformer.grpcHistoricalBalanceResponseToHistoricalBalances(response);
        }
        catch (e) {
            if (e instanceof InjectiveArchiverRPC.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'Historical Balance',
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'Historical Balance',
                contextModule: this.module,
            });
        }
    }
    async fetchHistoricalRpnl({ account, resolution, }) {
        const request = InjectiveArchiverRPC.RpnlRequest.create();
        request.account = account;
        request.resolution = resolution;
        try {
            const response = await this.retry(() => this.client.Rpnl(request));
            return IndexerGrpcArchiverTransformer.grpcHistoricalRPNLResponseToHistoricalRPNL(response);
        }
        catch (e) {
            if (e instanceof InjectiveArchiverRPC.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'Historical Rpnl',
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'Historical Rpnl',
                contextModule: this.module,
            });
        }
    }
    async fetchHistoricalVolumes({ account, resolution, }) {
        const request = InjectiveArchiverRPC.VolumesRequest.create();
        request.account = account;
        request.resolution = resolution;
        try {
            const response = await this.retry(() => this.client.Volumes(request));
            return IndexerGrpcArchiverTransformer.grpcHistoricalVolumesResponseToHistoricalVolumes(response);
        }
        catch (e) {
            if (e instanceof InjectiveArchiverRPC.GrpcWebError) {
                throw new GrpcUnaryRequestException(new Error(e.toString()), {
                    code: e.code,
                    context: 'Historical Volumes',
                    contextModule: this.module,
                });
            }
            throw new GrpcUnaryRequestException(e, {
                code: UnspecifiedErrorCode,
                context: 'Historical Volumes',
                contextModule: this.module,
            });
        }
    }
}
//# sourceMappingURL=IndexerGrpcArchiverApi.js.map