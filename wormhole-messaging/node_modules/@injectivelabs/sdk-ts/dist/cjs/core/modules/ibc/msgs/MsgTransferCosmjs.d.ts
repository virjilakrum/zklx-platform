import { MsgTransfer as BaseMsgTransferCosmjs } from 'cosmjs-types/ibc/applications/transfer/v1/tx';
export declare namespace MsgTransferCosmjs {
    interface Params {
        amount: {
            denom: string;
            amount: string;
        };
        sender: string;
        port: string;
        receiver: string;
        channelId: string;
        timeout?: number;
        height?: {
            revisionHeight: number;
            revisionNumber: number;
        };
    }
    type Proto = BaseMsgTransferCosmjs;
}
/**
 * @category Messages
 *
 * @deprecated use MsgTransfer with SIGN_DIRECT and a Cosmos wallet
 */
export default class MsgTransferCosmjs {
    params: MsgTransferCosmjs.Params;
    constructor(params: MsgTransferCosmjs.Params);
    static fromJSON(params: MsgTransferCosmjs.Params): MsgTransferCosmjs;
    toProto(): BaseMsgTransferCosmjs;
    toData(): void;
    toAmino(): {
        type: string;
        value: {
            source_port: string;
            source_channel: string;
            token: {
                denom: string;
                amount: string;
            } | undefined;
            sender: string;
            receiver: string;
            timeout_height: {
                revision_number: string;
                revision_height: string;
            } | undefined;
            timeout_timestamp: string;
            memo: string;
        };
    };
    toWeb3(): {
        source_port: string;
        source_channel: string;
        token: {
            denom: string;
            amount: string;
        } | undefined;
        sender: string;
        receiver: string;
        timeout_height: {
            revision_number: string;
            revision_height: string;
        } | undefined;
        timeout_timestamp: string;
        memo: string;
        '@type': string;
    };
    toDirectSign(): {
        type: string;
        message: BaseMsgTransferCosmjs;
    };
    toBinary(): Uint8Array;
}
//# sourceMappingURL=MsgTransferCosmjs.d.ts.map