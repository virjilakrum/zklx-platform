"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenPrice = void 0;
const utils_1 = require("@injectivelabs/utils");
const networks_1 = require("@injectivelabs/networks");
const ASSET_PRICE_SERVICE_URL = 'https://k8s.mainnet.asset.injective.network/asset-price/v1';
const TESTNET_ASSET_PRICE_SERVICE_URL = 'https://k8s.testnet.asset.injective.network/asset-price/v1';
const DEVNET_ASSET_PRICE_SERVICE_URL = 'https://devnet.asset.injective.dev/asset-price/v1';
const getAssetMicroserviceEndpoint = (network = networks_1.Network.Mainnet) => {
    if ((0, networks_1.isTestnet)(network)) {
        return TESTNET_ASSET_PRICE_SERVICE_URL;
    }
    if ((0, networks_1.isDevnet)(network)) {
        return DEVNET_ASSET_PRICE_SERVICE_URL;
    }
    return ASSET_PRICE_SERVICE_URL;
};
class TokenPrice {
    constructor(network) {
        this.restClient = new utils_1.HttpRestClient(getAssetMicroserviceEndpoint(network));
    }
    fetchUsdTokensPriceMap() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data } = (yield this.restClient.get('denoms?withPrice=true'));
            const tokenPriceMap = Object.values(data).reduce((prices, tokenWithPrice) => {
                const id = tokenWithPrice.coingecko_id || tokenWithPrice.denom;
                return Object.assign(Object.assign({}, prices), { [id.toLowerCase()]: tokenWithPrice.price.price });
            }, {});
            return tokenPriceMap;
        });
    }
}
exports.TokenPrice = TokenPrice;
//# sourceMappingURL=TokenPrice.js.map