/* eslint-disable */
import { grpc } from "@injectivelabs/grpc-web";
import { BrowserHeaders } from "browser-headers";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "injective_archiver_rpc";
function createBaseBalanceRequest() {
    return { account: "", resolution: "" };
}
export const BalanceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.resolution !== "") {
            writer.uint32(18).string(message.resolution);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBalanceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.resolution = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? String(object.account) : "",
            resolution: isSet(object.resolution) ? String(object.resolution) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        message.resolution !== undefined && (obj.resolution = message.resolution);
        return obj;
    },
    create(base) {
        return BalanceRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseBalanceRequest();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.resolution = (_b = object.resolution) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseBalanceResponse() {
    return { historicalBalance: undefined };
}
export const BalanceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.historicalBalance !== undefined) {
            HistoricalBalance.encode(message.historicalBalance, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBalanceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.historicalBalance = HistoricalBalance.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            historicalBalance: isSet(object.historicalBalance)
                ? HistoricalBalance.fromJSON(object.historicalBalance)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.historicalBalance !== undefined && (obj.historicalBalance = message.historicalBalance
            ? HistoricalBalance.toJSON(message.historicalBalance)
            : undefined);
        return obj;
    },
    create(base) {
        return BalanceResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseBalanceResponse();
        message.historicalBalance = (object.historicalBalance !== undefined && object.historicalBalance !== null)
            ? HistoricalBalance.fromPartial(object.historicalBalance)
            : undefined;
        return message;
    },
};
function createBaseHistoricalBalance() {
    return { t: [], v: [] };
}
export const HistoricalBalance = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.t) {
            writer.sint32(v);
        }
        writer.ldelim();
        writer.uint32(18).fork();
        for (const v of message.v) {
            writer.double(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoricalBalance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.t.push(reader.sint32());
                        }
                    }
                    else {
                        message.t.push(reader.sint32());
                    }
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.v.push(reader.double());
                        }
                    }
                    else {
                        message.v.push(reader.double());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            t: Array.isArray(object === null || object === void 0 ? void 0 : object.t) ? object.t.map((e) => Number(e)) : [],
            v: Array.isArray(object === null || object === void 0 ? void 0 : object.v) ? object.v.map((e) => Number(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.t) {
            obj.t = message.t.map((e) => Math.round(e));
        }
        else {
            obj.t = [];
        }
        if (message.v) {
            obj.v = message.v.map((e) => e);
        }
        else {
            obj.v = [];
        }
        return obj;
    },
    create(base) {
        return HistoricalBalance.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseHistoricalBalance();
        message.t = ((_a = object.t) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.v = ((_b = object.v) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseRpnlRequest() {
    return { account: "", resolution: "" };
}
export const RpnlRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.resolution !== "") {
            writer.uint32(18).string(message.resolution);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRpnlRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.resolution = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? String(object.account) : "",
            resolution: isSet(object.resolution) ? String(object.resolution) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        message.resolution !== undefined && (obj.resolution = message.resolution);
        return obj;
    },
    create(base) {
        return RpnlRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseRpnlRequest();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.resolution = (_b = object.resolution) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseRpnlResponse() {
    return { historicalRpnl: undefined };
}
export const RpnlResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.historicalRpnl !== undefined) {
            HistoricalRPNL.encode(message.historicalRpnl, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRpnlResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.historicalRpnl = HistoricalRPNL.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            historicalRpnl: isSet(object.historicalRpnl) ? HistoricalRPNL.fromJSON(object.historicalRpnl) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.historicalRpnl !== undefined &&
            (obj.historicalRpnl = message.historicalRpnl ? HistoricalRPNL.toJSON(message.historicalRpnl) : undefined);
        return obj;
    },
    create(base) {
        return RpnlResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseRpnlResponse();
        message.historicalRpnl = (object.historicalRpnl !== undefined && object.historicalRpnl !== null)
            ? HistoricalRPNL.fromPartial(object.historicalRpnl)
            : undefined;
        return message;
    },
};
function createBaseHistoricalRPNL() {
    return { t: [], v: [] };
}
export const HistoricalRPNL = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.t) {
            writer.sint32(v);
        }
        writer.ldelim();
        writer.uint32(18).fork();
        for (const v of message.v) {
            writer.double(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoricalRPNL();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.t.push(reader.sint32());
                        }
                    }
                    else {
                        message.t.push(reader.sint32());
                    }
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.v.push(reader.double());
                        }
                    }
                    else {
                        message.v.push(reader.double());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            t: Array.isArray(object === null || object === void 0 ? void 0 : object.t) ? object.t.map((e) => Number(e)) : [],
            v: Array.isArray(object === null || object === void 0 ? void 0 : object.v) ? object.v.map((e) => Number(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.t) {
            obj.t = message.t.map((e) => Math.round(e));
        }
        else {
            obj.t = [];
        }
        if (message.v) {
            obj.v = message.v.map((e) => e);
        }
        else {
            obj.v = [];
        }
        return obj;
    },
    create(base) {
        return HistoricalRPNL.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseHistoricalRPNL();
        message.t = ((_a = object.t) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.v = ((_b = object.v) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
function createBaseVolumesRequest() {
    return { account: "", resolution: "" };
}
export const VolumesRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.account !== "") {
            writer.uint32(10).string(message.account);
        }
        if (message.resolution !== "") {
            writer.uint32(18).string(message.resolution);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVolumesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.account = reader.string();
                    break;
                case 2:
                    message.resolution = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            account: isSet(object.account) ? String(object.account) : "",
            resolution: isSet(object.resolution) ? String(object.resolution) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.account !== undefined && (obj.account = message.account);
        message.resolution !== undefined && (obj.resolution = message.resolution);
        return obj;
    },
    create(base) {
        return VolumesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseVolumesRequest();
        message.account = (_a = object.account) !== null && _a !== void 0 ? _a : "";
        message.resolution = (_b = object.resolution) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseVolumesResponse() {
    return { historicalVolumes: undefined };
}
export const VolumesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.historicalVolumes !== undefined) {
            HistoricalVolumes.encode(message.historicalVolumes, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVolumesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.historicalVolumes = HistoricalVolumes.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            historicalVolumes: isSet(object.historicalVolumes)
                ? HistoricalVolumes.fromJSON(object.historicalVolumes)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.historicalVolumes !== undefined && (obj.historicalVolumes = message.historicalVolumes
            ? HistoricalVolumes.toJSON(message.historicalVolumes)
            : undefined);
        return obj;
    },
    create(base) {
        return VolumesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseVolumesResponse();
        message.historicalVolumes = (object.historicalVolumes !== undefined && object.historicalVolumes !== null)
            ? HistoricalVolumes.fromPartial(object.historicalVolumes)
            : undefined;
        return message;
    },
};
function createBaseHistoricalVolumes() {
    return { t: [], v: [] };
}
export const HistoricalVolumes = {
    encode(message, writer = _m0.Writer.create()) {
        writer.uint32(10).fork();
        for (const v of message.t) {
            writer.sint32(v);
        }
        writer.ldelim();
        writer.uint32(18).fork();
        for (const v of message.v) {
            writer.double(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHistoricalVolumes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.t.push(reader.sint32());
                        }
                    }
                    else {
                        message.t.push(reader.sint32());
                    }
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.v.push(reader.double());
                        }
                    }
                    else {
                        message.v.push(reader.double());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            t: Array.isArray(object === null || object === void 0 ? void 0 : object.t) ? object.t.map((e) => Number(e)) : [],
            v: Array.isArray(object === null || object === void 0 ? void 0 : object.v) ? object.v.map((e) => Number(e)) : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.t) {
            obj.t = message.t.map((e) => Math.round(e));
        }
        else {
            obj.t = [];
        }
        if (message.v) {
            obj.v = message.v.map((e) => e);
        }
        else {
            obj.v = [];
        }
        return obj;
    },
    create(base) {
        return HistoricalVolumes.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseHistoricalVolumes();
        message.t = ((_a = object.t) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        message.v = ((_b = object.v) === null || _b === void 0 ? void 0 : _b.map((e) => e)) || [];
        return message;
    },
};
export class InjectiveArchiverRPCClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Balance = this.Balance.bind(this);
        this.Rpnl = this.Rpnl.bind(this);
        this.Volumes = this.Volumes.bind(this);
    }
    Balance(request, metadata) {
        return this.rpc.unary(InjectiveArchiverRPCBalanceDesc, BalanceRequest.fromPartial(request), metadata);
    }
    Rpnl(request, metadata) {
        return this.rpc.unary(InjectiveArchiverRPCRpnlDesc, RpnlRequest.fromPartial(request), metadata);
    }
    Volumes(request, metadata) {
        return this.rpc.unary(InjectiveArchiverRPCVolumesDesc, VolumesRequest.fromPartial(request), metadata);
    }
}
export const InjectiveArchiverRPCDesc = { serviceName: "injective_archiver_rpc.InjectiveArchiverRPC" };
export const InjectiveArchiverRPCBalanceDesc = {
    methodName: "Balance",
    service: InjectiveArchiverRPCDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return BalanceRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = BalanceResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const InjectiveArchiverRPCRpnlDesc = {
    methodName: "Rpnl",
    service: InjectiveArchiverRPCDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return RpnlRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = RpnlResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export const InjectiveArchiverRPCVolumesDesc = {
    methodName: "Volumes",
    service: InjectiveArchiverRPCDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return VolumesRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            const value = VolumesResponse.decode(data);
            return Object.assign(Object.assign({}, value), { toObject() {
                    return value;
                } });
        },
    },
};
export class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc.Code.OK) {
                        resolve(response.message.toObject());
                    }
                    else {
                        const err = new GrpcWebError(response.statusMessage, response.status, response.trailers);
                        reject(err);
                    }
                },
            });
        });
    }
}
var tsProtoGlobalThis = (() => {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function isSet(value) {
    return value !== null && value !== undefined;
}
export class GrpcWebError extends tsProtoGlobalThis.Error {
    constructor(message, code, metadata) {
        super(message);
        this.code = code;
        this.metadata = metadata;
    }
}
